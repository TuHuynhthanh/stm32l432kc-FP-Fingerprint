
STM32L432KC_MFP_HID_VCP.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000018c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004220  0800018c  0800018c  0001018c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  080043ac  080043ac  000143ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08004488  08004488  00014488  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08004490  08004490  00014490  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  08004494  08004494  00014494  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000168  20000000  08004498  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          000017f0  20000168  08004600  00020168  2**2
                  ALLOC
  8 ._user_heap_stack 00000600  20001958  08004600  00021958  2**0
                  ALLOC
  9 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 10 .debug_info   000264fa  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_abbrev 000049fe  00000000  00000000  00046692  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000b8a7  00000000  00000000  0004b090  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_aranges 000010f8  00000000  00000000  00056938  2**3
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 00001488  00000000  00000000  00057a30  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   000096cf  00000000  00000000  00058eb8  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    00006114  00000000  00000000  00062587  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .comment      0000007c  00000000  00000000  0006869b  2**0
                  CONTENTS, READONLY
 18 .debug_frame  00002e2c  00000000  00000000  00068718  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

0800018c <__do_global_dtors_aux>:
 800018c:	b510      	push	{r4, lr}
 800018e:	4c05      	ldr	r4, [pc, #20]	; (80001a4 <__do_global_dtors_aux+0x18>)
 8000190:	7823      	ldrb	r3, [r4, #0]
 8000192:	b933      	cbnz	r3, 80001a2 <__do_global_dtors_aux+0x16>
 8000194:	4b04      	ldr	r3, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x1c>)
 8000196:	b113      	cbz	r3, 800019e <__do_global_dtors_aux+0x12>
 8000198:	4804      	ldr	r0, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x20>)
 800019a:	f3af 8000 	nop.w
 800019e:	2301      	movs	r3, #1
 80001a0:	7023      	strb	r3, [r4, #0]
 80001a2:	bd10      	pop	{r4, pc}
 80001a4:	20000168 	.word	0x20000168
 80001a8:	00000000 	.word	0x00000000
 80001ac:	08004394 	.word	0x08004394

080001b0 <frame_dummy>:
 80001b0:	b508      	push	{r3, lr}
 80001b2:	4b03      	ldr	r3, [pc, #12]	; (80001c0 <frame_dummy+0x10>)
 80001b4:	b11b      	cbz	r3, 80001be <frame_dummy+0xe>
 80001b6:	4903      	ldr	r1, [pc, #12]	; (80001c4 <frame_dummy+0x14>)
 80001b8:	4803      	ldr	r0, [pc, #12]	; (80001c8 <frame_dummy+0x18>)
 80001ba:	f3af 8000 	nop.w
 80001be:	bd08      	pop	{r3, pc}
 80001c0:	00000000 	.word	0x00000000
 80001c4:	2000016c 	.word	0x2000016c
 80001c8:	08004394 	.word	0x08004394

080001cc <__aeabi_uldivmod>:
 80001cc:	b953      	cbnz	r3, 80001e4 <__aeabi_uldivmod+0x18>
 80001ce:	b94a      	cbnz	r2, 80001e4 <__aeabi_uldivmod+0x18>
 80001d0:	2900      	cmp	r1, #0
 80001d2:	bf08      	it	eq
 80001d4:	2800      	cmpeq	r0, #0
 80001d6:	bf1c      	itt	ne
 80001d8:	f04f 31ff 	movne.w	r1, #4294967295
 80001dc:	f04f 30ff 	movne.w	r0, #4294967295
 80001e0:	f000 b97a 	b.w	80004d8 <__aeabi_idiv0>
 80001e4:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001ec:	f000 f806 	bl	80001fc <__udivmoddi4>
 80001f0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f8:	b004      	add	sp, #16
 80001fa:	4770      	bx	lr

080001fc <__udivmoddi4>:
 80001fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000200:	468c      	mov	ip, r1
 8000202:	460d      	mov	r5, r1
 8000204:	4604      	mov	r4, r0
 8000206:	9e08      	ldr	r6, [sp, #32]
 8000208:	2b00      	cmp	r3, #0
 800020a:	d151      	bne.n	80002b0 <__udivmoddi4+0xb4>
 800020c:	428a      	cmp	r2, r1
 800020e:	4617      	mov	r7, r2
 8000210:	d96d      	bls.n	80002ee <__udivmoddi4+0xf2>
 8000212:	fab2 fe82 	clz	lr, r2
 8000216:	f1be 0f00 	cmp.w	lr, #0
 800021a:	d00b      	beq.n	8000234 <__udivmoddi4+0x38>
 800021c:	f1ce 0c20 	rsb	ip, lr, #32
 8000220:	fa01 f50e 	lsl.w	r5, r1, lr
 8000224:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000228:	fa02 f70e 	lsl.w	r7, r2, lr
 800022c:	ea4c 0c05 	orr.w	ip, ip, r5
 8000230:	fa00 f40e 	lsl.w	r4, r0, lr
 8000234:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8000238:	0c25      	lsrs	r5, r4, #16
 800023a:	fbbc f8fa 	udiv	r8, ip, sl
 800023e:	fa1f f987 	uxth.w	r9, r7
 8000242:	fb0a cc18 	mls	ip, sl, r8, ip
 8000246:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 800024a:	fb08 f309 	mul.w	r3, r8, r9
 800024e:	42ab      	cmp	r3, r5
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x6c>
 8000252:	19ed      	adds	r5, r5, r7
 8000254:	f108 32ff 	add.w	r2, r8, #4294967295
 8000258:	f080 8123 	bcs.w	80004a2 <__udivmoddi4+0x2a6>
 800025c:	42ab      	cmp	r3, r5
 800025e:	f240 8120 	bls.w	80004a2 <__udivmoddi4+0x2a6>
 8000262:	f1a8 0802 	sub.w	r8, r8, #2
 8000266:	443d      	add	r5, r7
 8000268:	1aed      	subs	r5, r5, r3
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb5 f0fa 	udiv	r0, r5, sl
 8000270:	fb0a 5510 	mls	r5, sl, r0, r5
 8000274:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000278:	fb00 f909 	mul.w	r9, r0, r9
 800027c:	45a1      	cmp	r9, r4
 800027e:	d909      	bls.n	8000294 <__udivmoddi4+0x98>
 8000280:	19e4      	adds	r4, r4, r7
 8000282:	f100 33ff 	add.w	r3, r0, #4294967295
 8000286:	f080 810a 	bcs.w	800049e <__udivmoddi4+0x2a2>
 800028a:	45a1      	cmp	r9, r4
 800028c:	f240 8107 	bls.w	800049e <__udivmoddi4+0x2a2>
 8000290:	3802      	subs	r0, #2
 8000292:	443c      	add	r4, r7
 8000294:	eba4 0409 	sub.w	r4, r4, r9
 8000298:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800029c:	2100      	movs	r1, #0
 800029e:	2e00      	cmp	r6, #0
 80002a0:	d061      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002a2:	fa24 f40e 	lsr.w	r4, r4, lr
 80002a6:	2300      	movs	r3, #0
 80002a8:	6034      	str	r4, [r6, #0]
 80002aa:	6073      	str	r3, [r6, #4]
 80002ac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d907      	bls.n	80002c4 <__udivmoddi4+0xc8>
 80002b4:	2e00      	cmp	r6, #0
 80002b6:	d054      	beq.n	8000362 <__udivmoddi4+0x166>
 80002b8:	2100      	movs	r1, #0
 80002ba:	e886 0021 	stmia.w	r6, {r0, r5}
 80002be:	4608      	mov	r0, r1
 80002c0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c4:	fab3 f183 	clz	r1, r3
 80002c8:	2900      	cmp	r1, #0
 80002ca:	f040 808e 	bne.w	80003ea <__udivmoddi4+0x1ee>
 80002ce:	42ab      	cmp	r3, r5
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xdc>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80fa 	bhi.w	80004cc <__udivmoddi4+0x2d0>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb65 0503 	sbc.w	r5, r5, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	46ac      	mov	ip, r5
 80002e2:	2e00      	cmp	r6, #0
 80002e4:	d03f      	beq.n	8000366 <__udivmoddi4+0x16a>
 80002e6:	e886 1010 	stmia.w	r6, {r4, ip}
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	b912      	cbnz	r2, 80002f6 <__udivmoddi4+0xfa>
 80002f0:	2701      	movs	r7, #1
 80002f2:	fbb7 f7f2 	udiv	r7, r7, r2
 80002f6:	fab7 fe87 	clz	lr, r7
 80002fa:	f1be 0f00 	cmp.w	lr, #0
 80002fe:	d134      	bne.n	800036a <__udivmoddi4+0x16e>
 8000300:	1beb      	subs	r3, r5, r7
 8000302:	0c3a      	lsrs	r2, r7, #16
 8000304:	fa1f fc87 	uxth.w	ip, r7
 8000308:	2101      	movs	r1, #1
 800030a:	fbb3 f8f2 	udiv	r8, r3, r2
 800030e:	0c25      	lsrs	r5, r4, #16
 8000310:	fb02 3318 	mls	r3, r2, r8, r3
 8000314:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8000318:	fb0c f308 	mul.w	r3, ip, r8
 800031c:	42ab      	cmp	r3, r5
 800031e:	d907      	bls.n	8000330 <__udivmoddi4+0x134>
 8000320:	19ed      	adds	r5, r5, r7
 8000322:	f108 30ff 	add.w	r0, r8, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x132>
 8000328:	42ab      	cmp	r3, r5
 800032a:	f200 80d1 	bhi.w	80004d0 <__udivmoddi4+0x2d4>
 800032e:	4680      	mov	r8, r0
 8000330:	1aed      	subs	r5, r5, r3
 8000332:	b2a3      	uxth	r3, r4
 8000334:	fbb5 f0f2 	udiv	r0, r5, r2
 8000338:	fb02 5510 	mls	r5, r2, r0, r5
 800033c:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8000340:	fb0c fc00 	mul.w	ip, ip, r0
 8000344:	45a4      	cmp	ip, r4
 8000346:	d907      	bls.n	8000358 <__udivmoddi4+0x15c>
 8000348:	19e4      	adds	r4, r4, r7
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	d202      	bcs.n	8000356 <__udivmoddi4+0x15a>
 8000350:	45a4      	cmp	ip, r4
 8000352:	f200 80b8 	bhi.w	80004c6 <__udivmoddi4+0x2ca>
 8000356:	4618      	mov	r0, r3
 8000358:	eba4 040c 	sub.w	r4, r4, ip
 800035c:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000360:	e79d      	b.n	800029e <__udivmoddi4+0xa2>
 8000362:	4631      	mov	r1, r6
 8000364:	4630      	mov	r0, r6
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	f1ce 0420 	rsb	r4, lr, #32
 800036e:	fa05 f30e 	lsl.w	r3, r5, lr
 8000372:	fa07 f70e 	lsl.w	r7, r7, lr
 8000376:	fa20 f804 	lsr.w	r8, r0, r4
 800037a:	0c3a      	lsrs	r2, r7, #16
 800037c:	fa25 f404 	lsr.w	r4, r5, r4
 8000380:	ea48 0803 	orr.w	r8, r8, r3
 8000384:	fbb4 f1f2 	udiv	r1, r4, r2
 8000388:	ea4f 4518 	mov.w	r5, r8, lsr #16
 800038c:	fb02 4411 	mls	r4, r2, r1, r4
 8000390:	fa1f fc87 	uxth.w	ip, r7
 8000394:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 8000398:	fb01 f30c 	mul.w	r3, r1, ip
 800039c:	42ab      	cmp	r3, r5
 800039e:	fa00 f40e 	lsl.w	r4, r0, lr
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x1bc>
 80003a4:	19ed      	adds	r5, r5, r7
 80003a6:	f101 30ff 	add.w	r0, r1, #4294967295
 80003aa:	f080 808a 	bcs.w	80004c2 <__udivmoddi4+0x2c6>
 80003ae:	42ab      	cmp	r3, r5
 80003b0:	f240 8087 	bls.w	80004c2 <__udivmoddi4+0x2c6>
 80003b4:	3902      	subs	r1, #2
 80003b6:	443d      	add	r5, r7
 80003b8:	1aeb      	subs	r3, r5, r3
 80003ba:	fa1f f588 	uxth.w	r5, r8
 80003be:	fbb3 f0f2 	udiv	r0, r3, r2
 80003c2:	fb02 3310 	mls	r3, r2, r0, r3
 80003c6:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80003ca:	fb00 f30c 	mul.w	r3, r0, ip
 80003ce:	42ab      	cmp	r3, r5
 80003d0:	d907      	bls.n	80003e2 <__udivmoddi4+0x1e6>
 80003d2:	19ed      	adds	r5, r5, r7
 80003d4:	f100 38ff 	add.w	r8, r0, #4294967295
 80003d8:	d26f      	bcs.n	80004ba <__udivmoddi4+0x2be>
 80003da:	42ab      	cmp	r3, r5
 80003dc:	d96d      	bls.n	80004ba <__udivmoddi4+0x2be>
 80003de:	3802      	subs	r0, #2
 80003e0:	443d      	add	r5, r7
 80003e2:	1aeb      	subs	r3, r5, r3
 80003e4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003e8:	e78f      	b.n	800030a <__udivmoddi4+0x10e>
 80003ea:	f1c1 0720 	rsb	r7, r1, #32
 80003ee:	fa22 f807 	lsr.w	r8, r2, r7
 80003f2:	408b      	lsls	r3, r1
 80003f4:	fa05 f401 	lsl.w	r4, r5, r1
 80003f8:	ea48 0303 	orr.w	r3, r8, r3
 80003fc:	fa20 fe07 	lsr.w	lr, r0, r7
 8000400:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 8000404:	40fd      	lsrs	r5, r7
 8000406:	ea4e 0e04 	orr.w	lr, lr, r4
 800040a:	fbb5 f9fc 	udiv	r9, r5, ip
 800040e:	ea4f 441e 	mov.w	r4, lr, lsr #16
 8000412:	fb0c 5519 	mls	r5, ip, r9, r5
 8000416:	fa1f f883 	uxth.w	r8, r3
 800041a:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 800041e:	fb09 f408 	mul.w	r4, r9, r8
 8000422:	42ac      	cmp	r4, r5
 8000424:	fa02 f201 	lsl.w	r2, r2, r1
 8000428:	fa00 fa01 	lsl.w	sl, r0, r1
 800042c:	d908      	bls.n	8000440 <__udivmoddi4+0x244>
 800042e:	18ed      	adds	r5, r5, r3
 8000430:	f109 30ff 	add.w	r0, r9, #4294967295
 8000434:	d243      	bcs.n	80004be <__udivmoddi4+0x2c2>
 8000436:	42ac      	cmp	r4, r5
 8000438:	d941      	bls.n	80004be <__udivmoddi4+0x2c2>
 800043a:	f1a9 0902 	sub.w	r9, r9, #2
 800043e:	441d      	add	r5, r3
 8000440:	1b2d      	subs	r5, r5, r4
 8000442:	fa1f fe8e 	uxth.w	lr, lr
 8000446:	fbb5 f0fc 	udiv	r0, r5, ip
 800044a:	fb0c 5510 	mls	r5, ip, r0, r5
 800044e:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 8000452:	fb00 f808 	mul.w	r8, r0, r8
 8000456:	45a0      	cmp	r8, r4
 8000458:	d907      	bls.n	800046a <__udivmoddi4+0x26e>
 800045a:	18e4      	adds	r4, r4, r3
 800045c:	f100 35ff 	add.w	r5, r0, #4294967295
 8000460:	d229      	bcs.n	80004b6 <__udivmoddi4+0x2ba>
 8000462:	45a0      	cmp	r8, r4
 8000464:	d927      	bls.n	80004b6 <__udivmoddi4+0x2ba>
 8000466:	3802      	subs	r0, #2
 8000468:	441c      	add	r4, r3
 800046a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046e:	eba4 0408 	sub.w	r4, r4, r8
 8000472:	fba0 8902 	umull	r8, r9, r0, r2
 8000476:	454c      	cmp	r4, r9
 8000478:	46c6      	mov	lr, r8
 800047a:	464d      	mov	r5, r9
 800047c:	d315      	bcc.n	80004aa <__udivmoddi4+0x2ae>
 800047e:	d012      	beq.n	80004a6 <__udivmoddi4+0x2aa>
 8000480:	b156      	cbz	r6, 8000498 <__udivmoddi4+0x29c>
 8000482:	ebba 030e 	subs.w	r3, sl, lr
 8000486:	eb64 0405 	sbc.w	r4, r4, r5
 800048a:	fa04 f707 	lsl.w	r7, r4, r7
 800048e:	40cb      	lsrs	r3, r1
 8000490:	431f      	orrs	r7, r3
 8000492:	40cc      	lsrs	r4, r1
 8000494:	6037      	str	r7, [r6, #0]
 8000496:	6074      	str	r4, [r6, #4]
 8000498:	2100      	movs	r1, #0
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	4618      	mov	r0, r3
 80004a0:	e6f8      	b.n	8000294 <__udivmoddi4+0x98>
 80004a2:	4690      	mov	r8, r2
 80004a4:	e6e0      	b.n	8000268 <__udivmoddi4+0x6c>
 80004a6:	45c2      	cmp	sl, r8
 80004a8:	d2ea      	bcs.n	8000480 <__udivmoddi4+0x284>
 80004aa:	ebb8 0e02 	subs.w	lr, r8, r2
 80004ae:	eb69 0503 	sbc.w	r5, r9, r3
 80004b2:	3801      	subs	r0, #1
 80004b4:	e7e4      	b.n	8000480 <__udivmoddi4+0x284>
 80004b6:	4628      	mov	r0, r5
 80004b8:	e7d7      	b.n	800046a <__udivmoddi4+0x26e>
 80004ba:	4640      	mov	r0, r8
 80004bc:	e791      	b.n	80003e2 <__udivmoddi4+0x1e6>
 80004be:	4681      	mov	r9, r0
 80004c0:	e7be      	b.n	8000440 <__udivmoddi4+0x244>
 80004c2:	4601      	mov	r1, r0
 80004c4:	e778      	b.n	80003b8 <__udivmoddi4+0x1bc>
 80004c6:	3802      	subs	r0, #2
 80004c8:	443c      	add	r4, r7
 80004ca:	e745      	b.n	8000358 <__udivmoddi4+0x15c>
 80004cc:	4608      	mov	r0, r1
 80004ce:	e708      	b.n	80002e2 <__udivmoddi4+0xe6>
 80004d0:	f1a8 0802 	sub.w	r8, r8, #2
 80004d4:	443d      	add	r5, r7
 80004d6:	e72b      	b.n	8000330 <__udivmoddi4+0x134>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80004dc:	b510      	push	{r4, lr}
  /*Configure the SysTick to have interrupt in 1ms time basis*/
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004de:	4b08      	ldr	r3, [pc, #32]	; (8000500 <HAL_InitTick+0x24>)
{
 80004e0:	4604      	mov	r4, r0
  HAL_SYSTICK_Config(SystemCoreClock/1000);
 80004e2:	6818      	ldr	r0, [r3, #0]
 80004e4:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80004e8:	fbb0 f0f3 	udiv	r0, r0, r3
 80004ec:	f000 f876 	bl	80005dc <HAL_SYSTICK_Config>

  /*Configure the SysTick IRQ priority */
  HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority ,0);
 80004f0:	2200      	movs	r2, #0
 80004f2:	4621      	mov	r1, r4
 80004f4:	f04f 30ff 	mov.w	r0, #4294967295
 80004f8:	f000 f830 	bl	800055c <HAL_NVIC_SetPriority>

  /* Return function status */
  return HAL_OK;
}
 80004fc:	2000      	movs	r0, #0
 80004fe:	bd10      	pop	{r4, pc}
 8000500:	20000154 	.word	0x20000154

08000504 <HAL_Init>:
{
 8000504:	b508      	push	{r3, lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000506:	2003      	movs	r0, #3
 8000508:	f000 f816 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 800050c:	2000      	movs	r0, #0
 800050e:	f7ff ffe5 	bl	80004dc <HAL_InitTick>
  HAL_MspInit();
 8000512:	f003 fc21 	bl	8003d58 <HAL_MspInit>
}
 8000516:	2000      	movs	r0, #0
 8000518:	bd08      	pop	{r3, pc}
	...

0800051c <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick++;
 800051c:	4a02      	ldr	r2, [pc, #8]	; (8000528 <HAL_IncTick+0xc>)
 800051e:	6813      	ldr	r3, [r2, #0]
 8000520:	3301      	adds	r3, #1
 8000522:	6013      	str	r3, [r2, #0]
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	200007b0 	.word	0x200007b0

0800052c <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 800052c:	4b01      	ldr	r3, [pc, #4]	; (8000534 <HAL_GetTick+0x8>)
 800052e:	6818      	ldr	r0, [r3, #0]
}
 8000530:	4770      	bx	lr
 8000532:	bf00      	nop
 8000534:	200007b0 	.word	0x200007b0

08000538 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000538:	4a07      	ldr	r2, [pc, #28]	; (8000558 <HAL_NVIC_SetPriorityGrouping+0x20>)
 800053a:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800053c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000540:	041b      	lsls	r3, r3, #16
 8000542:	0c1b      	lsrs	r3, r3, #16
 8000544:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << 8U)                      );              /* Insert write key and priorty group */
 8000548:	0200      	lsls	r0, r0, #8
 800054a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800054e:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8000552:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8000554:	60d3      	str	r3, [r2, #12]
 8000556:	4770      	bx	lr
 8000558:	e000ed00 	.word	0xe000ed00

0800055c <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800055c:	4b17      	ldr	r3, [pc, #92]	; (80005bc <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800055e:	b530      	push	{r4, r5, lr}
 8000560:	68dc      	ldr	r4, [r3, #12]
 8000562:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000566:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800056a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800056c:	2b04      	cmp	r3, #4
 800056e:	bf28      	it	cs
 8000570:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000572:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000574:	f04f 0501 	mov.w	r5, #1
 8000578:	fa05 f303 	lsl.w	r3, r5, r3
 800057c:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000580:	bf8c      	ite	hi
 8000582:	3c03      	subhi	r4, #3
 8000584:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000586:	4019      	ands	r1, r3
 8000588:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800058a:	fa05 f404 	lsl.w	r4, r5, r4
 800058e:	3c01      	subs	r4, #1
 8000590:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) < 0)
 8000592:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000594:	ea42 0201 	orr.w	r2, r2, r1
 8000598:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800059c:	bfaf      	iteee	ge
 800059e:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005a2:	f000 000f 	andlt.w	r0, r0, #15
 80005a6:	4b06      	ldrlt	r3, [pc, #24]	; (80005c0 <HAL_NVIC_SetPriority+0x64>)
 80005a8:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005aa:	bfa5      	ittet	ge
 80005ac:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
 80005b0:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b2:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005b4:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 80005b8:	bd30      	pop	{r4, r5, pc}
 80005ba:	bf00      	nop
 80005bc:	e000ed00 	.word	0xe000ed00
 80005c0:	e000ed14 	.word	0xe000ed14

080005c4 <HAL_NVIC_EnableIRQ>:
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 80005c4:	0942      	lsrs	r2, r0, #5
 80005c6:	2301      	movs	r3, #1
 80005c8:	f000 001f 	and.w	r0, r0, #31
 80005cc:	fa03 f000 	lsl.w	r0, r3, r0
 80005d0:	4b01      	ldr	r3, [pc, #4]	; (80005d8 <HAL_NVIC_EnableIRQ+0x14>)
 80005d2:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80005d6:	4770      	bx	lr
 80005d8:	e000e100 	.word	0xe000e100

080005dc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80005dc:	3801      	subs	r0, #1
 80005de:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80005e2:	d20a      	bcs.n	80005fa <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e4:	4b06      	ldr	r3, [pc, #24]	; (8000600 <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005e6:	4a07      	ldr	r2, [pc, #28]	; (8000604 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80005e8:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80005ea:	21f0      	movs	r1, #240	; 0xf0
 80005ec:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f0:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f2:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80005f4:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80005fa:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	e000e010 	.word	0xe000e010
 8000604:	e000ed00 	.word	0xe000ed00

08000608 <HAL_SYSTICK_CLKSourceConfig>:
  *             @arg SYSTICK_CLKSOURCE_HCLK_DIV8: AHB clock divided by 8 selected as SysTick clock source.
  *             @arg SYSTICK_CLKSOURCE_HCLK: AHB clock selected as SysTick clock source.
  * @retval None
  */
void HAL_SYSTICK_CLKSourceConfig(uint32_t CLKSource)
{
 8000608:	4b04      	ldr	r3, [pc, #16]	; (800061c <HAL_SYSTICK_CLKSourceConfig+0x14>)
  /* Check the parameters */
  assert_param(IS_SYSTICK_CLK_SOURCE(CLKSource));
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
  {
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800060a:	681a      	ldr	r2, [r3, #0]
  if (CLKSource == SYSTICK_CLKSOURCE_HCLK)
 800060c:	2804      	cmp	r0, #4
    SysTick->CTRL |= SYSTICK_CLKSOURCE_HCLK;
 800060e:	bf0c      	ite	eq
 8000610:	f042 0204 	orreq.w	r2, r2, #4
  }
  else
  {
    SysTick->CTRL &= ~SYSTICK_CLKSOURCE_HCLK;
 8000614:	f022 0204 	bicne.w	r2, r2, #4
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	4770      	bx	lr
 800061c:	e000e010 	.word	0xe000e010

08000620 <HAL_SYSTICK_Callback>:
/**
  * @brief  SYSTICK callback.
  * @retval None
  */
__weak void HAL_SYSTICK_Callback(void)
{
 8000620:	4770      	bx	lr

08000622 <HAL_SYSTICK_IRQHandler>:
{
 8000622:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8000624:	f7ff fffc 	bl	8000620 <HAL_SYSTICK_Callback>
 8000628:	bd08      	pop	{r3, pc}
	...

0800062c <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800062c:	b530      	push	{r4, r5, lr}
  uint32_t tmp = 0;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800062e:	2800      	cmp	r0, #0
 8000630:	d05b      	beq.n	80006ea <HAL_DMA_Init+0xbe>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8000632:	6801      	ldr	r1, [r0, #0]
 8000634:	4b2e      	ldr	r3, [pc, #184]	; (80006f0 <HAL_DMA_Init+0xc4>)
 8000636:	4299      	cmp	r1, r3
 8000638:	f04f 0414 	mov.w	r4, #20
 800063c:	d841      	bhi.n	80006c2 <HAL_DMA_Init+0x96>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800063e:	4a2d      	ldr	r2, [pc, #180]	; (80006f4 <HAL_DMA_Init+0xc8>)
 8000640:	440a      	add	r2, r1
 8000642:	fbb2 f2f4 	udiv	r2, r2, r4
 8000646:	0092      	lsls	r2, r2, #2
 8000648:	6442      	str	r2, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 800064a:	f2a3 4307 	subw	r3, r3, #1031	; 0x407
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
 800064e:	6403      	str	r3, [r0, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8000650:	2302      	movs	r3, #2
 8000652:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8000656:	6884      	ldr	r4, [r0, #8]
 8000658:	68c3      	ldr	r3, [r0, #12]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800065a:	6905      	ldr	r5, [r0, #16]
  tmp = hdma->Instance->CCR;
 800065c:	680a      	ldr	r2, [r1, #0]
  tmp |=  hdma->Init.Direction        |
 800065e:	4323      	orrs	r3, r4
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8000660:	432b      	orrs	r3, r5
 8000662:	6945      	ldr	r5, [r0, #20]
 8000664:	432b      	orrs	r3, r5
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8000666:	6985      	ldr	r5, [r0, #24]
 8000668:	432b      	orrs	r3, r5
 800066a:	69c5      	ldr	r5, [r0, #28]
 800066c:	432b      	orrs	r3, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 800066e:	6a05      	ldr	r5, [r0, #32]
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8000670:	f422 42ff 	bic.w	r2, r2, #32640	; 0x7f80
 8000674:	f022 0270 	bic.w	r2, r2, #112	; 0x70
          hdma->Init.Mode                | hdma->Init.Priority;
 8000678:	432b      	orrs	r3, r5
  tmp |=  hdma->Init.Direction        |
 800067a:	4313      	orrs	r3, r2
#endif /* DMAMUX1 */

#if !defined (DMAMUX1)

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800067c:	f5b4 4f80 	cmp.w	r4, #16384	; 0x4000
  hdma->Instance->CCR = tmp;
 8000680:	600b      	str	r3, [r1, #0]
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 8000682:	d011      	beq.n	80006a8 <HAL_DMA_Init+0x7c>
  {
    /* Write to DMA channel selection register */
    if (DMA1 == hdma->DmaBaseAddress)
 8000684:	4b1c      	ldr	r3, [pc, #112]	; (80006f8 <HAL_DMA_Init+0xcc>)
 8000686:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8000688:	6c44      	ldr	r4, [r0, #68]	; 0x44
 800068a:	429a      	cmp	r2, r3
 800068c:	f04f 030f 	mov.w	r3, #15
 8000690:	d11f      	bne.n	80006d2 <HAL_DMA_Init+0xa6>
    {
      /* Reset request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 8000692:	491a      	ldr	r1, [pc, #104]	; (80006fc <HAL_DMA_Init+0xd0>)
 8000694:	680a      	ldr	r2, [r1, #0]
 8000696:	40a3      	lsls	r3, r4
 8000698:	ea22 0303 	bic.w	r3, r2, r3
 800069c:	600b      	str	r3, [r1, #0]

      /* Configure request selection for DMA1 Channelx */
      DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 800069e:	6842      	ldr	r2, [r0, #4]
 80006a0:	680b      	ldr	r3, [r1, #0]
 80006a2:	40a2      	lsls	r2, r4
 80006a4:	431a      	orrs	r2, r3
 80006a6:	600a      	str	r2, [r1, #0]
#endif /* STM32L431xx || STM32L432xx || STM32L433xx || STM32L442xx || STM32L443xx */
       /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L442xx || STM32L486xx */
       /* STM32L496xx || STM32L4A6xx                                              */

  /* Clean callbacks */
  hdma->XferCpltCallback = NULL;
 80006a8:	2300      	movs	r3, #0

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80006aa:	2201      	movs	r2, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80006ac:	63c3      	str	r3, [r0, #60]	; 0x3c
  hdma->XferCpltCallback = NULL;
 80006ae:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma->XferHalfCpltCallback = NULL;
 80006b0:	6303      	str	r3, [r0, #48]	; 0x30
  hdma->XferErrorCallback = NULL;
 80006b2:	6343      	str	r3, [r0, #52]	; 0x34
  hdma->XferAbortCallback = NULL;
 80006b4:	6383      	str	r3, [r0, #56]	; 0x38
  hdma->State  = HAL_DMA_STATE_READY;
 80006b6:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80006ba:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24

  return HAL_OK;
 80006be:	4618      	mov	r0, r3
 80006c0:	bd30      	pop	{r4, r5, pc}
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80006c2:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <HAL_DMA_Init+0xd4>)
 80006c4:	440b      	add	r3, r1
 80006c6:	fbb3 f3f4 	udiv	r3, r3, r4
 80006ca:	009b      	lsls	r3, r3, #2
 80006cc:	6443      	str	r3, [r0, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80006ce:	4b0d      	ldr	r3, [pc, #52]	; (8000704 <HAL_DMA_Init+0xd8>)
 80006d0:	e7bd      	b.n	800064e <HAL_DMA_Init+0x22>
      DMA2_CSELR->CSELR &= ~(DMA_CSELR_C1S << hdma->ChannelIndex);
 80006d2:	490d      	ldr	r1, [pc, #52]	; (8000708 <HAL_DMA_Init+0xdc>)
 80006d4:	680a      	ldr	r2, [r1, #0]
 80006d6:	40a3      	lsls	r3, r4
 80006d8:	ea22 0303 	bic.w	r3, r2, r3
 80006dc:	600b      	str	r3, [r1, #0]
      DMA2_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex));
 80006de:	6843      	ldr	r3, [r0, #4]
 80006e0:	680a      	ldr	r2, [r1, #0]
 80006e2:	40a3      	lsls	r3, r4
 80006e4:	4313      	orrs	r3, r2
 80006e6:	600b      	str	r3, [r1, #0]
 80006e8:	e7de      	b.n	80006a8 <HAL_DMA_Init+0x7c>
    return HAL_ERROR;
 80006ea:	2001      	movs	r0, #1
}
 80006ec:	bd30      	pop	{r4, r5, pc}
 80006ee:	bf00      	nop
 80006f0:	40020407 	.word	0x40020407
 80006f4:	bffdfff8 	.word	0xbffdfff8
 80006f8:	40020000 	.word	0x40020000
 80006fc:	400200a8 	.word	0x400200a8
 8000700:	bffdfbf8 	.word	0xbffdfbf8
 8000704:	40020400 	.word	0x40020400
 8000708:	400204a8 	.word	0x400204a8

0800070c <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800070c:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800070e:	f890 4024 	ldrb.w	r4, [r0, #36]	; 0x24
 8000712:	2c01      	cmp	r4, #1
 8000714:	d036      	beq.n	8000784 <HAL_DMA_Start_IT+0x78>

  if(HAL_DMA_STATE_READY == hdma->State)
 8000716:	f890 5025 	ldrb.w	r5, [r0, #37]	; 0x25
  __HAL_LOCK(hdma);
 800071a:	2401      	movs	r4, #1
  if(HAL_DMA_STATE_READY == hdma->State)
 800071c:	b2ed      	uxtb	r5, r5
 800071e:	42a5      	cmp	r5, r4
  __HAL_LOCK(hdma);
 8000720:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
 8000724:	f04f 0600 	mov.w	r6, #0
 8000728:	f04f 0402 	mov.w	r4, #2
  if(HAL_DMA_STATE_READY == hdma->State)
 800072c:	d128      	bne.n	8000780 <HAL_DMA_Start_IT+0x74>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800072e:	f880 4025 	strb.w	r4, [r0, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8000732:	6804      	ldr	r4, [r0, #0]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8000734:	63c6      	str	r6, [r0, #60]	; 0x3c
    __HAL_DMA_DISABLE(hdma);
 8000736:	6826      	ldr	r6, [r4, #0]
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
  }
#endif

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000738:	6c47      	ldr	r7, [r0, #68]	; 0x44
    __HAL_DMA_DISABLE(hdma);
 800073a:	f026 0601 	bic.w	r6, r6, #1
 800073e:	6026      	str	r6, [r4, #0]
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000740:	6c06      	ldr	r6, [r0, #64]	; 0x40
 8000742:	40bd      	lsls	r5, r7
 8000744:	6075      	str	r5, [r6, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8000746:	6063      	str	r3, [r4, #4]

  /* Peripheral to Memory */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8000748:	6883      	ldr	r3, [r0, #8]
 800074a:	6805      	ldr	r5, [r0, #0]
 800074c:	2b10      	cmp	r3, #16
    if(NULL != hdma->XferHalfCpltCallback )
 800074e:	6b03      	ldr	r3, [r0, #48]	; 0x30
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8000750:	bf0b      	itete	eq
 8000752:	60a2      	streq	r2, [r4, #8]
  }
  /* Memory to Peripheral */
  else
  {
    /* Configure DMA Channel source address */
    hdma->Instance->CPAR = SrcAddress;
 8000754:	60a1      	strne	r1, [r4, #8]
    hdma->Instance->CMAR = SrcAddress;
 8000756:	60e1      	streq	r1, [r4, #12]

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
 8000758:	60e2      	strne	r2, [r4, #12]
    if(NULL != hdma->XferHalfCpltCallback )
 800075a:	b14b      	cbz	r3, 8000770 <HAL_DMA_Start_IT+0x64>
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800075c:	6823      	ldr	r3, [r4, #0]
 800075e:	f043 030e 	orr.w	r3, r3, #14
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000762:	6023      	str	r3, [r4, #0]
    __HAL_DMA_ENABLE(hdma);
 8000764:	682b      	ldr	r3, [r5, #0]
 8000766:	f043 0301 	orr.w	r3, r3, #1
 800076a:	602b      	str	r3, [r5, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800076c:	2000      	movs	r0, #0
 800076e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8000770:	6823      	ldr	r3, [r4, #0]
 8000772:	f023 0304 	bic.w	r3, r3, #4
 8000776:	6023      	str	r3, [r4, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8000778:	6823      	ldr	r3, [r4, #0]
 800077a:	f043 030a 	orr.w	r3, r3, #10
 800077e:	e7f0      	b.n	8000762 <HAL_DMA_Start_IT+0x56>
    __HAL_UNLOCK(hdma);
 8000780:	f880 6024 	strb.w	r6, [r0, #36]	; 0x24
  __HAL_LOCK(hdma);
 8000784:	2002      	movs	r0, #2
}
 8000786:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000788 <HAL_DMA_Abort_IT>:
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000788:	f890 2025 	ldrb.w	r2, [r0, #37]	; 0x25
 800078c:	2a02      	cmp	r2, #2
{
 800078e:	b510      	push	{r4, lr}
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8000790:	d003      	beq.n	800079a <HAL_DMA_Abort_IT+0x12>
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000792:	2204      	movs	r2, #4
 8000794:	63c2      	str	r2, [r0, #60]	; 0x3c
    status = HAL_ERROR;
 8000796:	2001      	movs	r0, #1
 8000798:	bd10      	pop	{r4, pc}
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800079a:	6802      	ldr	r2, [r0, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800079c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800079e:	6811      	ldr	r1, [r2, #0]
    if(hdma->XferAbortCallback != NULL)
 80007a0:	6b83      	ldr	r3, [r0, #56]	; 0x38
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80007a2:	f021 010e 	bic.w	r1, r1, #14
 80007a6:	6011      	str	r1, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80007a8:	6811      	ldr	r1, [r2, #0]
 80007aa:	f021 0101 	bic.w	r1, r1, #1
 80007ae:	6011      	str	r1, [r2, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80007b0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 80007b2:	2101      	movs	r1, #1
 80007b4:	fa01 f202 	lsl.w	r2, r1, r2
 80007b8:	6062      	str	r2, [r4, #4]
    __HAL_UNLOCK(hdma);
 80007ba:	2400      	movs	r4, #0
    hdma->State = HAL_DMA_STATE_READY;
 80007bc:	f880 1025 	strb.w	r1, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 80007c0:	f880 4024 	strb.w	r4, [r0, #36]	; 0x24
    if(hdma->XferAbortCallback != NULL)
 80007c4:	b113      	cbz	r3, 80007cc <HAL_DMA_Abort_IT+0x44>
      hdma->XferAbortCallback(hdma);
 80007c6:	4798      	blx	r3
  HAL_StatusTypeDef status = HAL_OK;
 80007c8:	4620      	mov	r0, r4
 80007ca:	bd10      	pop	{r4, pc}
 80007cc:	4618      	mov	r0, r3
}
 80007ce:	bd10      	pop	{r4, pc}

080007d0 <HAL_DMA_IRQHandler>:
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007d0:	6c01      	ldr	r1, [r0, #64]	; 0x40
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80007d2:	6c42      	ldr	r2, [r0, #68]	; 0x44
  uint32_t source_it = hdma->Instance->CCR;
 80007d4:	6803      	ldr	r3, [r0, #0]
{
 80007d6:	b470      	push	{r4, r5, r6}
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80007d8:	680e      	ldr	r6, [r1, #0]
  uint32_t source_it = hdma->Instance->CCR;
 80007da:	681d      	ldr	r5, [r3, #0]
  if ((RESET != (flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_HT)))
 80007dc:	2404      	movs	r4, #4
 80007de:	4094      	lsls	r4, r2
 80007e0:	4226      	tst	r6, r4
 80007e2:	d00e      	beq.n	8000802 <HAL_DMA_IRQHandler+0x32>
 80007e4:	f015 0f04 	tst.w	r5, #4
 80007e8:	d00b      	beq.n	8000802 <HAL_DMA_IRQHandler+0x32>
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 80007ea:	681a      	ldr	r2, [r3, #0]
 80007ec:	0692      	lsls	r2, r2, #26
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80007ee:	bf5e      	ittt	pl
 80007f0:	681a      	ldrpl	r2, [r3, #0]
 80007f2:	f022 0204 	bicpl.w	r2, r2, #4
 80007f6:	601a      	strpl	r2, [r3, #0]
     if(hdma->XferHalfCpltCallback != NULL)
 80007f8:	6b03      	ldr	r3, [r0, #48]	; 0x30
      hdma->DmaBaseAddress->IFCR = (DMA_ISR_HTIF1 << hdma->ChannelIndex);
 80007fa:	604c      	str	r4, [r1, #4]
    if (hdma->XferErrorCallback != NULL)
 80007fc:	b373      	cbz	r3, 800085c <HAL_DMA_IRQHandler+0x8c>
}
 80007fe:	bc70      	pop	{r4, r5, r6}
      hdma->XferErrorCallback(hdma);
 8000800:	4718      	bx	r3
  else if ((RESET != (flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TC)))
 8000802:	2402      	movs	r4, #2
 8000804:	4094      	lsls	r4, r2
 8000806:	4226      	tst	r6, r4
 8000808:	d012      	beq.n	8000830 <HAL_DMA_IRQHandler+0x60>
 800080a:	f015 0f02 	tst.w	r5, #2
 800080e:	d00f      	beq.n	8000830 <HAL_DMA_IRQHandler+0x60>
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0)
 8000810:	681a      	ldr	r2, [r3, #0]
 8000812:	0695      	lsls	r5, r2, #26
 8000814:	d406      	bmi.n	8000824 <HAL_DMA_IRQHandler+0x54>
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8000816:	681a      	ldr	r2, [r3, #0]
 8000818:	f022 020a 	bic.w	r2, r2, #10
 800081c:	601a      	str	r2, [r3, #0]
      hdma->State = HAL_DMA_STATE_READY;
 800081e:	2301      	movs	r3, #1
 8000820:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000824:	2300      	movs	r3, #0
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << hdma->ChannelIndex);
 8000826:	604c      	str	r4, [r1, #4]
    __HAL_UNLOCK(hdma);
 8000828:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if(hdma->XferCpltCallback != NULL)
 800082c:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
 800082e:	e7e5      	b.n	80007fc <HAL_DMA_IRQHandler+0x2c>
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8000830:	2408      	movs	r4, #8
 8000832:	4094      	lsls	r4, r2
 8000834:	4234      	tst	r4, r6
 8000836:	d011      	beq.n	800085c <HAL_DMA_IRQHandler+0x8c>
 8000838:	072c      	lsls	r4, r5, #28
 800083a:	d50f      	bpl.n	800085c <HAL_DMA_IRQHandler+0x8c>
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800083c:	681c      	ldr	r4, [r3, #0]
 800083e:	f024 040e 	bic.w	r4, r4, #14
 8000842:	601c      	str	r4, [r3, #0]
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8000844:	2301      	movs	r3, #1
 8000846:	fa03 f202 	lsl.w	r2, r3, r2
 800084a:	604a      	str	r2, [r1, #4]
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800084c:	63c3      	str	r3, [r0, #60]	; 0x3c
    hdma->State = HAL_DMA_STATE_READY;
 800084e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
    __HAL_UNLOCK(hdma);
 8000852:	2300      	movs	r3, #0
 8000854:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
    if (hdma->XferErrorCallback != NULL)
 8000858:	6b43      	ldr	r3, [r0, #52]	; 0x34
 800085a:	e7cf      	b.n	80007fc <HAL_DMA_IRQHandler+0x2c>
}
 800085c:	bc70      	pop	{r4, r5, r6}
 800085e:	4770      	bx	lr

08000860 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000864:	b085      	sub	sp, #20
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000866:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000868:	f8df 8158 	ldr.w	r8, [pc, #344]	; 80009c4 <HAL_GPIO_Init+0x164>
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
        SYSCFG->EXTICR[position >> 2] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800086c:	4a53      	ldr	r2, [pc, #332]	; (80009bc <HAL_GPIO_Init+0x15c>)
  while (((GPIO_Init->Pin) >> position) != RESET)
 800086e:	9301      	str	r3, [sp, #4]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000870:	f04f 090f 	mov.w	r9, #15
  uint32_t position = 0x00;
 8000874:	2300      	movs	r3, #0
  while (((GPIO_Init->Pin) >> position) != RESET)
 8000876:	9c01      	ldr	r4, [sp, #4]
 8000878:	40dc      	lsrs	r4, r3
 800087a:	d102      	bne.n	8000882 <HAL_GPIO_Init+0x22>
      }
    }
    
    position++;
  }
}
 800087c:	b005      	add	sp, #20
 800087e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000882:	2401      	movs	r4, #1
 8000884:	fa04 fa03 	lsl.w	sl, r4, r3
    if(iocurrent)
 8000888:	9c01      	ldr	r4, [sp, #4]
 800088a:	ea14 050a 	ands.w	r5, r4, sl
 800088e:	f000 808f 	beq.w	80009b0 <HAL_GPIO_Init+0x150>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000892:	684c      	ldr	r4, [r1, #4]
 8000894:	f024 0b10 	bic.w	fp, r4, #16
 8000898:	f1bb 0f02 	cmp.w	fp, #2
 800089c:	d111      	bne.n	80008c2 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3];
 800089e:	08df      	lsrs	r7, r3, #3
 80008a0:	eb00 0787 	add.w	r7, r0, r7, lsl #2
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008a4:	f003 0e07 	and.w	lr, r3, #7
        temp = GPIOx->AFR[position >> 3];
 80008a8:	6a3e      	ldr	r6, [r7, #32]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80008aa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80008ae:	fa09 fc0e 	lsl.w	ip, r9, lr
 80008b2:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80008b6:	690e      	ldr	r6, [r1, #16]
 80008b8:	fa06 f60e 	lsl.w	r6, r6, lr
 80008bc:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3] = temp;
 80008c0:	623e      	str	r6, [r7, #32]
 80008c2:	ea4f 0c43 	mov.w	ip, r3, lsl #1
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008c6:	2703      	movs	r7, #3
      temp = GPIOx->MODER;
 80008c8:	6806      	ldr	r6, [r0, #0]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008ca:	fa07 f70c 	lsl.w	r7, r7, ip
 80008ce:	43ff      	mvns	r7, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008d0:	f004 0e03 	and.w	lr, r4, #3
      temp &= ~(GPIO_MODER_MODE0 << (position * 2));
 80008d4:	403e      	ands	r6, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008d6:	fa0e fe0c 	lsl.w	lr, lr, ip
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008da:	f10b 3bff 	add.w	fp, fp, #4294967295
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80008de:	ea4e 0606 	orr.w	r6, lr, r6
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e2:	f1bb 0f01 	cmp.w	fp, #1
      GPIOx->MODER = temp;
 80008e6:	6006      	str	r6, [r0, #0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80008e8:	d811      	bhi.n	800090e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 80008ea:	6886      	ldr	r6, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2));
 80008ec:	ea06 0b07 	and.w	fp, r6, r7
        temp |= (GPIO_Init->Speed << (position * 2));
 80008f0:	68ce      	ldr	r6, [r1, #12]
 80008f2:	fa06 fe0c 	lsl.w	lr, r6, ip
 80008f6:	ea4e 060b 	orr.w	r6, lr, fp
        GPIOx->OSPEEDR = temp;
 80008fa:	6086      	str	r6, [r0, #8]
        temp = GPIOx->OTYPER;
 80008fc:	6846      	ldr	r6, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80008fe:	ea26 0a0a 	bic.w	sl, r6, sl
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8000902:	f3c4 1600 	ubfx	r6, r4, #4, #1
 8000906:	409e      	lsls	r6, r3
 8000908:	ea46 060a 	orr.w	r6, r6, sl
        GPIOx->OTYPER = temp;
 800090c:	6046      	str	r6, [r0, #4]
      temp = GPIOx->PUPDR;
 800090e:	68c6      	ldr	r6, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2));
 8000910:	4037      	ands	r7, r6
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8000912:	688e      	ldr	r6, [r1, #8]
 8000914:	fa06 f60c 	lsl.w	r6, r6, ip
 8000918:	4337      	orrs	r7, r6
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800091a:	00e6      	lsls	r6, r4, #3
      GPIOx->PUPDR = temp;
 800091c:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800091e:	d547      	bpl.n	80009b0 <HAL_GPIO_Init+0x150>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000920:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000924:	f046 0601 	orr.w	r6, r6, #1
 8000928:	f8c8 6060 	str.w	r6, [r8, #96]	; 0x60
 800092c:	f8d8 6060 	ldr.w	r6, [r8, #96]	; 0x60
 8000930:	f023 0703 	bic.w	r7, r3, #3
 8000934:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8000938:	f006 0601 	and.w	r6, r6, #1
 800093c:	f507 3780 	add.w	r7, r7, #65536	; 0x10000
 8000940:	9603      	str	r6, [sp, #12]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000942:	f003 0e03 	and.w	lr, r3, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000946:	9e03      	ldr	r6, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2];
 8000948:	68be      	ldr	r6, [r7, #8]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 800094a:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 800094e:	fa09 fc0e 	lsl.w	ip, r9, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 8000952:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8000956:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 800095a:	d02b      	beq.n	80009b4 <HAL_GPIO_Init+0x154>
 800095c:	4e18      	ldr	r6, [pc, #96]	; (80009c0 <HAL_GPIO_Init+0x160>)
 800095e:	42b0      	cmp	r0, r6
 8000960:	d02a      	beq.n	80009b8 <HAL_GPIO_Init+0x158>
 8000962:	f506 6680 	add.w	r6, r6, #1024	; 0x400
 8000966:	42b0      	cmp	r0, r6
 8000968:	bf14      	ite	ne
 800096a:	2607      	movne	r6, #7
 800096c:	2602      	moveq	r6, #2
 800096e:	fa06 f60e 	lsl.w	r6, r6, lr
 8000972:	ea46 060c 	orr.w	r6, r6, ip
        SYSCFG->EXTICR[position >> 2] = temp;
 8000976:	60be      	str	r6, [r7, #8]
        temp = EXTI->IMR1;
 8000978:	6816      	ldr	r6, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 800097a:	43ef      	mvns	r7, r5
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800097c:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 8000980:	bf0c      	ite	eq
 8000982:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000984:	432e      	orrne	r6, r5
        EXTI->IMR1 = temp;
 8000986:	6016      	str	r6, [r2, #0]
        temp = EXTI->EMR1;
 8000988:	6856      	ldr	r6, [r2, #4]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800098a:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 800098e:	bf0c      	ite	eq
 8000990:	403e      	andeq	r6, r7
          temp |= iocurrent;
 8000992:	432e      	orrne	r6, r5
        EXTI->EMR1 = temp;
 8000994:	6056      	str	r6, [r2, #4]
        temp = EXTI->RTSR1;
 8000996:	6896      	ldr	r6, [r2, #8]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000998:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800099c:	bf0c      	ite	eq
 800099e:	403e      	andeq	r6, r7
          temp |= iocurrent;
 80009a0:	432e      	orrne	r6, r5
        EXTI->RTSR1 = temp;
 80009a2:	6096      	str	r6, [r2, #8]
        temp = EXTI->FTSR1;
 80009a4:	68d6      	ldr	r6, [r2, #12]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80009a6:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80009a8:	bf54      	ite	pl
 80009aa:	403e      	andpl	r6, r7
          temp |= iocurrent;
 80009ac:	432e      	orrmi	r6, r5
        EXTI->FTSR1 = temp;
 80009ae:	60d6      	str	r6, [r2, #12]
    position++;
 80009b0:	3301      	adds	r3, #1
 80009b2:	e760      	b.n	8000876 <HAL_GPIO_Init+0x16>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4 * (position & 0x03)));
 80009b4:	2600      	movs	r6, #0
 80009b6:	e7da      	b.n	800096e <HAL_GPIO_Init+0x10e>
 80009b8:	2601      	movs	r6, #1
 80009ba:	e7d8      	b.n	800096e <HAL_GPIO_Init+0x10e>
 80009bc:	40010400 	.word	0x40010400
 80009c0:	48000400 	.word	0x48000400
 80009c4:	40021000 	.word	0x40021000

080009c8 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80009c8:	b10a      	cbz	r2, 80009ce <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80009ca:	6181      	str	r1, [r0, #24]
 80009cc:	4770      	bx	lr
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80009ce:	6281      	str	r1, [r0, #40]	; 0x28
 80009d0:	4770      	bx	lr

080009d2 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80009d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t index = 0U;
  
  /* Check the PCD handle allocation */
  if(hpcd == NULL)
 80009d6:	4604      	mov	r4, r0
{
 80009d8:	b086      	sub	sp, #24
  if(hpcd == NULL)
 80009da:	2800      	cmp	r0, #0
 80009dc:	d077      	beq.n	8000ace <HAL_PCD_Init+0xfc>
  }
  
  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));
  
  if(hpcd->State == HAL_PCD_STATE_RESET)
 80009de:	f890 33ed 	ldrb.w	r3, [r0, #1005]	; 0x3ed
 80009e2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80009e6:	b91b      	cbnz	r3, 80009f0 <HAL_PCD_Init+0x1e>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80009e8:	f880 23ec 	strb.w	r2, [r0, #1004]	; 0x3ec

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80009ec:	f003 fb24 	bl	8004038 <HAL_PCD_MspInit>
  }

  hpcd->State = HAL_PCD_STATE_BUSY;

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 80009f0:	4625      	mov	r5, r4
  hpcd->State = HAL_PCD_STATE_BUSY;
 80009f2:	2303      	movs	r3, #3
  __HAL_PCD_DISABLE(hpcd);
 80009f4:	f855 0b10 	ldr.w	r0, [r5], #16
  hpcd->State = HAL_PCD_STATE_BUSY;
 80009f8:	f884 33ed 	strb.w	r3, [r4, #1005]	; 0x3ed
  __HAL_PCD_DISABLE(hpcd);
 80009fc:	f001 fffe 	bl	80029fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  USB_CoreInit(hpcd->Instance, hpcd->Init);
 8000a00:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a02:	466e      	mov	r6, sp
 8000a04:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a06:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a0a:	e886 0003 	stmia.w	r6, {r0, r1}
 8000a0e:	f104 0804 	add.w	r8, r4, #4
 8000a12:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000a16:	6820      	ldr	r0, [r4, #0]
 8000a18:	f001 ffe0 	bl	80029dc <USB_CoreInit>

  /* Force Device Mode*/
  USB_SetCurrentMode(hpcd->Instance , USB_DEVICE_MODE);
 8000a1c:	2100      	movs	r1, #0
 8000a1e:	6820      	ldr	r0, [r4, #0]
 8000a20:	f001 fff6 	bl	8002a10 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000a24:	2200      	movs	r2, #0
 8000a26:	6860      	ldr	r0, [r4, #4]
 8000a28:	f104 032c 	add.w	r3, r4, #44	; 0x2c
 8000a2c:	f104 0510 	add.w	r5, r4, #16
  {
    /* Init ep structure */
    hpcd->IN_ep[index].is_in = 1;
 8000a30:	2601      	movs	r6, #1
    hpcd->IN_ep[index].num = index;
    hpcd->IN_ep[index].tx_fifo_num = index;
    /* Control until ep is activated */
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000a32:	4611      	mov	r1, r2
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000a34:	4282      	cmp	r2, r0
 8000a36:	f103 0320 	add.w	r3, r3, #32
 8000a3a:	d138      	bne.n	8000aae <HAL_PCD_Init+0xdc>
 8000a3c:	2200      	movs	r2, #0
 8000a3e:	4623      	mov	r3, r4
    hpcd->IN_ep[index].xfer_len = 0;
  }
  
  for (index = 0; index < 15 ; index++)
  {
    hpcd->OUT_ep[index].is_in = 0;
 8000a40:	4617      	mov	r7, r2
    hpcd->OUT_ep[index].num = index;
 8000a42:	f883 220c 	strb.w	r2, [r3, #524]	; 0x20c
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000a46:	871a      	strh	r2, [r3, #56]	; 0x38
  for (index = 0; index < 15 ; index++)
 8000a48:	3201      	adds	r2, #1
 8000a4a:	2a0f      	cmp	r2, #15
    hpcd->OUT_ep[index].is_in = 0;
 8000a4c:	f883 720d 	strb.w	r7, [r3, #525]	; 0x20d
    /* Control until ep is activated */
    hpcd->OUT_ep[index].type = EP_TYPE_CTRL;
 8000a50:	f883 720f 	strb.w	r7, [r3, #527]	; 0x20f
    hpcd->OUT_ep[index].maxpacket = 0;
 8000a54:	f8c3 721c 	str.w	r7, [r3, #540]	; 0x21c
    hpcd->OUT_ep[index].xfer_buff = 0;
 8000a58:	f8c3 7220 	str.w	r7, [r3, #544]	; 0x220
    hpcd->OUT_ep[index].xfer_len = 0;
 8000a5c:	f8c3 7224 	str.w	r7, [r3, #548]	; 0x224
 8000a60:	f103 0320 	add.w	r3, r3, #32
  for (index = 0; index < 15 ; index++)
 8000a64:	d1ed      	bne.n	8000a42 <HAL_PCD_Init+0x70>
  }

  /* Init Device */
  USB_DevInit(hpcd->Instance, hpcd->Init);
 8000a66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000a68:	466e      	mov	r6, sp
 8000a6a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8000a6c:	e895 0003 	ldmia.w	r5, {r0, r1}
 8000a70:	e886 0003 	stmia.w	r6, {r0, r1}
 8000a74:	e898 000e 	ldmia.w	r8, {r1, r2, r3}
 8000a78:	6820      	ldr	r0, [r4, #0]
 8000a7a:	f001 ffcb 	bl	8002a14 <USB_DevInit>

  hpcd->USB_Address = 0;
  
  hpcd->State= HAL_PCD_STATE_READY;
 8000a7e:	2301      	movs	r3, #1
  hpcd->USB_Address = 0;
 8000a80:	f884 7028 	strb.w	r7, [r4, #40]	; 0x28
  hpcd->State= HAL_PCD_STATE_READY;
 8000a84:	f884 33ed 	strb.w	r3, [r4, #1005]	; 0x3ed
  
   /* Activate LPM */
  if (hpcd->Init.lpm_enable ==1)
 8000a88:	6a23      	ldr	r3, [r4, #32]
 8000a8a:	2b01      	cmp	r3, #1
 8000a8c:	d102      	bne.n	8000a94 <HAL_PCD_Init+0xc2>
  {
    HAL_PCDEx_ActivateLPM(hpcd);
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f000 fc05 	bl	800129e <HAL_PCDEx_ActivateLPM>
  }  
  /* Activate Battery charging */
  if (hpcd->Init.battery_charging_enable ==1)
 8000a94:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8000a96:	2b01      	cmp	r3, #1
 8000a98:	d102      	bne.n	8000aa0 <HAL_PCD_Init+0xce>
  {
    HAL_PCDEx_ActivateBCD(hpcd);
 8000a9a:	4620      	mov	r0, r4
 8000a9c:	f000 fbeb 	bl	8001276 <HAL_PCDEx_ActivateBCD>
  }
  USB_DevDisconnect (hpcd->Instance);  
 8000aa0:	6820      	ldr	r0, [r4, #0]
 8000aa2:	f002 fa99 	bl	8002fd8 <USB_DevDisconnect>
  return HAL_OK;
 8000aa6:	2000      	movs	r0, #0
}
 8000aa8:	b006      	add	sp, #24
 8000aaa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    hpcd->IN_ep[index].num = index;
 8000aae:	f803 2c20 	strb.w	r2, [r3, #-32]
    hpcd->IN_ep[index].tx_fifo_num = index;
 8000ab2:	f823 2c14 	strh.w	r2, [r3, #-20]
    hpcd->IN_ep[index].is_in = 1;
 8000ab6:	f803 6c1f 	strb.w	r6, [r3, #-31]
    hpcd->IN_ep[index].type = EP_TYPE_CTRL;
 8000aba:	f803 1c1d 	strb.w	r1, [r3, #-29]
    hpcd->IN_ep[index].maxpacket =  0;
 8000abe:	f843 1c10 	str.w	r1, [r3, #-16]
    hpcd->IN_ep[index].xfer_buff = 0;
 8000ac2:	f843 1c0c 	str.w	r1, [r3, #-12]
    hpcd->IN_ep[index].xfer_len = 0;
 8000ac6:	f843 1c08 	str.w	r1, [r3, #-8]
  for (index = 0; index < hpcd->Init.dev_endpoints ; index++)
 8000aca:	3201      	adds	r2, #1
 8000acc:	e7b2      	b.n	8000a34 <HAL_PCD_Init+0x62>
    return HAL_ERROR;
 8000ace:	2001      	movs	r0, #1
 8000ad0:	e7ea      	b.n	8000aa8 <HAL_PCD_Init+0xd6>

08000ad2 <HAL_PCD_Start>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{ 
  __HAL_LOCK(hpcd); 
 8000ad2:	f890 33ec 	ldrb.w	r3, [r0, #1004]	; 0x3ec
 8000ad6:	2b01      	cmp	r3, #1
{ 
 8000ad8:	b510      	push	{r4, lr}
 8000ada:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000adc:	d00c      	beq.n	8000af8 <HAL_PCD_Start+0x26>
 8000ade:	2301      	movs	r3, #1
 8000ae0:	f880 33ec 	strb.w	r3, [r0, #1004]	; 0x3ec
  USB_DevConnect (hpcd->Instance);
 8000ae4:	6800      	ldr	r0, [r0, #0]
 8000ae6:	f002 fa69 	bl	8002fbc <USB_DevConnect>
  __HAL_PCD_ENABLE(hpcd);
 8000aea:	6820      	ldr	r0, [r4, #0]
 8000aec:	f001 ff7d 	bl	80029ea <USB_EnableGlobalInt>
  __HAL_UNLOCK(hpcd); 
 8000af0:	2000      	movs	r0, #0
 8000af2:	f884 03ec 	strb.w	r0, [r4, #1004]	; 0x3ec
  return HAL_OK;
 8000af6:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000af8:	2002      	movs	r0, #2
}
 8000afa:	bd10      	pop	{r4, pc}

08000afc <HAL_PCD_SetAddress>:
  * @param  address: new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
  __HAL_LOCK(hpcd); 
 8000afc:	f890 23ec 	ldrb.w	r2, [r0, #1004]	; 0x3ec
 8000b00:	2a01      	cmp	r2, #1
{
 8000b02:	b510      	push	{r4, lr}
 8000b04:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd); 
 8000b06:	d00b      	beq.n	8000b20 <HAL_PCD_SetAddress+0x24>
 8000b08:	2201      	movs	r2, #1
 8000b0a:	f880 23ec 	strb.w	r2, [r0, #1004]	; 0x3ec
  hpcd->USB_Address = address;
 8000b0e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
  USB_SetDevAddress(hpcd->Instance, address);
 8000b12:	6800      	ldr	r0, [r0, #0]
 8000b14:	f002 fa4b 	bl	8002fae <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);   
 8000b18:	2000      	movs	r0, #0
 8000b1a:	f884 03ec 	strb.w	r0, [r4, #1004]	; 0x3ec
 8000b1e:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000b20:	2002      	movs	r0, #2
  return HAL_OK;
}
 8000b22:	bd10      	pop	{r4, pc}

08000b24 <HAL_PCD_EP_Open>:
  * @param  ep_mps: endpoint max packet size
  * @param  ep_type: endpoint type   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint16_t ep_mps, uint8_t ep_type)
{
 8000b24:	b570      	push	{r4, r5, r6, lr}
 8000b26:	4604      	mov	r4, r0
  HAL_StatusTypeDef  ret = HAL_OK;
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 8000b28:	b248      	sxtb	r0, r1
 8000b2a:	2800      	cmp	r0, #0
 8000b2c:	f001 067f 	and.w	r6, r1, #127	; 0x7f
 8000b30:	f04f 0520 	mov.w	r5, #32
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000b34:	bfb5      	itete	lt
 8000b36:	fb05 4106 	mlalt	r1, r5, r6, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000b3a:	fb05 4101 	mlage	r1, r5, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000b3e:	312c      	addlt	r1, #44	; 0x2c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000b40:	f501 7103 	addge.w	r1, r1, #524	; 0x20c
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000b44:	0fc0      	lsrs	r0, r0, #31
  ep->num   = ep_addr & 0x7F;
 8000b46:	700e      	strb	r6, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000b48:	7048      	strb	r0, [r1, #1]
  ep->maxpacket = ep_mps;
  ep->type = ep_type;
 8000b4a:	70cb      	strb	r3, [r1, #3]
    
  __HAL_LOCK(hpcd);
 8000b4c:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
  ep->maxpacket = ep_mps;
 8000b50:	610a      	str	r2, [r1, #16]
  __HAL_LOCK(hpcd);
 8000b52:	2b01      	cmp	r3, #1
 8000b54:	d009      	beq.n	8000b6a <HAL_PCD_EP_Open+0x46>
 8000b56:	2301      	movs	r3, #1
 8000b58:	f884 33ec 	strb.w	r3, [r4, #1004]	; 0x3ec
  USB_ActivateEndpoint(hpcd->Instance , ep);
 8000b5c:	6820      	ldr	r0, [r4, #0]
 8000b5e:	f001 ff6d 	bl	8002a3c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8000b62:	2000      	movs	r0, #0
 8000b64:	f884 03ec 	strb.w	r0, [r4, #1004]	; 0x3ec
  return ret;
 8000b68:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hpcd);
 8000b6a:	2002      	movs	r0, #2

}
 8000b6c:	bd70      	pop	{r4, r5, r6, pc}

08000b6e <HAL_PCD_EP_Close>:
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{  
  PCD_EPTypeDef *ep = NULL;
  
  if ((ep_addr & 0x80) == 0x80)
 8000b6e:	b24b      	sxtb	r3, r1
 8000b70:	2b00      	cmp	r3, #0
{  
 8000b72:	b510      	push	{r4, lr}
 8000b74:	f04f 0220 	mov.w	r2, #32
 8000b78:	4604      	mov	r4, r0
 8000b7a:	f001 007f 	and.w	r0, r1, #127	; 0x7f
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000b7e:	bfb5      	itete	lt
 8000b80:	fb02 4100 	mlalt	r1, r2, r0, r4
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000b84:	fb02 4101 	mlage	r1, r2, r1, r4
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000b88:	312c      	addlt	r1, #44	; 0x2c
    ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000b8a:	f501 7103 	addge.w	r1, r1, #524	; 0x20c
  }
  ep->num   = ep_addr & 0x7F;
  
  ep->is_in = (0x80 & ep_addr) != 0;
 8000b8e:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 8000b90:	7008      	strb	r0, [r1, #0]
  ep->is_in = (0x80 & ep_addr) != 0;
 8000b92:	704b      	strb	r3, [r1, #1]
  
  __HAL_LOCK(hpcd); 
 8000b94:	f894 33ec 	ldrb.w	r3, [r4, #1004]	; 0x3ec
 8000b98:	2b01      	cmp	r3, #1
 8000b9a:	d009      	beq.n	8000bb0 <HAL_PCD_EP_Close+0x42>
 8000b9c:	2301      	movs	r3, #1
 8000b9e:	f884 33ec 	strb.w	r3, [r4, #1004]	; 0x3ec
  USB_DeactivateEndpoint(hpcd->Instance , ep);
 8000ba2:	6820      	ldr	r0, [r4, #0]
 8000ba4:	f002 f8be 	bl	8002d24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);   
 8000ba8:	2000      	movs	r0, #0
 8000baa:	f884 03ec 	strb.w	r0, [r4, #1004]	; 0x3ec
  return HAL_OK;
 8000bae:	bd10      	pop	{r4, pc}
  __HAL_LOCK(hpcd); 
 8000bb0:	2002      	movs	r0, #2
}
 8000bb2:	bd10      	pop	{r4, pc}

08000bb4 <HAL_PCD_EP_Receive>:
  * @param  pBuf: pointer to the reception buffer   
  * @param  len: amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000bb4:	b570      	push	{r4, r5, r6, lr}
 8000bb6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000bba:	eb00 1641 	add.w	r6, r0, r1, lsl #5
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8000bbe:	2500      	movs	r5, #0
 8000bc0:	014c      	lsls	r4, r1, #5
  ep->is_in = 0;
  ep->num = ep_addr & 0x7F;
 8000bc2:	f886 120c 	strb.w	r1, [r6, #524]	; 0x20c
  ep->xfer_buff = pBuf;  
 8000bc6:	f8c6 2220 	str.w	r2, [r6, #544]	; 0x220
  ep->xfer_len = len;
 8000bca:	f8c6 3224 	str.w	r3, [r6, #548]	; 0x224
  ep->xfer_count = 0;
 8000bce:	f8c6 5228 	str.w	r5, [r6, #552]	; 0x228
  ep->is_in = 0;
 8000bd2:	f886 520d 	strb.w	r5, [r6, #525]	; 0x20d
  ep = &hpcd->OUT_ep[ep_addr & 0x7F];
 8000bd6:	f504 7103 	add.w	r1, r4, #524	; 0x20c
  {
    USB_EP0StartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep, hpcd->Init.dma_enable);
 8000bda:	7b02      	ldrb	r2, [r0, #12]
 8000bdc:	4401      	add	r1, r0
 8000bde:	6800      	ldr	r0, [r0, #0]
 8000be0:	f002 fa20 	bl	8003024 <USB_EPStartXfer>
  }

  return HAL_OK;
}
 8000be4:	4628      	mov	r0, r5
 8000be6:	bd70      	pop	{r4, r5, r6, pc}

08000be8 <HAL_PCD_EP_GetRxCount>:
  * @param  ep_addr: endpoint address
  * @retval Data Size
  */
uint16_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
  return hpcd->OUT_ep[ep_addr & 0x7F].xfer_count;
 8000be8:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000bec:	eb00 1141 	add.w	r1, r0, r1, lsl #5
}
 8000bf0:	f8b1 0228 	ldrh.w	r0, [r1, #552]	; 0x228
 8000bf4:	4770      	bx	lr

08000bf6 <HAL_PCD_EP_Transmit>:
  * @param  pBuf: pointer to the transmission buffer   
  * @param  len: amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8000bf6:	f001 017f 	and.w	r1, r1, #127	; 0x7f
 8000bfa:	b570      	push	{r4, r5, r6, lr}
  PCD_EPTypeDef *ep = NULL;
  
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
  
  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;  
 8000bfc:	eb00 1541 	add.w	r5, r0, r1, lsl #5
  ep->xfer_len = len;
  ep->xfer_count = 0;
 8000c00:	2600      	movs	r6, #0
  ep->xfer_len = len;
 8000c02:	646b      	str	r3, [r5, #68]	; 0x44
 8000c04:	014c      	lsls	r4, r1, #5
  ep->is_in = 1;
 8000c06:	2301      	movs	r3, #1
  ep->num = ep_addr & 0x7F;
 8000c08:	f885 102c 	strb.w	r1, [r5, #44]	; 0x2c
  ep->xfer_buff = pBuf;  
 8000c0c:	642a      	str	r2, [r5, #64]	; 0x40
  ep->xfer_count = 0;
 8000c0e:	64ae      	str	r6, [r5, #72]	; 0x48
  ep->is_in = 1;
 8000c10:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
  ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8000c14:	f104 012c 	add.w	r1, r4, #44	; 0x2c
  {
    USB_EP0StartXfer(hpcd->Instance,ep,  hpcd->Init.dma_enable);
  }
  else
  {
    USB_EPStartXfer(hpcd->Instance, ep,  hpcd->Init.dma_enable);
 8000c18:	7b02      	ldrb	r2, [r0, #12]
 8000c1a:	4401      	add	r1, r0
 8000c1c:	6800      	ldr	r0, [r0, #0]
 8000c1e:	f002 fa01 	bl	8003024 <USB_EPStartXfer>
  }
  
  return HAL_OK;
}
 8000c22:	4630      	mov	r0, r6
 8000c24:	bd70      	pop	{r4, r5, r6, pc}
	...

08000c28 <HAL_PCD_IRQHandler>:
{
 8000c28:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c2c:	4604      	mov	r4, r0
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_CTR))
 8000c2e:	6800      	ldr	r0, [r0, #0]
 8000c30:	f002 f9de 	bl	8002ff0 <USB_ReadInterrupts>
 8000c34:	0403      	lsls	r3, r0, #16
 8000c36:	f100 80e3 	bmi.w	8000e00 <HAL_PCD_IRQHandler+0x1d8>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_RESET))
 8000c3a:	6820      	ldr	r0, [r4, #0]
 8000c3c:	f002 f9d8 	bl	8002ff0 <USB_ReadInterrupts>
 8000c40:	0547      	lsls	r7, r0, #21
 8000c42:	d50f      	bpl.n	8000c64 <HAL_PCD_IRQHandler+0x3c>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c44:	6822      	ldr	r2, [r4, #0]
 8000c46:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c4a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8000c4e:	041b      	lsls	r3, r3, #16
 8000c50:	0c1b      	lsrs	r3, r3, #16
    HAL_PCD_ResetCallback(hpcd);
 8000c52:	4620      	mov	r0, r4
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 8000c54:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_ResetCallback(hpcd);
 8000c58:	f003 fa25 	bl	80040a6 <HAL_PCD_ResetCallback>
    HAL_PCD_SetAddress(hpcd, 0);
 8000c5c:	2100      	movs	r1, #0
 8000c5e:	4620      	mov	r0, r4
 8000c60:	f7ff ff4c 	bl	8000afc <HAL_PCD_SetAddress>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_PMAOVR))
 8000c64:	6820      	ldr	r0, [r4, #0]
 8000c66:	f002 f9c3 	bl	8002ff0 <USB_ReadInterrupts>
 8000c6a:	0443      	lsls	r3, r0, #17
 8000c6c:	d508      	bpl.n	8000c80 <HAL_PCD_IRQHandler+0x58>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);    
 8000c6e:	6822      	ldr	r2, [r4, #0]
 8000c70:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c74:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8000c78:	041b      	lsls	r3, r3, #16
 8000c7a:	0c1b      	lsrs	r3, r3, #16
 8000c7c:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ERR))
 8000c80:	6820      	ldr	r0, [r4, #0]
 8000c82:	f002 f9b5 	bl	8002ff0 <USB_ReadInterrupts>
 8000c86:	0487      	lsls	r7, r0, #18
 8000c88:	d508      	bpl.n	8000c9c <HAL_PCD_IRQHandler+0x74>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR); 
 8000c8a:	6822      	ldr	r2, [r4, #0]
 8000c8c:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000c90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000c94:	041b      	lsls	r3, r3, #16
 8000c96:	0c1b      	lsrs	r3, r3, #16
 8000c98:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP))
 8000c9c:	6820      	ldr	r0, [r4, #0]
 8000c9e:	f002 f9a7 	bl	8002ff0 <USB_ReadInterrupts>
 8000ca2:	04c6      	lsls	r6, r0, #19
 8000ca4:	d538      	bpl.n	8000d18 <HAL_PCD_IRQHandler+0xf0>
    hpcd->Instance->CNTR &= ~(USB_CNTR_LPMODE);
 8000ca6:	6823      	ldr	r3, [r4, #0]
 8000ca8:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000cac:	f022 0204 	bic.w	r2, r2, #4
 8000cb0:	0412      	lsls	r2, r2, #16
 8000cb2:	0c12      	lsrs	r2, r2, #16
 8000cb4:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    hpcd->Instance->CNTR = wInterrupt_Mask;
 8000cb8:	f44f 423f 	mov.w	r2, #48896	; 0xbf00
 8000cbc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    if (hpcd->Init.lpm_enable ==1)
 8000cc0:	6a22      	ldr	r2, [r4, #32]
 8000cc2:	2a01      	cmp	r2, #1
 8000cc4:	d112      	bne.n	8000cec <HAL_PCD_IRQHandler+0xc4>
      hpcd->lpm_active = ENABLE;
 8000cc6:	f8c4 2428 	str.w	r2, [r4, #1064]	; 0x428
      hpcd->LPM_State = LPM_L0;
 8000cca:	2200      	movs	r2, #0
 8000ccc:	f884 2420 	strb.w	r2, [r4, #1056]	; 0x420
      USBx->LPMCSR |= (USB_LPMCSR_LMPEN);
 8000cd0:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000cd4:	b292      	uxth	r2, r2
 8000cd6:	f042 0201 	orr.w	r2, r2, #1
 8000cda:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
      USBx->LPMCSR |= (USB_LPMCSR_LPMACK);
 8000cde:	f8b3 2054 	ldrh.w	r2, [r3, #84]	; 0x54
 8000ce2:	b292      	uxth	r2, r2
 8000ce4:	f042 0202 	orr.w	r2, r2, #2
 8000ce8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    if(hpcd->LPM_State == LPM_L1)
 8000cec:	f894 3420 	ldrb.w	r3, [r4, #1056]	; 0x420
 8000cf0:	2b01      	cmp	r3, #1
 8000cf2:	d105      	bne.n	8000d00 <HAL_PCD_IRQHandler+0xd8>
      hpcd->LPM_State = LPM_L0;
 8000cf4:	2100      	movs	r1, #0
 8000cf6:	f884 1420 	strb.w	r1, [r4, #1056]	; 0x420
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8000cfa:	4620      	mov	r0, r4
 8000cfc:	f003 faca 	bl	8004294 <HAL_PCDEx_LPM_Callback>
    HAL_PCD_ResumeCallback(hpcd);
 8000d00:	4620      	mov	r0, r4
 8000d02:	f003 f9ed 	bl	80040e0 <HAL_PCD_ResumeCallback>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);     
 8000d06:	6822      	ldr	r2, [r4, #0]
 8000d08:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000d0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000d10:	041b      	lsls	r3, r3, #16
 8000d12:	0c1b      	lsrs	r3, r3, #16
 8000d14:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SUSP))
 8000d18:	6820      	ldr	r0, [r4, #0]
 8000d1a:	f002 f969 	bl	8002ff0 <USB_ReadInterrupts>
 8000d1e:	0505      	lsls	r5, r0, #20
 8000d20:	d51d      	bpl.n	8000d5e <HAL_PCD_IRQHandler+0x136>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);  
 8000d22:	6820      	ldr	r0, [r4, #0]
 8000d24:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000d28:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8000d2c:	041b      	lsls	r3, r3, #16
 8000d2e:	0c1b      	lsrs	r3, r3, #16
 8000d30:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000d34:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000d38:	b29b      	uxth	r3, r3
 8000d3a:	f043 0308 	orr.w	r3, r3, #8
 8000d3e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000d42:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8000d46:	b29b      	uxth	r3, r3
 8000d48:	f043 0304 	orr.w	r3, r3, #4
 8000d4c:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
    if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_WKUP) == 0)
 8000d50:	f002 f94e 	bl	8002ff0 <USB_ReadInterrupts>
 8000d54:	04c0      	lsls	r0, r0, #19
 8000d56:	d402      	bmi.n	8000d5e <HAL_PCD_IRQHandler+0x136>
      HAL_PCD_SuspendCallback(hpcd);
 8000d58:	4620      	mov	r0, r4
 8000d5a:	f003 f9b1 	bl	80040c0 <HAL_PCD_SuspendCallback>
  if(__HAL_PCD_GET_FLAG(hpcd, USB_ISTR_L1REQ))
 8000d5e:	6820      	ldr	r0, [r4, #0]
 8000d60:	f002 f946 	bl	8002ff0 <USB_ReadInterrupts>
 8000d64:	0601      	lsls	r1, r0, #24
 8000d66:	d529      	bpl.n	8000dbc <HAL_PCD_IRQHandler+0x194>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);      
 8000d68:	6823      	ldr	r3, [r4, #0]
 8000d6a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
 8000d6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000d72:	0412      	lsls	r2, r2, #16
 8000d74:	0c12      	lsrs	r2, r2, #16
 8000d76:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
    if( hpcd->LPM_State == LPM_L0)
 8000d7a:	f894 2420 	ldrb.w	r2, [r4, #1056]	; 0x420
 8000d7e:	2a00      	cmp	r2, #0
 8000d80:	f040 8206 	bne.w	8001190 <HAL_PCD_IRQHandler+0x568>
      hpcd->Instance->CNTR |= USB_CNTR_LPMODE;
 8000d84:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000d88:	b292      	uxth	r2, r2
 8000d8a:	f042 0204 	orr.w	r2, r2, #4
 8000d8e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->Instance->CNTR |= USB_CNTR_FSUSP;
 8000d92:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8000d96:	b292      	uxth	r2, r2
 8000d98:	f042 0208 	orr.w	r2, r2, #8
 8000d9c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
      hpcd->BESL = (hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >>2 ;  
 8000da0:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8000da4:	f3c3 038d 	ubfx	r3, r3, #2, #14
      hpcd->LPM_State = LPM_L1;
 8000da8:	2101      	movs	r1, #1
      hpcd->BESL = (hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >>2 ;  
 8000daa:	f003 033c 	and.w	r3, r3, #60	; 0x3c
      hpcd->LPM_State = LPM_L1;
 8000dae:	f884 1420 	strb.w	r1, [r4, #1056]	; 0x420
      hpcd->BESL = (hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >>2 ;  
 8000db2:	f8c4 3424 	str.w	r3, [r4, #1060]	; 0x424
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 8000db6:	4620      	mov	r0, r4
 8000db8:	f003 fa6c 	bl	8004294 <HAL_PCDEx_LPM_Callback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_SOF))
 8000dbc:	6820      	ldr	r0, [r4, #0]
 8000dbe:	f002 f917 	bl	8002ff0 <USB_ReadInterrupts>
 8000dc2:	0582      	lsls	r2, r0, #22
 8000dc4:	d50b      	bpl.n	8000dde <HAL_PCD_IRQHandler+0x1b6>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF); 
 8000dc6:	6822      	ldr	r2, [r4, #0]
 8000dc8:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000dcc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8000dd0:	041b      	lsls	r3, r3, #16
 8000dd2:	0c1b      	lsrs	r3, r3, #16
 8000dd4:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
    HAL_PCD_SOFCallback(hpcd);
 8000dd8:	4620      	mov	r0, r4
 8000dda:	f003 f960 	bl	800409e <HAL_PCD_SOFCallback>
  if (__HAL_PCD_GET_FLAG (hpcd, USB_ISTR_ESOF))
 8000dde:	6820      	ldr	r0, [r4, #0]
 8000de0:	f002 f906 	bl	8002ff0 <USB_ReadInterrupts>
 8000de4:	05c3      	lsls	r3, r0, #23
 8000de6:	d508      	bpl.n	8000dfa <HAL_PCD_IRQHandler+0x1d2>
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF); 
 8000de8:	6822      	ldr	r2, [r4, #0]
 8000dea:	f8b2 3044 	ldrh.w	r3, [r2, #68]	; 0x44
 8000dee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8000df2:	041b      	lsls	r3, r3, #16
 8000df4:	0c1b      	lsrs	r3, r3, #16
 8000df6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
}
 8000dfa:	b003      	add	sp, #12
 8000dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
  PCD_EPTypeDef *ep = NULL;
  uint16_t count = 0;
  uint8_t epindex = 0;
  __IO uint16_t wIstr = 0;  
 8000e00:	2300      	movs	r3, #0
      if ((wEPVal & USB_EP_CTR_TX) != 0)
      {
        ep = &hpcd->IN_ep[epindex];
        
        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 8000e02:	f8df 9394 	ldr.w	r9, [pc, #916]	; 8001198 <HAL_PCD_IRQHandler+0x570>
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000e06:	f8df a394 	ldr.w	sl, [pc, #916]	; 800119c <HAL_PCD_IRQHandler+0x574>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000e0a:	f8df b394 	ldr.w	fp, [pc, #916]	; 80011a0 <HAL_PCD_IRQHandler+0x578>
  __IO uint16_t wIstr = 0;  
 8000e0e:	f8ad 3004 	strh.w	r3, [sp, #4]
  __IO uint16_t wEPVal = 0;
 8000e12:	f8ad 3006 	strh.w	r3, [sp, #6]
  while (((wIstr = hpcd->Instance->ISTR) & USB_ISTR_CTR) != 0)
 8000e16:	6820      	ldr	r0, [r4, #0]
 8000e18:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
 8000e1c:	b29b      	uxth	r3, r3
 8000e1e:	041a      	lsls	r2, r3, #16
 8000e20:	f8ad 3004 	strh.w	r3, [sp, #4]
 8000e24:	f57f af09 	bpl.w	8000c3a <HAL_PCD_IRQHandler+0x12>
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 8000e28:	f8bd 5004 	ldrh.w	r5, [sp, #4]
    if (epindex == 0)
 8000e2c:	f015 050f 	ands.w	r5, r5, #15
 8000e30:	f040 80a5 	bne.w	8000f7e <HAL_PCD_IRQHandler+0x356>
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000e34:	f8bd 1004 	ldrh.w	r1, [sp, #4]
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e38:	8803      	ldrh	r3, [r0, #0]
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000e3a:	f011 0110 	ands.w	r1, r1, #16
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e3e:	b29b      	uxth	r3, r3
      if ((wIstr & USB_ISTR_DIR) == 0)
 8000e40:	d126      	bne.n	8000e90 <HAL_PCD_IRQHandler+0x268>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000e42:	ea03 0309 	and.w	r3, r3, r9
 8000e46:	8003      	strh	r3, [r0, #0]
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000e48:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000e4c:	f894 202c 	ldrb.w	r2, [r4, #44]	; 0x2c
 8000e50:	b29b      	uxth	r3, r3
 8000e52:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000e56:	4418      	add	r0, r3
        ep->xfer_buff += ep->xfer_count;
 8000e58:	6c22      	ldr	r2, [r4, #64]	; 0x40
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8000e5a:	f8b0 3402 	ldrh.w	r3, [r0, #1026]	; 0x402
 8000e5e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000e62:	64a3      	str	r3, [r4, #72]	; 0x48
        ep->xfer_buff += ep->xfer_count;
 8000e64:	4413      	add	r3, r2
 8000e66:	6423      	str	r3, [r4, #64]	; 0x40
        HAL_PCD_DataInStageCallback(hpcd, 0);
 8000e68:	4620      	mov	r0, r4
 8000e6a:	f003 f911 	bl	8004090 <HAL_PCD_DataInStageCallback>
        if((hpcd->USB_Address > 0)&& ( ep->xfer_len == 0))
 8000e6e:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	d0cf      	beq.n	8000e16 <HAL_PCD_IRQHandler+0x1ee>
 8000e76:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000e78:	2a00      	cmp	r2, #0
 8000e7a:	d1cc      	bne.n	8000e16 <HAL_PCD_IRQHandler+0x1ee>
          hpcd->Instance->DADDR = (hpcd->USB_Address | USB_DADDR_EF);
 8000e7c:	f894 3028 	ldrb.w	r3, [r4, #40]	; 0x28
 8000e80:	6821      	ldr	r1, [r4, #0]
 8000e82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e86:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
          hpcd->USB_Address = 0;
 8000e8a:	f884 2028 	strb.w	r2, [r4, #40]	; 0x28
 8000e8e:	e7c2      	b.n	8000e16 <HAL_PCD_IRQHandler+0x1ee>
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 8000e90:	f8ad 3006 	strh.w	r3, [sp, #6]
        if ((wEPVal & USB_EP_SETUP) != 0)
 8000e94:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000e98:	051e      	lsls	r6, r3, #20
 8000e9a:	d51e      	bpl.n	8000eda <HAL_PCD_IRQHandler+0x2b2>
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000e9c:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ea0:	f894 220c 	ldrb.w	r2, [r4, #524]	; 0x20c
 8000ea4:	b29b      	uxth	r3, r3
 8000ea6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000eaa:	4403      	add	r3, r0
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000eac:	f8b4 2210 	ldrh.w	r2, [r4, #528]	; 0x210
 8000eb0:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000eb4:	f3c3 0309 	ubfx	r3, r3, #0, #10
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000eb8:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
          USB_ReadPMA(hpcd->Instance, (uint8_t*)hpcd->Setup ,ep->pmaadress , ep->xfer_count);       
 8000ebc:	f504 717c 	add.w	r1, r4, #1008	; 0x3f0
 8000ec0:	f002 f954 	bl	800316c <USB_ReadPMA>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0); 
 8000ec4:	6822      	ldr	r2, [r4, #0]
 8000ec6:	8813      	ldrh	r3, [r2, #0]
 8000ec8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ecc:	051b      	lsls	r3, r3, #20
 8000ece:	0d1b      	lsrs	r3, r3, #20
 8000ed0:	8013      	strh	r3, [r2, #0]
          HAL_PCD_SetupStageCallback(hpcd);
 8000ed2:	4620      	mov	r0, r4
 8000ed4:	f003 f8ce 	bl	8004074 <HAL_PCD_SetupStageCallback>
 8000ed8:	e79d      	b.n	8000e16 <HAL_PCD_IRQHandler+0x1ee>
        else if ((wEPVal & USB_EP_CTR_RX) != 0)
 8000eda:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000ede:	041d      	lsls	r5, r3, #16
 8000ee0:	d599      	bpl.n	8000e16 <HAL_PCD_IRQHandler+0x1ee>
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8000ee2:	8803      	ldrh	r3, [r0, #0]
 8000ee4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000ee8:	051b      	lsls	r3, r3, #20
 8000eea:	0d1b      	lsrs	r3, r3, #20
 8000eec:	8003      	strh	r3, [r0, #0]
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000eee:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000ef2:	f894 220c 	ldrb.w	r2, [r4, #524]	; 0x20c
 8000ef6:	b29b      	uxth	r3, r3
 8000ef8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000efc:	4403      	add	r3, r0
 8000efe:	f8b3 3406 	ldrh.w	r3, [r3, #1030]	; 0x406
 8000f02:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000f06:	f8c4 3228 	str.w	r3, [r4, #552]	; 0x228
          if (ep->xfer_count != 0)
 8000f0a:	b163      	cbz	r3, 8000f26 <HAL_PCD_IRQHandler+0x2fe>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 8000f0c:	f8b4 2210 	ldrh.w	r2, [r4, #528]	; 0x210
 8000f10:	f8d4 1220 	ldr.w	r1, [r4, #544]	; 0x220
 8000f14:	f002 f92a 	bl	800316c <USB_ReadPMA>
            ep->xfer_buff+=ep->xfer_count;
 8000f18:	f8d4 3220 	ldr.w	r3, [r4, #544]	; 0x220
 8000f1c:	f8d4 2228 	ldr.w	r2, [r4, #552]	; 0x228
 8000f20:	4413      	add	r3, r2
 8000f22:	f8c4 3220 	str.w	r3, [r4, #544]	; 0x220
           HAL_PCD_DataOutStageCallback(hpcd, 0);
 8000f26:	2100      	movs	r1, #0
 8000f28:	4620      	mov	r0, r4
 8000f2a:	f003 f8a9 	bl	8004080 <HAL_PCD_DataOutStageCallback>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000f2e:	6822      	ldr	r2, [r4, #0]
 8000f30:	f8d4 121c 	ldr.w	r1, [r4, #540]	; 0x21c
 8000f34:	f8b2 0050 	ldrh.w	r0, [r2, #80]	; 0x50
 8000f38:	293e      	cmp	r1, #62	; 0x3e
 8000f3a:	b280      	uxth	r0, r0
 8000f3c:	f202 4506 	addw	r5, r2, #1030	; 0x406
 8000f40:	d915      	bls.n	8000f6e <HAL_PCD_IRQHandler+0x346>
 8000f42:	f3c1 134f 	ubfx	r3, r1, #5, #16
 8000f46:	06c9      	lsls	r1, r1, #27
 8000f48:	bf04      	itt	eq
 8000f4a:	f103 33ff 	addeq.w	r3, r3, #4294967295
 8000f4e:	b29b      	uxtheq	r3, r3
 8000f50:	ea4b 2383 	orr.w	r3, fp, r3, lsl #10
 8000f54:	522b      	strh	r3, [r5, r0]
          PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 8000f56:	8813      	ldrh	r3, [r2, #0]
 8000f58:	b29b      	uxth	r3, r3
 8000f5a:	ea03 030a 	and.w	r3, r3, sl
 8000f5e:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8000f62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000f66:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f6a:	8013      	strh	r3, [r2, #0]
 8000f6c:	e753      	b.n	8000e16 <HAL_PCD_IRQHandler+0x1ee>
          PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8000f6e:	f3c1 034f 	ubfx	r3, r1, #1, #16
 8000f72:	07cf      	lsls	r7, r1, #31
 8000f74:	bf44      	itt	mi
 8000f76:	3301      	addmi	r3, #1
 8000f78:	b29b      	uxthmi	r3, r3
 8000f7a:	029b      	lsls	r3, r3, #10
 8000f7c:	e7ea      	b.n	8000f54 <HAL_PCD_IRQHandler+0x32c>
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 8000f7e:	b22f      	sxth	r7, r5
 8000f80:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8000f84:	b29b      	uxth	r3, r3
 8000f86:	f8ad 3006 	strh.w	r3, [sp, #6]
      if ((wEPVal & USB_EP_CTR_RX) != 0)
 8000f8a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8000f8e:	041e      	lsls	r6, r3, #16
 8000f90:	d53f      	bpl.n	8001012 <HAL_PCD_IRQHandler+0x3ea>
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000f92:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8000f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8000f9a:	051b      	lsls	r3, r3, #20
 8000f9c:	0d1b      	lsrs	r3, r3, #20
        if (ep->doublebuffer == 0)
 8000f9e:	ea4f 1845 	mov.w	r8, r5, lsl #5
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8000fa2:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0)
 8000fa6:	eb04 0108 	add.w	r1, r4, r8
 8000faa:	f891 3216 	ldrb.w	r3, [r1, #534]	; 0x216
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d174      	bne.n	800109c <HAL_PCD_IRQHandler+0x474>
          count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8000fb2:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8000fb6:	f891 220c 	ldrb.w	r2, [r1, #524]	; 0x20c
 8000fba:	b29b      	uxth	r3, r3
 8000fbc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8000fc0:	4403      	add	r3, r0
 8000fc2:	f8b3 6406 	ldrh.w	r6, [r3, #1030]	; 0x406
 8000fc6:	f3c6 0609 	ubfx	r6, r6, #0, #10
          if (count != 0)
 8000fca:	b136      	cbz	r6, 8000fda <HAL_PCD_IRQHandler+0x3b2>
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 8000fcc:	f8b1 2210 	ldrh.w	r2, [r1, #528]	; 0x210
 8000fd0:	f8d1 1220 	ldr.w	r1, [r1, #544]	; 0x220
 8000fd4:	4633      	mov	r3, r6
 8000fd6:	f002 f8c9 	bl	800316c <USB_ReadPMA>
 8000fda:	eb04 1347 	add.w	r3, r4, r7, lsl #5
        ep->xfer_buff+=count;
 8000fde:	eb04 0108 	add.w	r1, r4, r8
        ep->xfer_count+=count;
 8000fe2:	f8d3 2228 	ldr.w	r2, [r3, #552]	; 0x228
 8000fe6:	4432      	add	r2, r6
 8000fe8:	f8c3 2228 	str.w	r2, [r3, #552]	; 0x228
        ep->xfer_buff+=count;
 8000fec:	f8d1 2220 	ldr.w	r2, [r1, #544]	; 0x220
 8000ff0:	4432      	add	r2, r6
 8000ff2:	f8c1 2220 	str.w	r2, [r1, #544]	; 0x220
        if ((ep->xfer_len == 0) || (count < ep->maxpacket))
 8000ff6:	f8d3 3224 	ldr.w	r3, [r3, #548]	; 0x224
 8000ffa:	b123      	cbz	r3, 8001006 <HAL_PCD_IRQHandler+0x3de>
 8000ffc:	f8d1 021c 	ldr.w	r0, [r1, #540]	; 0x21c
 8001000:	4286      	cmp	r6, r0
 8001002:	f080 8083 	bcs.w	800110c <HAL_PCD_IRQHandler+0x4e4>
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8001006:	44a0      	add	r8, r4
 8001008:	4620      	mov	r0, r4
 800100a:	f898 120c 	ldrb.w	r1, [r8, #524]	; 0x20c
 800100e:	f003 f837 	bl	8004080 <HAL_PCD_DataOutStageCallback>
      if ((wEPVal & USB_EP_CTR_TX) != 0)
 8001012:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8001016:	0619      	lsls	r1, r3, #24
 8001018:	f57f aefd 	bpl.w	8000e16 <HAL_PCD_IRQHandler+0x1ee>
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800101c:	6820      	ldr	r0, [r4, #0]
 800101e:	f830 3027 	ldrh.w	r3, [r0, r7, lsl #2]
 8001022:	b29b      	uxth	r3, r3
 8001024:	ea03 0309 	and.w	r3, r3, r9
        
        /* IN double Buffering*/
        if (ep->doublebuffer == 0)
 8001028:	016e      	lsls	r6, r5, #5
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 800102a:	f820 3027 	strh.w	r3, [r0, r7, lsl #2]
        if (ep->doublebuffer == 0)
 800102e:	19a1      	adds	r1, r4, r6
 8001030:	3502      	adds	r5, #2
 8001032:	f891 3036 	ldrb.w	r3, [r1, #54]	; 0x36
 8001036:	2b00      	cmp	r3, #0
 8001038:	d16e      	bne.n	8001118 <HAL_PCD_IRQHandler+0x4f0>
        {
          ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 800103a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800103e:	f891 202c 	ldrb.w	r2, [r1, #44]	; 0x2c
 8001042:	b29b      	uxth	r3, r3
 8001044:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8001048:	4403      	add	r3, r0
 800104a:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800104e:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001052:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001056:	60ab      	str	r3, [r5, #8]
          if (ep->xfer_count != 0)
 8001058:	b11b      	cbz	r3, 8001062 <HAL_PCD_IRQHandler+0x43a>
          {
            USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, ep->xfer_count);
 800105a:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
 800105c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800105e:	f001 ffcd 	bl	8002ffc <USB_WritePMA>
            }
          }
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
        }
        /*multi-packet on the NON control IN endpoint*/
        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8001062:	6822      	ldr	r2, [r4, #0]
 8001064:	4426      	add	r6, r4
 8001066:	f8b2 3050 	ldrh.w	r3, [r2, #80]	; 0x50
 800106a:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
 800106e:	b29b      	uxth	r3, r3
 8001070:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
 8001074:	4413      	add	r3, r2
 8001076:	eb04 1747 	add.w	r7, r4, r7, lsl #5
 800107a:	f8b3 2402 	ldrh.w	r2, [r3, #1026]	; 0x402
 800107e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001082:	64ba      	str	r2, [r7, #72]	; 0x48
        ep->xfer_buff+=ep->xfer_count;
 8001084:	6c33      	ldr	r3, [r6, #64]	; 0x40
 8001086:	f896 102c 	ldrb.w	r1, [r6, #44]	; 0x2c
 800108a:	441a      	add	r2, r3
 800108c:	6432      	str	r2, [r6, #64]	; 0x40
       
        /* Zero Length Packet? */
        if (ep->xfer_len == 0)
 800108e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
        {
          /* TX COMPLETE */
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001090:	4620      	mov	r0, r4
        if (ep->xfer_len == 0)
 8001092:	2b00      	cmp	r3, #0
 8001094:	d179      	bne.n	800118a <HAL_PCD_IRQHandler+0x562>
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8001096:	f002 fffb 	bl	8004090 <HAL_PCD_DataInStageCallback>
 800109a:	e6bc      	b.n	8000e16 <HAL_PCD_IRQHandler+0x1ee>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 800109c:	f891 620c 	ldrb.w	r6, [r1, #524]	; 0x20c
 80010a0:	b233      	sxth	r3, r6
 80010a2:	2208      	movs	r2, #8
 80010a4:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 80010a8:	f413 4f80 	tst.w	r3, #16384	; 0x4000
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80010ac:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 80010b0:	b29b      	uxth	r3, r3
 80010b2:	fb12 3306 	smlabb	r3, r2, r6, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX)
 80010b6:	d01e      	beq.n	80010f6 <HAL_PCD_IRQHandler+0x4ce>
            count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 80010b8:	4403      	add	r3, r0
 80010ba:	f8b3 6402 	ldrh.w	r6, [r3, #1026]	; 0x402
 80010be:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 80010c2:	b136      	cbz	r6, 80010d2 <HAL_PCD_IRQHandler+0x4aa>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 80010c4:	f8b1 2212 	ldrh.w	r2, [r1, #530]	; 0x212
 80010c8:	4633      	mov	r3, r6
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80010ca:	f8d1 1220 	ldr.w	r1, [r1, #544]	; 0x220
 80010ce:	f002 f84d 	bl	800316c <USB_ReadPMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_OUT);  
 80010d2:	eb04 0308 	add.w	r3, r4, r8
 80010d6:	6822      	ldr	r2, [r4, #0]
 80010d8:	f893 120c 	ldrb.w	r1, [r3, #524]	; 0x20c
 80010dc:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 80010e0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80010e4:	051b      	lsls	r3, r3, #20
 80010e6:	0d1b      	lsrs	r3, r3, #20
 80010e8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010ec:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 80010f0:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 80010f4:	e771      	b.n	8000fda <HAL_PCD_IRQHandler+0x3b2>
            count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80010f6:	18c2      	adds	r2, r0, r3
 80010f8:	f8b2 6406 	ldrh.w	r6, [r2, #1030]	; 0x406
 80010fc:	f3c6 0609 	ubfx	r6, r6, #0, #10
            if (count != 0)
 8001100:	2e00      	cmp	r6, #0
 8001102:	d0e6      	beq.n	80010d2 <HAL_PCD_IRQHandler+0x4aa>
              USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8001104:	4633      	mov	r3, r6
 8001106:	f8b1 2214 	ldrh.w	r2, [r1, #532]	; 0x214
 800110a:	e7de      	b.n	80010ca <HAL_PCD_IRQHandler+0x4a2>
          HAL_PCD_EP_Receive(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800110c:	f891 120c 	ldrb.w	r1, [r1, #524]	; 0x20c
 8001110:	4620      	mov	r0, r4
 8001112:	f7ff fd4f 	bl	8000bb4 <HAL_PCD_EP_Receive>
 8001116:	e77c      	b.n	8001012 <HAL_PCD_IRQHandler+0x3ea>
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001118:	f891 e02c 	ldrb.w	lr, [r1, #44]	; 0x2c
 800111c:	fa0f f38e 	sxth.w	r3, lr
 8001120:	2208      	movs	r2, #8
 8001122:	f830 3023 	ldrh.w	r3, [r0, r3, lsl #2]
 8001126:	f013 0f40 	tst.w	r3, #64	; 0x40
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 800112a:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 800112e:	b29b      	uxth	r3, r3
 8001130:	fb12 330e 	smlabb	r3, r2, lr, r3
          if (PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_TX)
 8001134:	d01d      	beq.n	8001172 <HAL_PCD_IRQHandler+0x54a>
            ep->xfer_count = PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8001136:	4403      	add	r3, r0
 8001138:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 800113c:	f8b3 3402 	ldrh.w	r3, [r3, #1026]	; 0x402
 8001140:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001144:	60ab      	str	r3, [r5, #8]
            if (ep->xfer_count != 0)
 8001146:	b11b      	cbz	r3, 8001150 <HAL_PCD_IRQHandler+0x528>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, ep->xfer_count);
 8001148:	8e4a      	ldrh	r2, [r1, #50]	; 0x32
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 800114a:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800114c:	f001 ff56 	bl	8002ffc <USB_WritePMA>
          PCD_FreeUserBuffer(hpcd->Instance, ep->num, PCD_EP_DBUF_IN);  
 8001150:	19a3      	adds	r3, r4, r6
 8001152:	6822      	ldr	r2, [r4, #0]
 8001154:	f893 102c 	ldrb.w	r1, [r3, #44]	; 0x2c
 8001158:	f832 3021 	ldrh.w	r3, [r2, r1, lsl #2]
 800115c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001160:	051b      	lsls	r3, r3, #20
 8001162:	0d1b      	lsrs	r3, r3, #20
 8001164:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001168:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800116c:	f822 3021 	strh.w	r3, [r2, r1, lsl #2]
 8001170:	e777      	b.n	8001062 <HAL_PCD_IRQHandler+0x43a>
            ep->xfer_count = PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8001172:	18c2      	adds	r2, r0, r3
 8001174:	eb04 1545 	add.w	r5, r4, r5, lsl #5
 8001178:	f8b2 3406 	ldrh.w	r3, [r2, #1030]	; 0x406
 800117c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001180:	60ab      	str	r3, [r5, #8]
            if (ep->xfer_count != 0)
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0e4      	beq.n	8001150 <HAL_PCD_IRQHandler+0x528>
              USB_WritePMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, ep->xfer_count);
 8001186:	8e8a      	ldrh	r2, [r1, #52]	; 0x34
 8001188:	e7df      	b.n	800114a <HAL_PCD_IRQHandler+0x522>
        }
        else
        {
          HAL_PCD_EP_Transmit(hpcd, ep->num, ep->xfer_buff, ep->xfer_len);
 800118a:	f7ff fd34 	bl	8000bf6 <HAL_PCD_EP_Transmit>
 800118e:	e642      	b.n	8000e16 <HAL_PCD_IRQHandler+0x1ee>
      HAL_PCD_SuspendCallback(hpcd);
 8001190:	4620      	mov	r0, r4
 8001192:	f002 ff95 	bl	80040c0 <HAL_PCD_SuspendCallback>
 8001196:	e611      	b.n	8000dbc <HAL_PCD_IRQHandler+0x194>
 8001198:	ffff8f0f 	.word	0xffff8f0f
 800119c:	ffffbf8f 	.word	0xffffbf8f
 80011a0:	ffff8000 	.word	0xffff8000

080011a4 <HAL_PCD_EP_SetStall>:
{
 80011a4:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80011a6:	b24b      	sxtb	r3, r1
 80011a8:	2b00      	cmp	r3, #0
 80011aa:	f001 057f 	and.w	r5, r1, #127	; 0x7f
 80011ae:	f04f 0220 	mov.w	r2, #32
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80011b2:	bfb5      	itete	lt
 80011b4:	fb02 0105 	mlalt	r1, r2, r5, r0
    ep = &hpcd->OUT_ep[ep_addr];
 80011b8:	fb02 0101 	mlage	r1, r2, r1, r0
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 80011bc:	312c      	addlt	r1, #44	; 0x2c
    ep = &hpcd->OUT_ep[ep_addr];
 80011be:	f501 7103 	addge.w	r1, r1, #524	; 0x20c
  ep->is_stall = 1;
 80011c2:	2201      	movs	r2, #1
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80011c4:	0fdb      	lsrs	r3, r3, #31
  ep->num   = ep_addr & 0x7F;
 80011c6:	b2ed      	uxtb	r5, r5
  ep->is_stall = 1;
 80011c8:	708a      	strb	r2, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 80011ca:	700d      	strb	r5, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 80011cc:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd);
 80011ce:	f890 33ec 	ldrb.w	r3, [r0, #1004]	; 0x3ec
 80011d2:	4293      	cmp	r3, r2
{
 80011d4:	4604      	mov	r4, r0
  __HAL_LOCK(hpcd);
 80011d6:	d00f      	beq.n	80011f8 <HAL_PCD_EP_SetStall+0x54>
 80011d8:	f880 23ec 	strb.w	r2, [r0, #1004]	; 0x3ec
  USB_EPSetStall(hpcd->Instance , ep);
 80011dc:	6800      	ldr	r0, [r0, #0]
 80011de:	f001 fe70 	bl	8002ec2 <USB_EPSetStall>
  if((ep_addr & 0x7F) == 0)
 80011e2:	b92d      	cbnz	r5, 80011f0 <HAL_PCD_EP_SetStall+0x4c>
    USB_EP0_OutStart(hpcd->Instance,  hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80011e4:	f504 727c 	add.w	r2, r4, #1008	; 0x3f0
 80011e8:	7b21      	ldrb	r1, [r4, #12]
 80011ea:	6820      	ldr	r0, [r4, #0]
 80011ec:	f001 ff04 	bl	8002ff8 <USB_EP0_OutStart>
  __HAL_UNLOCK(hpcd); 
 80011f0:	2000      	movs	r0, #0
 80011f2:	f884 03ec 	strb.w	r0, [r4, #1004]	; 0x3ec
  return HAL_OK;
 80011f6:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd);
 80011f8:	2002      	movs	r0, #2
}
 80011fa:	bd38      	pop	{r3, r4, r5, pc}

080011fc <HAL_PCD_EP_ClrStall>:
{
 80011fc:	b538      	push	{r3, r4, r5, lr}
  if ((0x80 & ep_addr) == 0x80)
 80011fe:	b24b      	sxtb	r3, r1
 8001200:	2b00      	cmp	r3, #0
{
 8001202:	4605      	mov	r5, r0
 8001204:	f04f 0220 	mov.w	r2, #32
 8001208:	f001 007f 	and.w	r0, r1, #127	; 0x7f
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800120c:	bfb5      	itete	lt
 800120e:	fb02 5100 	mlalt	r1, r2, r0, r5
    ep = &hpcd->OUT_ep[ep_addr];
 8001212:	fb02 5101 	mlage	r1, r2, r1, r5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001216:	312c      	addlt	r1, #44	; 0x2c
    ep = &hpcd->OUT_ep[ep_addr];
 8001218:	f501 7103 	addge.w	r1, r1, #524	; 0x20c
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 800121c:	0fdb      	lsrs	r3, r3, #31
  ep->is_stall = 0;
 800121e:	2400      	movs	r4, #0
 8001220:	708c      	strb	r4, [r1, #2]
  ep->num   = ep_addr & 0x7F;
 8001222:	7008      	strb	r0, [r1, #0]
  ep->is_in = ((ep_addr & 0x80) == 0x80);
 8001224:	704b      	strb	r3, [r1, #1]
  __HAL_LOCK(hpcd); 
 8001226:	f895 33ec 	ldrb.w	r3, [r5, #1004]	; 0x3ec
 800122a:	2b01      	cmp	r3, #1
 800122c:	d009      	beq.n	8001242 <HAL_PCD_EP_ClrStall+0x46>
 800122e:	2301      	movs	r3, #1
 8001230:	f885 33ec 	strb.w	r3, [r5, #1004]	; 0x3ec
  USB_EPClearStall(hpcd->Instance , ep);
 8001234:	6828      	ldr	r0, [r5, #0]
 8001236:	f001 fe77 	bl	8002f28 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd); 
 800123a:	f885 43ec 	strb.w	r4, [r5, #1004]	; 0x3ec
  return HAL_OK;
 800123e:	4620      	mov	r0, r4
 8001240:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(hpcd); 
 8001242:	2002      	movs	r0, #2
}
 8001244:	bd38      	pop	{r3, r4, r5, pc}

08001246 <HAL_PCDEx_PMAConfig>:

{
  PCD_EPTypeDef *ep = NULL;
  
  /* initialize ep structure*/
  if ((0x80 & ep_addr) == 0x80)
 8001246:	f011 0f80 	tst.w	r1, #128	; 0x80
  {
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 800124a:	bf1b      	ittet	ne
 800124c:	f001 017f 	andne.w	r1, r1, #127	; 0x7f
 8001250:	eb00 1041 	addne.w	r0, r0, r1, lsl #5
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8001254:	eb00 1041 	addeq.w	r0, r0, r1, lsl #5
    ep = &hpcd->IN_ep[ep_addr & 0x7F];
 8001258:	302c      	addne	r0, #44	; 0x2c
    ep = &hpcd->OUT_ep[ep_addr];
 800125a:	bf08      	it	eq
 800125c:	f500 7003 	addeq.w	r0, r0, #524	; 0x20c
  }
  
  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 8001260:	b91a      	cbnz	r2, 800126a <HAL_PCDEx_PMAConfig+0x24>
  {
    /*Single Buffer*/
    ep->doublebuffer = 0;
 8001262:	7282      	strb	r2, [r0, #10]
    /*Configure te PMA*/
    ep->pmaadress = (uint16_t)pmaadress;
 8001264:	8083      	strh	r3, [r0, #4]
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
  }
  
  return HAL_OK; 
}
 8001266:	2000      	movs	r0, #0
 8001268:	4770      	bx	lr
    ep->doublebuffer = 1;
 800126a:	2201      	movs	r2, #1
    ep->pmaaddr0 =  pmaadress & 0xFFFF;
 800126c:	80c3      	strh	r3, [r0, #6]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 800126e:	0c1b      	lsrs	r3, r3, #16
    ep->doublebuffer = 1;
 8001270:	7282      	strb	r2, [r0, #10]
    ep->pmaaddr1 =  (pmaadress & 0xFFFF0000) >> 16;
 8001272:	8103      	strh	r3, [r0, #8]
 8001274:	e7f7      	b.n	8001266 <HAL_PCDEx_PMAConfig+0x20>

08001276 <HAL_PCDEx_ActivateBCD>:
  * @param  hpcd: PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateBCD(PCD_HandleTypeDef *hpcd)
{
  USB_TypeDef *USBx = hpcd->Instance;
 8001276:	6802      	ldr	r2, [r0, #0]
  hpcd->battery_charging_active = ENABLE;
 8001278:	2301      	movs	r3, #1
 800127a:	f8c0 342c 	str.w	r3, [r0, #1068]	; 0x42c
  
  USBx->BCDR |= (USB_BCDR_BCDEN);
 800127e:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8001282:	b29b      	uxth	r3, r3
 8001284:	f043 0301 	orr.w	r3, r3, #1
 8001288:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
  /* Enable DCD : Data Contact Detect */
  USBx->BCDR |= (USB_BCDR_DCDEN);
 800128c:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8001290:	b29b      	uxth	r3, r3
 8001292:	f043 0302 	orr.w	r3, r3, #2
 8001296:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
  
  return HAL_OK;  
}
 800129a:	2000      	movs	r0, #0
 800129c:	4770      	bx	lr

0800129e <HAL_PCDEx_ActivateLPM>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{

  USB_TypeDef *USBx = hpcd->Instance;
 800129e:	6802      	ldr	r2, [r0, #0]
{
 80012a0:	4603      	mov	r3, r0
  hpcd->lpm_active = ENABLE;
 80012a2:	2101      	movs	r1, #1
 80012a4:	f8c0 1428 	str.w	r1, [r0, #1064]	; 0x428
  hpcd->LPM_State = LPM_L0;
 80012a8:	2000      	movs	r0, #0
 80012aa:	f883 0420 	strb.w	r0, [r3, #1056]	; 0x420
  
  USBx->LPMCSR |= (USB_LPMCSR_LMPEN);
 80012ae:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80012b2:	b29b      	uxth	r3, r3
 80012b4:	430b      	orrs	r3, r1
 80012b6:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
  USBx->LPMCSR |= (USB_LPMCSR_LPMACK);
 80012ba:	f8b2 3054 	ldrh.w	r3, [r2, #84]	; 0x54
 80012be:	b29b      	uxth	r3, r3
 80012c0:	f043 0302 	orr.w	r3, r3, #2
 80012c4:	f8a2 3054 	strh.w	r3, [r2, #84]	; 0x54
    
 
  return HAL_OK;  
}
 80012c8:	4770      	bx	lr
	...

080012cc <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80012cc:	4b02      	ldr	r3, [pc, #8]	; (80012d8 <HAL_PWREx_GetVoltageRange+0xc>)
 80012ce:	6818      	ldr	r0, [r3, #0]
#endif  
}
 80012d0:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80012d4:	4770      	bx	lr
 80012d6:	bf00      	nop
 80012d8:	40007000 	.word	0x40007000

080012dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.                    
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80012dc:	4b16      	ldr	r3, [pc, #88]	; (8001338 <HAL_PWREx_ControlVoltageScaling+0x5c>)
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012de:	681a      	ldr	r2, [r3, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e0:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e4:	f402 62c0 	and.w	r2, r2, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80012e8:	d11a      	bne.n	8001320 <HAL_PWREx_ControlVoltageScaling+0x44>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 80012ea:	f5b2 7f00 	cmp.w	r2, #512	; 0x200
 80012ee:	d013      	beq.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x3c>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f0:	681a      	ldr	r2, [r3, #0]
      
      /* Wait until VOSF is cleared */      
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80012f2:	4912      	ldr	r1, [pc, #72]	; (800133c <HAL_PWREx_ControlVoltageScaling+0x60>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80012f4:	f422 62c0 	bic.w	r2, r2, #1536	; 0x600
 80012f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80012fc:	601a      	str	r2, [r3, #0]
      wait_loop_index = (PWR_FLAG_SETTING_DELAY_US * (SystemCoreClock / 1000000));
 80012fe:	4a10      	ldr	r2, [pc, #64]	; (8001340 <HAL_PWREx_ControlVoltageScaling+0x64>)
 8001300:	6812      	ldr	r2, [r2, #0]
 8001302:	fbb2 f1f1 	udiv	r1, r2, r1
 8001306:	2232      	movs	r2, #50	; 0x32
 8001308:	434a      	muls	r2, r1
      while ((wait_loop_index != 0) && (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)))
 800130a:	b112      	cbz	r2, 8001312 <HAL_PWREx_ControlVoltageScaling+0x36>
 800130c:	6959      	ldr	r1, [r3, #20]
 800130e:	0549      	lsls	r1, r1, #21
 8001310:	d404      	bmi.n	800131c <HAL_PWREx_ControlVoltageScaling+0x40>
      {
        wait_loop_index--;
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001312:	695b      	ldr	r3, [r3, #20]
 8001314:	055b      	lsls	r3, r3, #21
 8001316:	d40d      	bmi.n	8001334 <HAL_PWREx_ControlVoltageScaling+0x58>
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif  
  
  return HAL_OK;
 8001318:	2000      	movs	r0, #0
 800131a:	4770      	bx	lr
        wait_loop_index--;
 800131c:	3a01      	subs	r2, #1
 800131e:	e7f4      	b.n	800130a <HAL_PWREx_ControlVoltageScaling+0x2e>
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8001320:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001324:	bf1f      	itttt	ne
 8001326:	681a      	ldrne	r2, [r3, #0]
 8001328:	f422 62c0 	bicne.w	r2, r2, #1536	; 0x600
 800132c:	f442 6280 	orrne.w	r2, r2, #1024	; 0x400
 8001330:	601a      	strne	r2, [r3, #0]
 8001332:	e7f1      	b.n	8001318 <HAL_PWREx_ControlVoltageScaling+0x3c>
        return HAL_TIMEOUT;
 8001334:	2003      	movs	r0, #3
}  
 8001336:	4770      	bx	lr
 8001338:	40007000 	.word	0x40007000
 800133c:	000f4240 	.word	0x000f4240
 8001340:	20000154 	.word	0x20000154

08001344 <HAL_PWREx_EnableVddUSB>:
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.  
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8001344:	4a02      	ldr	r2, [pc, #8]	; (8001350 <HAL_PWREx_EnableVddUSB+0xc>)
 8001346:	6853      	ldr	r3, [r2, #4]
 8001348:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800134c:	6053      	str	r3, [r2, #4]
 800134e:	4770      	bx	lr
 8001350:	40007000 	.word	0x40007000

08001354 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8001354:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t vos = 0;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8001356:	4d1e      	ldr	r5, [pc, #120]	; (80013d0 <RCC_SetFlashLatencyFromMSIRange+0x7c>)
 8001358:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800135a:	00da      	lsls	r2, r3, #3
{
 800135c:	4604      	mov	r4, r0
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800135e:	d518      	bpl.n	8001392 <RCC_SetFlashLatencyFromMSIRange+0x3e>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8001360:	f7ff ffb4 	bl	80012cc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001364:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8001368:	d123      	bne.n	80013b2 <RCC_SetFlashLatencyFromMSIRange+0x5e>
  {
    if(msirange > RCC_MSIRANGE_8)
 800136a:	2c80      	cmp	r4, #128	; 0x80
 800136c:	d929      	bls.n	80013c2 <RCC_SetFlashLatencyFromMSIRange+0x6e>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800136e:	2ca0      	cmp	r4, #160	; 0xa0
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001370:	bf8c      	ite	hi
 8001372:	2002      	movhi	r0, #2
 8001374:	2001      	movls	r0, #1
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001376:	4a17      	ldr	r2, [pc, #92]	; (80013d4 <RCC_SetFlashLatencyFromMSIRange+0x80>)
 8001378:	6813      	ldr	r3, [r2, #0]
 800137a:	f023 0307 	bic.w	r3, r3, #7
 800137e:	4303      	orrs	r3, r0
 8001380:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != latency)
 8001382:	6813      	ldr	r3, [r2, #0]
 8001384:	f003 0307 	and.w	r3, r3, #7
  {
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8001388:	1a18      	subs	r0, r3, r0
 800138a:	bf18      	it	ne
 800138c:	2001      	movne	r0, #1
 800138e:	b003      	add	sp, #12
 8001390:	bd30      	pop	{r4, r5, pc}
    __HAL_RCC_PWR_CLK_ENABLE();
 8001392:	6dab      	ldr	r3, [r5, #88]	; 0x58
 8001394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001398:	65ab      	str	r3, [r5, #88]	; 0x58
 800139a:	6dab      	ldr	r3, [r5, #88]	; 0x58
 800139c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80013a0:	9301      	str	r3, [sp, #4]
 80013a2:	9b01      	ldr	r3, [sp, #4]
    vos = HAL_PWREx_GetVoltageRange();
 80013a4:	f7ff ff92 	bl	80012cc <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 80013a8:	6dab      	ldr	r3, [r5, #88]	; 0x58
 80013aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80013ae:	65ab      	str	r3, [r5, #88]	; 0x58
 80013b0:	e7d8      	b.n	8001364 <RCC_SetFlashLatencyFromMSIRange+0x10>
    if(msirange > RCC_MSIRANGE_8)
 80013b2:	2c80      	cmp	r4, #128	; 0x80
 80013b4:	d807      	bhi.n	80013c6 <RCC_SetFlashLatencyFromMSIRange+0x72>
      if(msirange == RCC_MSIRANGE_8)
 80013b6:	d008      	beq.n	80013ca <RCC_SetFlashLatencyFromMSIRange+0x76>
      else if(msirange == RCC_MSIRANGE_7)
 80013b8:	f1a4 0370 	sub.w	r3, r4, #112	; 0x70
 80013bc:	4258      	negs	r0, r3
 80013be:	4158      	adcs	r0, r3
 80013c0:	e7d9      	b.n	8001376 <RCC_SetFlashLatencyFromMSIRange+0x22>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80013c2:	2000      	movs	r0, #0
 80013c4:	e7d7      	b.n	8001376 <RCC_SetFlashLatencyFromMSIRange+0x22>
      latency = FLASH_LATENCY_3; /* 3WS */
 80013c6:	2003      	movs	r0, #3
 80013c8:	e7d5      	b.n	8001376 <RCC_SetFlashLatencyFromMSIRange+0x22>
        latency = FLASH_LATENCY_2; /* 2WS */
 80013ca:	2002      	movs	r0, #2
 80013cc:	e7d3      	b.n	8001376 <RCC_SetFlashLatencyFromMSIRange+0x22>
 80013ce:	bf00      	nop
 80013d0:	40021000 	.word	0x40021000
 80013d4:	40022000 	.word	0x40022000

080013d8 <HAL_RCC_GetSysClockFreq>:
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80013d8:	4b2f      	ldr	r3, [pc, #188]	; (8001498 <HAL_RCC_GetSysClockFreq+0xc0>)
 80013da:	689a      	ldr	r2, [r3, #8]
 80013dc:	f012 0f0c 	tst.w	r2, #12
{
 80013e0:	b510      	push	{r4, lr}
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80013e2:	d009      	beq.n	80013f8 <HAL_RCC_GetSysClockFreq+0x20>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80013e4:	689a      	ldr	r2, [r3, #8]
 80013e6:	f002 020c 	and.w	r2, r2, #12
  if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) ||
 80013ea:	2a0c      	cmp	r2, #12
 80013ec:	d12d      	bne.n	800144a <HAL_RCC_GetSysClockFreq+0x72>
     ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)))
 80013ee:	68da      	ldr	r2, [r3, #12]
 80013f0:	f002 0203 	and.w	r2, r2, #3
 80013f4:	2a01      	cmp	r2, #1
 80013f6:	d128      	bne.n	800144a <HAL_RCC_GetSysClockFreq+0x72>
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80013f8:	681a      	ldr	r2, [r3, #0]
    msirange = MSIRangeTable[msirange];
 80013fa:	4928      	ldr	r1, [pc, #160]	; (800149c <HAL_RCC_GetSysClockFreq+0xc4>)
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == RESET)
 80013fc:	0712      	lsls	r2, r2, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80013fe:	bf55      	itete	pl
 8001400:	f8d3 2094 	ldrpl.w	r2, [r3, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001404:	681a      	ldrmi	r2, [r3, #0]
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001406:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800140a:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 800140e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI)
 8001412:	6899      	ldr	r1, [r3, #8]
      sysclockfreq = msirange;
 8001414:	f011 0f0c 	tst.w	r1, #12
 8001418:	bf0c      	ite	eq
 800141a:	4610      	moveq	r0, r2
 800141c:	2000      	movne	r0, #0
  if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800141e:	6899      	ldr	r1, [r3, #8]
 8001420:	f001 010c 	and.w	r1, r1, #12
 8001424:	290c      	cmp	r1, #12
 8001426:	d130      	bne.n	800148a <HAL_RCC_GetSysClockFreq+0xb2>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001428:	68dc      	ldr	r4, [r3, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800142a:	68d8      	ldr	r0, [r3, #12]
 800142c:	f3c0 1002 	ubfx	r0, r0, #4, #3
 8001430:	1c41      	adds	r1, r0, #1
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8001432:	f004 0003 	and.w	r0, r4, #3
    switch (pllsource)
 8001436:	2802      	cmp	r0, #2
 8001438:	d019      	beq.n	800146e <HAL_RCC_GetSysClockFreq+0x96>
 800143a:	2803      	cmp	r0, #3
 800143c:	d026      	beq.n	800148c <HAL_RCC_GetSysClockFreq+0xb4>
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800143e:	fbb2 f2f1 	udiv	r2, r2, r1
 8001442:	68d8      	ldr	r0, [r3, #12]
 8001444:	f3c0 2006 	ubfx	r0, r0, #8, #7
 8001448:	e017      	b.n	800147a <HAL_RCC_GetSysClockFreq+0xa2>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800144a:	689a      	ldr	r2, [r3, #8]
 800144c:	f002 020c 	and.w	r2, r2, #12
 8001450:	2a04      	cmp	r2, #4
 8001452:	d007      	beq.n	8001464 <HAL_RCC_GetSysClockFreq+0x8c>
  else if(__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001454:	689a      	ldr	r2, [r3, #8]
 8001456:	f002 020c 	and.w	r2, r2, #12
 800145a:	2a08      	cmp	r2, #8
 800145c:	d104      	bne.n	8001468 <HAL_RCC_GetSysClockFreq+0x90>
    sysclockfreq = HSE_VALUE;
 800145e:	4810      	ldr	r0, [pc, #64]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xc8>)
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 8001460:	2200      	movs	r2, #0
 8001462:	e7dc      	b.n	800141e <HAL_RCC_GetSysClockFreq+0x46>
    sysclockfreq = HSI_VALUE;
 8001464:	480f      	ldr	r0, [pc, #60]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001466:	e7fb      	b.n	8001460 <HAL_RCC_GetSysClockFreq+0x88>
  uint32_t sysclockfreq = 0U;
 8001468:	2000      	movs	r0, #0
  uint32_t msirange = 0U, pllvco = 0U, pllsource = 0U, pllr = 2U, pllm = 2U;
 800146a:	4602      	mov	r2, r0
 800146c:	e7d7      	b.n	800141e <HAL_RCC_GetSysClockFreq+0x46>
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800146e:	68da      	ldr	r2, [r3, #12]
 8001470:	480c      	ldr	r0, [pc, #48]	; (80014a4 <HAL_RCC_GetSysClockFreq+0xcc>)
 8001472:	f3c2 2206 	ubfx	r2, r2, #8, #7
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001476:	fbb0 f0f1 	udiv	r0, r0, r1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800147a:	68db      	ldr	r3, [r3, #12]
 800147c:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8001480:	3301      	adds	r3, #1
      pllvco = (msirange / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8001482:	4350      	muls	r0, r2
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001484:	005b      	lsls	r3, r3, #1
    sysclockfreq = pllvco/pllr;
 8001486:	fbb0 f0f3 	udiv	r0, r0, r3
}
 800148a:	bd10      	pop	{r4, pc}
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800148c:	68da      	ldr	r2, [r3, #12]
 800148e:	4804      	ldr	r0, [pc, #16]	; (80014a0 <HAL_RCC_GetSysClockFreq+0xc8>)
 8001490:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8001494:	e7ef      	b.n	8001476 <HAL_RCC_GetSysClockFreq+0x9e>
 8001496:	bf00      	nop
 8001498:	40021000 	.word	0x40021000
 800149c:	08004440 	.word	0x08004440
 80014a0:	007a1200 	.word	0x007a1200
 80014a4:	00f42400 	.word	0x00f42400

080014a8 <HAL_RCC_OscConfig>:
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014a8:	6803      	ldr	r3, [r0, #0]
{
 80014aa:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80014ae:	4605      	mov	r5, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80014b0:	06d8      	lsls	r0, r3, #27
 80014b2:	d539      	bpl.n	8001528 <HAL_RCC_OscConfig+0x80>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_MSI) )
 80014b4:	4cab      	ldr	r4, [pc, #684]	; (8001764 <HAL_RCC_OscConfig+0x2bc>)
 80014b6:	68a3      	ldr	r3, [r4, #8]
 80014b8:	f013 0f0c 	tst.w	r3, #12
 80014bc:	d162      	bne.n	8001584 <HAL_RCC_OscConfig+0xdc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80014be:	6823      	ldr	r3, [r4, #0]
 80014c0:	0799      	lsls	r1, r3, #30
 80014c2:	d503      	bpl.n	80014cc <HAL_RCC_OscConfig+0x24>
 80014c4:	69ab      	ldr	r3, [r5, #24]
 80014c6:	b90b      	cbnz	r3, 80014cc <HAL_RCC_OscConfig+0x24>
      return HAL_ERROR;
 80014c8:	2001      	movs	r0, #1
 80014ca:	e07f      	b.n	80015cc <HAL_RCC_OscConfig+0x124>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80014cc:	6823      	ldr	r3, [r4, #0]
 80014ce:	6a28      	ldr	r0, [r5, #32]
 80014d0:	071a      	lsls	r2, r3, #28
 80014d2:	bf56      	itet	pl
 80014d4:	f8d4 3094 	ldrpl.w	r3, [r4, #148]	; 0x94
 80014d8:	6823      	ldrmi	r3, [r4, #0]
 80014da:	091b      	lsrpl	r3, r3, #4
 80014dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80014e0:	4283      	cmp	r3, r0
 80014e2:	d23a      	bcs.n	800155a <HAL_RCC_OscConfig+0xb2>
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80014e4:	f7ff ff36 	bl	8001354 <RCC_SetFlashLatencyFromMSIRange>
 80014e8:	2800      	cmp	r0, #0
 80014ea:	d1ed      	bne.n	80014c8 <HAL_RCC_OscConfig+0x20>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80014ec:	6823      	ldr	r3, [r4, #0]
 80014ee:	f043 0308 	orr.w	r3, r3, #8
 80014f2:	6023      	str	r3, [r4, #0]
 80014f4:	6823      	ldr	r3, [r4, #0]
 80014f6:	6a2a      	ldr	r2, [r5, #32]
 80014f8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80014fc:	4313      	orrs	r3, r2
 80014fe:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001500:	6863      	ldr	r3, [r4, #4]
 8001502:	69ea      	ldr	r2, [r5, #28]
 8001504:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001508:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 800150c:	6063      	str	r3, [r4, #4]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800150e:	f7ff ff63 	bl	80013d8 <HAL_RCC_GetSysClockFreq>
 8001512:	68a3      	ldr	r3, [r4, #8]
 8001514:	4a94      	ldr	r2, [pc, #592]	; (8001768 <HAL_RCC_OscConfig+0x2c0>)
 8001516:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800151a:	5cd3      	ldrb	r3, [r2, r3]
 800151c:	40d8      	lsrs	r0, r3
 800151e:	4b93      	ldr	r3, [pc, #588]	; (800176c <HAL_RCC_OscConfig+0x2c4>)
 8001520:	6018      	str	r0, [r3, #0]
        HAL_InitTick (TICK_INT_PRIORITY);
 8001522:	2000      	movs	r0, #0
 8001524:	f7fe ffda 	bl	80004dc <HAL_InitTick>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001528:	682b      	ldr	r3, [r5, #0]
 800152a:	07d8      	lsls	r0, r3, #31
 800152c:	d461      	bmi.n	80015f2 <HAL_RCC_OscConfig+0x14a>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800152e:	682b      	ldr	r3, [r5, #0]
 8001530:	0799      	lsls	r1, r3, #30
 8001532:	f100 80a9 	bmi.w	8001688 <HAL_RCC_OscConfig+0x1e0>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	682b      	ldr	r3, [r5, #0]
 8001538:	071a      	lsls	r2, r3, #28
 800153a:	f100 80e7 	bmi.w	800170c <HAL_RCC_OscConfig+0x264>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800153e:	682b      	ldr	r3, [r5, #0]
 8001540:	075b      	lsls	r3, r3, #29
 8001542:	f100 8115 	bmi.w	8001770 <HAL_RCC_OscConfig+0x2c8>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001546:	682b      	ldr	r3, [r5, #0]
 8001548:	069a      	lsls	r2, r3, #26
 800154a:	f100 817c 	bmi.w	8001846 <HAL_RCC_OscConfig+0x39e>
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800154e:	6aaa      	ldr	r2, [r5, #40]	; 0x28
 8001550:	2a00      	cmp	r2, #0
 8001552:	f040 81a3 	bne.w	800189c <HAL_RCC_OscConfig+0x3f4>
  return HAL_OK;
 8001556:	2000      	movs	r0, #0
 8001558:	e038      	b.n	80015cc <HAL_RCC_OscConfig+0x124>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800155a:	6823      	ldr	r3, [r4, #0]
 800155c:	f043 0308 	orr.w	r3, r3, #8
 8001560:	6023      	str	r3, [r4, #0]
 8001562:	6823      	ldr	r3, [r4, #0]
 8001564:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001568:	4303      	orrs	r3, r0
 800156a:	6023      	str	r3, [r4, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800156c:	6863      	ldr	r3, [r4, #4]
 800156e:	69ea      	ldr	r2, [r5, #28]
 8001570:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8001574:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8001578:	6063      	str	r3, [r4, #4]
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800157a:	f7ff feeb 	bl	8001354 <RCC_SetFlashLatencyFromMSIRange>
 800157e:	2800      	cmp	r0, #0
 8001580:	d0c5      	beq.n	800150e <HAL_RCC_OscConfig+0x66>
 8001582:	e7a1      	b.n	80014c8 <HAL_RCC_OscConfig+0x20>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8001584:	69ab      	ldr	r3, [r5, #24]
 8001586:	b323      	cbz	r3, 80015d2 <HAL_RCC_OscConfig+0x12a>
        __HAL_RCC_MSI_ENABLE();
 8001588:	6823      	ldr	r3, [r4, #0]
 800158a:	f043 0301 	orr.w	r3, r3, #1
 800158e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001590:	f7fe ffcc 	bl	800052c <HAL_GetTick>
 8001594:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001596:	6823      	ldr	r3, [r4, #0]
 8001598:	079b      	lsls	r3, r3, #30
 800159a:	d511      	bpl.n	80015c0 <HAL_RCC_OscConfig+0x118>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800159c:	6823      	ldr	r3, [r4, #0]
 800159e:	f043 0308 	orr.w	r3, r3, #8
 80015a2:	6023      	str	r3, [r4, #0]
 80015a4:	6823      	ldr	r3, [r4, #0]
 80015a6:	6a2a      	ldr	r2, [r5, #32]
 80015a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80015ac:	4313      	orrs	r3, r2
 80015ae:	6023      	str	r3, [r4, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80015b0:	6863      	ldr	r3, [r4, #4]
 80015b2:	69ea      	ldr	r2, [r5, #28]
 80015b4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80015b8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80015bc:	6063      	str	r3, [r4, #4]
 80015be:	e7b3      	b.n	8001528 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015c0:	f7fe ffb4 	bl	800052c <HAL_GetTick>
 80015c4:	1b80      	subs	r0, r0, r6
 80015c6:	2802      	cmp	r0, #2
 80015c8:	d9e5      	bls.n	8001596 <HAL_RCC_OscConfig+0xee>
            return HAL_TIMEOUT;
 80015ca:	2003      	movs	r0, #3
}
 80015cc:	b002      	add	sp, #8
 80015ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        __HAL_RCC_MSI_DISABLE();
 80015d2:	6823      	ldr	r3, [r4, #0]
 80015d4:	f023 0301 	bic.w	r3, r3, #1
 80015d8:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80015da:	f7fe ffa7 	bl	800052c <HAL_GetTick>
 80015de:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != RESET)
 80015e0:	6823      	ldr	r3, [r4, #0]
 80015e2:	079f      	lsls	r7, r3, #30
 80015e4:	d5a0      	bpl.n	8001528 <HAL_RCC_OscConfig+0x80>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80015e6:	f7fe ffa1 	bl	800052c <HAL_GetTick>
 80015ea:	1b80      	subs	r0, r0, r6
 80015ec:	2802      	cmp	r0, #2
 80015ee:	d9f7      	bls.n	80015e0 <HAL_RCC_OscConfig+0x138>
 80015f0:	e7eb      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 80015f2:	4c5c      	ldr	r4, [pc, #368]	; (8001764 <HAL_RCC_OscConfig+0x2bc>)
 80015f4:	68a3      	ldr	r3, [r4, #8]
 80015f6:	f003 030c 	and.w	r3, r3, #12
 80015fa:	2b08      	cmp	r3, #8
 80015fc:	d009      	beq.n	8001612 <HAL_RCC_OscConfig+0x16a>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80015fe:	68a3      	ldr	r3, [r4, #8]
 8001600:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||
 8001604:	2b0c      	cmp	r3, #12
 8001606:	d10b      	bne.n	8001620 <HAL_RCC_OscConfig+0x178>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001608:	68e3      	ldr	r3, [r4, #12]
 800160a:	f003 0303 	and.w	r3, r3, #3
 800160e:	2b03      	cmp	r3, #3
 8001610:	d106      	bne.n	8001620 <HAL_RCC_OscConfig+0x178>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001612:	6823      	ldr	r3, [r4, #0]
 8001614:	039a      	lsls	r2, r3, #14
 8001616:	d58a      	bpl.n	800152e <HAL_RCC_OscConfig+0x86>
 8001618:	686b      	ldr	r3, [r5, #4]
 800161a:	2b00      	cmp	r3, #0
 800161c:	d187      	bne.n	800152e <HAL_RCC_OscConfig+0x86>
 800161e:	e753      	b.n	80014c8 <HAL_RCC_OscConfig+0x20>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001620:	686b      	ldr	r3, [r5, #4]
 8001622:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001626:	d110      	bne.n	800164a <HAL_RCC_OscConfig+0x1a2>
 8001628:	6823      	ldr	r3, [r4, #0]
 800162a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800162e:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 8001630:	f7fe ff7c 	bl	800052c <HAL_GetTick>
 8001634:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001636:	6823      	ldr	r3, [r4, #0]
 8001638:	039b      	lsls	r3, r3, #14
 800163a:	f53f af78 	bmi.w	800152e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800163e:	f7fe ff75 	bl	800052c <HAL_GetTick>
 8001642:	1b80      	subs	r0, r0, r6
 8001644:	2864      	cmp	r0, #100	; 0x64
 8001646:	d9f6      	bls.n	8001636 <HAL_RCC_OscConfig+0x18e>
 8001648:	e7bf      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800164a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800164e:	d104      	bne.n	800165a <HAL_RCC_OscConfig+0x1b2>
 8001650:	6823      	ldr	r3, [r4, #0]
 8001652:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001656:	6023      	str	r3, [r4, #0]
 8001658:	e7e6      	b.n	8001628 <HAL_RCC_OscConfig+0x180>
 800165a:	6822      	ldr	r2, [r4, #0]
 800165c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001660:	6022      	str	r2, [r4, #0]
 8001662:	6822      	ldr	r2, [r4, #0]
 8001664:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8001668:	6022      	str	r2, [r4, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800166a:	2b00      	cmp	r3, #0
 800166c:	d1e0      	bne.n	8001630 <HAL_RCC_OscConfig+0x188>
        tickstart = HAL_GetTick();
 800166e:	f7fe ff5d 	bl	800052c <HAL_GetTick>
 8001672:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != RESET)
 8001674:	6823      	ldr	r3, [r4, #0]
 8001676:	039f      	lsls	r7, r3, #14
 8001678:	f57f af59 	bpl.w	800152e <HAL_RCC_OscConfig+0x86>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800167c:	f7fe ff56 	bl	800052c <HAL_GetTick>
 8001680:	1b80      	subs	r0, r0, r6
 8001682:	2864      	cmp	r0, #100	; 0x64
 8001684:	d9f6      	bls.n	8001674 <HAL_RCC_OscConfig+0x1cc>
 8001686:	e7a0      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 8001688:	4c36      	ldr	r4, [pc, #216]	; (8001764 <HAL_RCC_OscConfig+0x2bc>)
 800168a:	68a3      	ldr	r3, [r4, #8]
 800168c:	f003 030c 	and.w	r3, r3, #12
 8001690:	2b04      	cmp	r3, #4
 8001692:	d009      	beq.n	80016a8 <HAL_RCC_OscConfig+0x200>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 8001694:	68a3      	ldr	r3, [r4, #8]
 8001696:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||
 800169a:	2b0c      	cmp	r3, #12
 800169c:	d113      	bne.n	80016c6 <HAL_RCC_OscConfig+0x21e>
       ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 800169e:	68e3      	ldr	r3, [r4, #12]
 80016a0:	f003 0303 	and.w	r3, r3, #3
 80016a4:	2b02      	cmp	r3, #2
 80016a6:	d10e      	bne.n	80016c6 <HAL_RCC_OscConfig+0x21e>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80016a8:	6823      	ldr	r3, [r4, #0]
 80016aa:	055e      	lsls	r6, r3, #21
 80016ac:	d503      	bpl.n	80016b6 <HAL_RCC_OscConfig+0x20e>
 80016ae:	68eb      	ldr	r3, [r5, #12]
 80016b0:	2b00      	cmp	r3, #0
 80016b2:	f43f af09 	beq.w	80014c8 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80016b6:	6863      	ldr	r3, [r4, #4]
 80016b8:	692a      	ldr	r2, [r5, #16]
 80016ba:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 80016be:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80016c2:	6063      	str	r3, [r4, #4]
 80016c4:	e737      	b.n	8001536 <HAL_RCC_OscConfig+0x8e>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80016c6:	68eb      	ldr	r3, [r5, #12]
 80016c8:	b17b      	cbz	r3, 80016ea <HAL_RCC_OscConfig+0x242>
        __HAL_RCC_HSI_ENABLE();
 80016ca:	6823      	ldr	r3, [r4, #0]
 80016cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80016d0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016d2:	f7fe ff2b 	bl	800052c <HAL_GetTick>
 80016d6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80016d8:	6823      	ldr	r3, [r4, #0]
 80016da:	0558      	lsls	r0, r3, #21
 80016dc:	d4eb      	bmi.n	80016b6 <HAL_RCC_OscConfig+0x20e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80016de:	f7fe ff25 	bl	800052c <HAL_GetTick>
 80016e2:	1b80      	subs	r0, r0, r6
 80016e4:	2802      	cmp	r0, #2
 80016e6:	d9f7      	bls.n	80016d8 <HAL_RCC_OscConfig+0x230>
 80016e8:	e76f      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_DISABLE();
 80016ea:	6823      	ldr	r3, [r4, #0]
 80016ec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80016f0:	6023      	str	r3, [r4, #0]
        tickstart = HAL_GetTick();
 80016f2:	f7fe ff1b 	bl	800052c <HAL_GetTick>
 80016f6:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != RESET)
 80016f8:	6823      	ldr	r3, [r4, #0]
 80016fa:	0559      	lsls	r1, r3, #21
 80016fc:	f57f af1b 	bpl.w	8001536 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001700:	f7fe ff14 	bl	800052c <HAL_GetTick>
 8001704:	1b80      	subs	r0, r0, r6
 8001706:	2802      	cmp	r0, #2
 8001708:	d9f6      	bls.n	80016f8 <HAL_RCC_OscConfig+0x250>
 800170a:	e75e      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800170c:	696b      	ldr	r3, [r5, #20]
 800170e:	4c15      	ldr	r4, [pc, #84]	; (8001764 <HAL_RCC_OscConfig+0x2bc>)
 8001710:	b19b      	cbz	r3, 800173a <HAL_RCC_OscConfig+0x292>
      __HAL_RCC_LSI_ENABLE();
 8001712:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001716:	f043 0301 	orr.w	r3, r3, #1
 800171a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 800171e:	f7fe ff05 	bl	800052c <HAL_GetTick>
 8001722:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == RESET)
 8001724:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001728:	079f      	lsls	r7, r3, #30
 800172a:	f53f af08 	bmi.w	800153e <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800172e:	f7fe fefd 	bl	800052c <HAL_GetTick>
 8001732:	1b80      	subs	r0, r0, r6
 8001734:	2802      	cmp	r0, #2
 8001736:	d9f5      	bls.n	8001724 <HAL_RCC_OscConfig+0x27c>
 8001738:	e747      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800173a:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 800173e:	f023 0301 	bic.w	r3, r3, #1
 8001742:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
      tickstart = HAL_GetTick();
 8001746:	f7fe fef1 	bl	800052c <HAL_GetTick>
 800174a:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != RESET)
 800174c:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
 8001750:	0798      	lsls	r0, r3, #30
 8001752:	f57f aef4 	bpl.w	800153e <HAL_RCC_OscConfig+0x96>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001756:	f7fe fee9 	bl	800052c <HAL_GetTick>
 800175a:	1b80      	subs	r0, r0, r6
 800175c:	2802      	cmp	r0, #2
 800175e:	d9f5      	bls.n	800174c <HAL_RCC_OscConfig+0x2a4>
 8001760:	e733      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
 8001762:	bf00      	nop
 8001764:	40021000 	.word	0x40021000
 8001768:	08004427 	.word	0x08004427
 800176c:	20000154 	.word	0x20000154
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001770:	4c79      	ldr	r4, [pc, #484]	; (8001958 <HAL_RCC_OscConfig+0x4b0>)
 8001772:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001774:	00d9      	lsls	r1, r3, #3
 8001776:	d427      	bmi.n	80017c8 <HAL_RCC_OscConfig+0x320>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001778:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800177a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800177e:	65a3      	str	r3, [r4, #88]	; 0x58
 8001780:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8001782:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001786:	9301      	str	r3, [sp, #4]
 8001788:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 800178a:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800178c:	4e73      	ldr	r6, [pc, #460]	; (800195c <HAL_RCC_OscConfig+0x4b4>)
 800178e:	6833      	ldr	r3, [r6, #0]
 8001790:	05da      	lsls	r2, r3, #23
 8001792:	d51b      	bpl.n	80017cc <HAL_RCC_OscConfig+0x324>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001794:	68ab      	ldr	r3, [r5, #8]
 8001796:	2b01      	cmp	r3, #1
 8001798:	d129      	bne.n	80017ee <HAL_RCC_OscConfig+0x346>
 800179a:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800179e:	f043 0301 	orr.w	r3, r3, #1
 80017a2:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
      tickstart = HAL_GetTick();
 80017a6:	f7fe fec1 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017aa:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80017ae:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 80017b0:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80017b4:	0798      	lsls	r0, r3, #30
 80017b6:	d540      	bpl.n	800183a <HAL_RCC_OscConfig+0x392>
    if(pwrclkchanged == SET)
 80017b8:	2f00      	cmp	r7, #0
 80017ba:	f43f aec4 	beq.w	8001546 <HAL_RCC_OscConfig+0x9e>
      __HAL_RCC_PWR_CLK_DISABLE();
 80017be:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80017c0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80017c4:	65a3      	str	r3, [r4, #88]	; 0x58
 80017c6:	e6be      	b.n	8001546 <HAL_RCC_OscConfig+0x9e>
    FlagStatus       pwrclkchanged = RESET;
 80017c8:	2700      	movs	r7, #0
 80017ca:	e7df      	b.n	800178c <HAL_RCC_OscConfig+0x2e4>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80017cc:	6833      	ldr	r3, [r6, #0]
 80017ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80017d2:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 80017d4:	f7fe feaa 	bl	800052c <HAL_GetTick>
 80017d8:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80017da:	6833      	ldr	r3, [r6, #0]
 80017dc:	05db      	lsls	r3, r3, #23
 80017de:	d4d9      	bmi.n	8001794 <HAL_RCC_OscConfig+0x2ec>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80017e0:	f7fe fea4 	bl	800052c <HAL_GetTick>
 80017e4:	eba0 0008 	sub.w	r0, r0, r8
 80017e8:	2802      	cmp	r0, #2
 80017ea:	d9f6      	bls.n	80017da <HAL_RCC_OscConfig+0x332>
 80017ec:	e6ed      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80017ee:	2b05      	cmp	r3, #5
 80017f0:	d106      	bne.n	8001800 <HAL_RCC_OscConfig+0x358>
 80017f2:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 80017f6:	f043 0304 	orr.w	r3, r3, #4
 80017fa:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
 80017fe:	e7cc      	b.n	800179a <HAL_RCC_OscConfig+0x2f2>
 8001800:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001804:	f022 0201 	bic.w	r2, r2, #1
 8001808:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
 800180c:	f8d4 2090 	ldr.w	r2, [r4, #144]	; 0x90
 8001810:	f022 0204 	bic.w	r2, r2, #4
 8001814:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001818:	2b00      	cmp	r3, #0
 800181a:	d1c4      	bne.n	80017a6 <HAL_RCC_OscConfig+0x2fe>
      tickstart = HAL_GetTick();
 800181c:	f7fe fe86 	bl	800052c <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001820:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8001824:	4606      	mov	r6, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != RESET)
 8001826:	f8d4 3090 	ldr.w	r3, [r4, #144]	; 0x90
 800182a:	0799      	lsls	r1, r3, #30
 800182c:	d5c4      	bpl.n	80017b8 <HAL_RCC_OscConfig+0x310>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800182e:	f7fe fe7d 	bl	800052c <HAL_GetTick>
 8001832:	1b80      	subs	r0, r0, r6
 8001834:	4540      	cmp	r0, r8
 8001836:	d9f6      	bls.n	8001826 <HAL_RCC_OscConfig+0x37e>
 8001838:	e6c7      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800183a:	f7fe fe77 	bl	800052c <HAL_GetTick>
 800183e:	1b80      	subs	r0, r0, r6
 8001840:	4540      	cmp	r0, r8
 8001842:	d9b5      	bls.n	80017b0 <HAL_RCC_OscConfig+0x308>
 8001844:	e6c1      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8001846:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8001848:	4c43      	ldr	r4, [pc, #268]	; (8001958 <HAL_RCC_OscConfig+0x4b0>)
 800184a:	b19b      	cbz	r3, 8001874 <HAL_RCC_OscConfig+0x3cc>
      __HAL_RCC_HSI48_ENABLE();
 800184c:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001850:	f043 0301 	orr.w	r3, r3, #1
 8001854:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001858:	f7fe fe68 	bl	800052c <HAL_GetTick>
 800185c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == RESET)
 800185e:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001862:	079b      	lsls	r3, r3, #30
 8001864:	f53f ae73 	bmi.w	800154e <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001868:	f7fe fe60 	bl	800052c <HAL_GetTick>
 800186c:	1b80      	subs	r0, r0, r6
 800186e:	2802      	cmp	r0, #2
 8001870:	d9f5      	bls.n	800185e <HAL_RCC_OscConfig+0x3b6>
 8001872:	e6aa      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8001874:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 8001878:	f023 0301 	bic.w	r3, r3, #1
 800187c:	f8c4 3098 	str.w	r3, [r4, #152]	; 0x98
      tickstart = HAL_GetTick();
 8001880:	f7fe fe54 	bl	800052c <HAL_GetTick>
 8001884:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != RESET)
 8001886:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
 800188a:	079f      	lsls	r7, r3, #30
 800188c:	f57f ae5f 	bpl.w	800154e <HAL_RCC_OscConfig+0xa6>
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001890:	f7fe fe4c 	bl	800052c <HAL_GetTick>
 8001894:	1b80      	subs	r0, r0, r6
 8001896:	2802      	cmp	r0, #2
 8001898:	d9f5      	bls.n	8001886 <HAL_RCC_OscConfig+0x3de>
 800189a:	e696      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800189c:	4c2e      	ldr	r4, [pc, #184]	; (8001958 <HAL_RCC_OscConfig+0x4b0>)
 800189e:	68a3      	ldr	r3, [r4, #8]
 80018a0:	f003 030c 	and.w	r3, r3, #12
 80018a4:	2b0c      	cmp	r3, #12
 80018a6:	f43f ae0f 	beq.w	80014c8 <HAL_RCC_OscConfig+0x20>
        __HAL_RCC_PLL_DISABLE();
 80018aa:	6823      	ldr	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018ac:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80018ae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80018b2:	6023      	str	r3, [r4, #0]
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80018b4:	d136      	bne.n	8001924 <HAL_RCC_OscConfig+0x47c>
        tickstart = HAL_GetTick();
 80018b6:	f7fe fe39 	bl	800052c <HAL_GetTick>
 80018ba:	4606      	mov	r6, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 80018bc:	6823      	ldr	r3, [r4, #0]
 80018be:	0198      	lsls	r0, r3, #6
 80018c0:	d42a      	bmi.n	8001918 <HAL_RCC_OscConfig+0x470>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80018c2:	6bab      	ldr	r3, [r5, #56]	; 0x38
 80018c4:	6b6a      	ldr	r2, [r5, #52]	; 0x34
 80018c6:	06db      	lsls	r3, r3, #27
 80018c8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 80018cc:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80018ce:	4313      	orrs	r3, r2
 80018d0:	6b2a      	ldr	r2, [r5, #48]	; 0x30
 80018d2:	3a01      	subs	r2, #1
 80018d4:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 80018d8:	6bea      	ldr	r2, [r5, #60]	; 0x3c
 80018da:	0852      	lsrs	r2, r2, #1
 80018dc:	3a01      	subs	r2, #1
 80018de:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80018e2:	6c2a      	ldr	r2, [r5, #64]	; 0x40
 80018e4:	0852      	lsrs	r2, r2, #1
 80018e6:	3a01      	subs	r2, #1
 80018e8:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80018ec:	60e3      	str	r3, [r4, #12]
        __HAL_RCC_PLL_ENABLE();
 80018ee:	6823      	ldr	r3, [r4, #0]
 80018f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018f4:	6023      	str	r3, [r4, #0]
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80018f6:	68e3      	ldr	r3, [r4, #12]
 80018f8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80018fc:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 80018fe:	f7fe fe15 	bl	800052c <HAL_GetTick>
 8001902:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 8001904:	6823      	ldr	r3, [r4, #0]
 8001906:	0199      	lsls	r1, r3, #6
 8001908:	f53f ae25 	bmi.w	8001556 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800190c:	f7fe fe0e 	bl	800052c <HAL_GetTick>
 8001910:	1b40      	subs	r0, r0, r5
 8001912:	2802      	cmp	r0, #2
 8001914:	d9f6      	bls.n	8001904 <HAL_RCC_OscConfig+0x45c>
 8001916:	e658      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001918:	f7fe fe08 	bl	800052c <HAL_GetTick>
 800191c:	1b80      	subs	r0, r0, r6
 800191e:	2802      	cmp	r0, #2
 8001920:	d9cc      	bls.n	80018bc <HAL_RCC_OscConfig+0x414>
 8001922:	e652      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
        if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001924:	6823      	ldr	r3, [r4, #0]
 8001926:	011a      	lsls	r2, r3, #4
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001928:	bf5e      	ittt	pl
 800192a:	68e3      	ldrpl	r3, [r4, #12]
 800192c:	f023 0303 	bicpl.w	r3, r3, #3
 8001930:	60e3      	strpl	r3, [r4, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI2CLK);
 8001932:	68e3      	ldr	r3, [r4, #12]
 8001934:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001938:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800193c:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 800193e:	f7fe fdf5 	bl	800052c <HAL_GetTick>
 8001942:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != RESET)
 8001944:	6823      	ldr	r3, [r4, #0]
 8001946:	019b      	lsls	r3, r3, #6
 8001948:	f57f ae05 	bpl.w	8001556 <HAL_RCC_OscConfig+0xae>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800194c:	f7fe fdee 	bl	800052c <HAL_GetTick>
 8001950:	1b40      	subs	r0, r0, r5
 8001952:	2802      	cmp	r0, #2
 8001954:	d9f6      	bls.n	8001944 <HAL_RCC_OscConfig+0x49c>
 8001956:	e638      	b.n	80015ca <HAL_RCC_OscConfig+0x122>
 8001958:	40021000 	.word	0x40021000
 800195c:	40007000 	.word	0x40007000

08001960 <HAL_RCC_ClockConfig>:
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001960:	4a56      	ldr	r2, [pc, #344]	; (8001abc <HAL_RCC_ClockConfig+0x15c>)
 8001962:	6813      	ldr	r3, [r2, #0]
 8001964:	f003 0307 	and.w	r3, r3, #7
 8001968:	428b      	cmp	r3, r1
{
 800196a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800196e:	4605      	mov	r5, r0
 8001970:	460e      	mov	r6, r1
  if(FLatency > READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001972:	d32b      	bcc.n	80019cc <HAL_RCC_ClockConfig+0x6c>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001974:	682b      	ldr	r3, [r5, #0]
 8001976:	07d9      	lsls	r1, r3, #31
 8001978:	d435      	bmi.n	80019e6 <HAL_RCC_ClockConfig+0x86>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800197a:	6829      	ldr	r1, [r5, #0]
 800197c:	078a      	lsls	r2, r1, #30
 800197e:	f100 8083 	bmi.w	8001a88 <HAL_RCC_ClockConfig+0x128>
  if(FLatency < READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY))
 8001982:	4a4e      	ldr	r2, [pc, #312]	; (8001abc <HAL_RCC_ClockConfig+0x15c>)
 8001984:	6813      	ldr	r3, [r2, #0]
 8001986:	f003 0307 	and.w	r3, r3, #7
 800198a:	429e      	cmp	r6, r3
 800198c:	f0c0 8084 	bcc.w	8001a98 <HAL_RCC_ClockConfig+0x138>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	f011 0f04 	tst.w	r1, #4
 8001994:	4c4a      	ldr	r4, [pc, #296]	; (8001ac0 <HAL_RCC_ClockConfig+0x160>)
 8001996:	f040 808a 	bne.w	8001aae <HAL_RCC_ClockConfig+0x14e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800199a:	070b      	lsls	r3, r1, #28
 800199c:	d506      	bpl.n	80019ac <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800199e:	68a3      	ldr	r3, [r4, #8]
 80019a0:	692a      	ldr	r2, [r5, #16]
 80019a2:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80019a6:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80019aa:	60a3      	str	r3, [r4, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ac:	f7ff fd14 	bl	80013d8 <HAL_RCC_GetSysClockFreq>
 80019b0:	68a3      	ldr	r3, [r4, #8]
 80019b2:	4a44      	ldr	r2, [pc, #272]	; (8001ac4 <HAL_RCC_ClockConfig+0x164>)
 80019b4:	f3c3 1303 	ubfx	r3, r3, #4, #4
 80019b8:	5cd3      	ldrb	r3, [r2, r3]
 80019ba:	40d8      	lsrs	r0, r3
 80019bc:	4b42      	ldr	r3, [pc, #264]	; (8001ac8 <HAL_RCC_ClockConfig+0x168>)
 80019be:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 80019c0:	2000      	movs	r0, #0
 80019c2:	f7fe fd8b 	bl	80004dc <HAL_InitTick>
  return HAL_OK;
 80019c6:	2000      	movs	r0, #0
}
 80019c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019cc:	6813      	ldr	r3, [r2, #0]
 80019ce:	f023 0307 	bic.w	r3, r3, #7
 80019d2:	430b      	orrs	r3, r1
 80019d4:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 80019d6:	6813      	ldr	r3, [r2, #0]
 80019d8:	f003 0307 	and.w	r3, r3, #7
 80019dc:	4299      	cmp	r1, r3
 80019de:	d0c9      	beq.n	8001974 <HAL_RCC_ClockConfig+0x14>
      return HAL_ERROR;
 80019e0:	2001      	movs	r0, #1
 80019e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019e6:	686a      	ldr	r2, [r5, #4]
 80019e8:	4c35      	ldr	r4, [pc, #212]	; (8001ac0 <HAL_RCC_ClockConfig+0x160>)
 80019ea:	2a03      	cmp	r2, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80019ec:	6823      	ldr	r3, [r4, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ee:	d11c      	bne.n	8001a2a <HAL_RCC_ClockConfig+0xca>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == RESET)
 80019f0:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 80019f4:	d0f4      	beq.n	80019e0 <HAL_RCC_ClockConfig+0x80>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80019f6:	68a3      	ldr	r3, [r4, #8]
 80019f8:	f023 0303 	bic.w	r3, r3, #3
 80019fc:	4313      	orrs	r3, r2
 80019fe:	60a3      	str	r3, [r4, #8]
    tickstart = HAL_GetTick();
 8001a00:	f7fe fd94 	bl	800052c <HAL_GetTick>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a04:	686b      	ldr	r3, [r5, #4]
 8001a06:	2b03      	cmp	r3, #3
    tickstart = HAL_GetTick();
 8001a08:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0a:	f241 3888 	movw	r8, #5000	; 0x1388
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001a0e:	d118      	bne.n	8001a42 <HAL_RCC_ClockConfig+0xe2>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001a10:	68a3      	ldr	r3, [r4, #8]
 8001a12:	f003 030c 	and.w	r3, r3, #12
 8001a16:	2b0c      	cmp	r3, #12
 8001a18:	d0af      	beq.n	800197a <HAL_RCC_ClockConfig+0x1a>
        if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a1a:	f7fe fd87 	bl	800052c <HAL_GetTick>
 8001a1e:	1bc0      	subs	r0, r0, r7
 8001a20:	4540      	cmp	r0, r8
 8001a22:	d9f5      	bls.n	8001a10 <HAL_RCC_ClockConfig+0xb0>
          return HAL_TIMEOUT;
 8001a24:	2003      	movs	r0, #3
 8001a26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a2a:	2a02      	cmp	r2, #2
 8001a2c:	d102      	bne.n	8001a34 <HAL_RCC_ClockConfig+0xd4>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == RESET)
 8001a2e:	f413 3f00 	tst.w	r3, #131072	; 0x20000
 8001a32:	e7df      	b.n	80019f4 <HAL_RCC_ClockConfig+0x94>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a34:	b912      	cbnz	r2, 8001a3c <HAL_RCC_ClockConfig+0xdc>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == RESET)
 8001a36:	f013 0f02 	tst.w	r3, #2
 8001a3a:	e7db      	b.n	80019f4 <HAL_RCC_ClockConfig+0x94>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == RESET)
 8001a3c:	f413 6f80 	tst.w	r3, #1024	; 0x400
 8001a40:	e7d8      	b.n	80019f4 <HAL_RCC_ClockConfig+0x94>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001a42:	2b02      	cmp	r3, #2
 8001a44:	d10a      	bne.n	8001a5c <HAL_RCC_ClockConfig+0xfc>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSE)
 8001a46:	68a3      	ldr	r3, [r4, #8]
 8001a48:	f003 030c 	and.w	r3, r3, #12
 8001a4c:	2b08      	cmp	r3, #8
 8001a4e:	d094      	beq.n	800197a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a50:	f7fe fd6c 	bl	800052c <HAL_GetTick>
 8001a54:	1bc0      	subs	r0, r0, r7
 8001a56:	4540      	cmp	r0, r8
 8001a58:	d9f5      	bls.n	8001a46 <HAL_RCC_ClockConfig+0xe6>
 8001a5a:	e7e3      	b.n	8001a24 <HAL_RCC_ClockConfig+0xc4>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001a5c:	b973      	cbnz	r3, 8001a7c <HAL_RCC_ClockConfig+0x11c>
        while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_MSI)
 8001a5e:	68a3      	ldr	r3, [r4, #8]
 8001a60:	f013 0f0c 	tst.w	r3, #12
 8001a64:	d089      	beq.n	800197a <HAL_RCC_ClockConfig+0x1a>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a66:	f7fe fd61 	bl	800052c <HAL_GetTick>
 8001a6a:	1bc0      	subs	r0, r0, r7
 8001a6c:	4540      	cmp	r0, r8
 8001a6e:	d9f6      	bls.n	8001a5e <HAL_RCC_ClockConfig+0xfe>
 8001a70:	e7d8      	b.n	8001a24 <HAL_RCC_ClockConfig+0xc4>
          if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a72:	f7fe fd5b 	bl	800052c <HAL_GetTick>
 8001a76:	1bc0      	subs	r0, r0, r7
 8001a78:	4540      	cmp	r0, r8
 8001a7a:	d8d3      	bhi.n	8001a24 <HAL_RCC_ClockConfig+0xc4>
        while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_HSI)
 8001a7c:	68a3      	ldr	r3, [r4, #8]
 8001a7e:	f003 030c 	and.w	r3, r3, #12
 8001a82:	2b04      	cmp	r3, #4
 8001a84:	d1f5      	bne.n	8001a72 <HAL_RCC_ClockConfig+0x112>
 8001a86:	e778      	b.n	800197a <HAL_RCC_ClockConfig+0x1a>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001a88:	4a0d      	ldr	r2, [pc, #52]	; (8001ac0 <HAL_RCC_ClockConfig+0x160>)
 8001a8a:	68a8      	ldr	r0, [r5, #8]
 8001a8c:	6893      	ldr	r3, [r2, #8]
 8001a8e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8001a92:	4303      	orrs	r3, r0
 8001a94:	6093      	str	r3, [r2, #8]
 8001a96:	e774      	b.n	8001982 <HAL_RCC_ClockConfig+0x22>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a98:	6813      	ldr	r3, [r2, #0]
 8001a9a:	f023 0307 	bic.w	r3, r3, #7
 8001a9e:	4333      	orrs	r3, r6
 8001aa0:	6013      	str	r3, [r2, #0]
    if(READ_BIT(FLASH->ACR, FLASH_ACR_LATENCY) != FLatency)
 8001aa2:	6813      	ldr	r3, [r2, #0]
 8001aa4:	f003 0307 	and.w	r3, r3, #7
 8001aa8:	429e      	cmp	r6, r3
 8001aaa:	d199      	bne.n	80019e0 <HAL_RCC_ClockConfig+0x80>
 8001aac:	e770      	b.n	8001990 <HAL_RCC_ClockConfig+0x30>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001aae:	68a3      	ldr	r3, [r4, #8]
 8001ab0:	68ea      	ldr	r2, [r5, #12]
 8001ab2:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	60a3      	str	r3, [r4, #8]
 8001aba:	e76e      	b.n	800199a <HAL_RCC_ClockConfig+0x3a>
 8001abc:	40022000 	.word	0x40022000
 8001ac0:	40021000 	.word	0x40021000
 8001ac4:	08004427 	.word	0x08004427
 8001ac8:	20000154 	.word	0x20000154

08001acc <HAL_RCC_GetHCLKFreq>:
}
 8001acc:	4b01      	ldr	r3, [pc, #4]	; (8001ad4 <HAL_RCC_GetHCLKFreq+0x8>)
 8001ace:	6818      	ldr	r0, [r3, #0]
 8001ad0:	4770      	bx	lr
 8001ad2:	bf00      	nop
 8001ad4:	20000154 	.word	0x20000154

08001ad8 <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ad8:	4b04      	ldr	r3, [pc, #16]	; (8001aec <HAL_RCC_GetPCLK1Freq+0x14>)
 8001ada:	4a05      	ldr	r2, [pc, #20]	; (8001af0 <HAL_RCC_GetPCLK1Freq+0x18>)
 8001adc:	689b      	ldr	r3, [r3, #8]
 8001ade:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8001ae2:	5cd3      	ldrb	r3, [r2, r3]
 8001ae4:	4a03      	ldr	r2, [pc, #12]	; (8001af4 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8001ae6:	6810      	ldr	r0, [r2, #0]
}
 8001ae8:	40d8      	lsrs	r0, r3
 8001aea:	4770      	bx	lr
 8001aec:	40021000 	.word	0x40021000
 8001af0:	08004437 	.word	0x08004437
 8001af4:	20000154 	.word	0x20000154

08001af8 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001af8:	4b04      	ldr	r3, [pc, #16]	; (8001b0c <HAL_RCC_GetPCLK2Freq+0x14>)
 8001afa:	4a05      	ldr	r2, [pc, #20]	; (8001b10 <HAL_RCC_GetPCLK2Freq+0x18>)
 8001afc:	689b      	ldr	r3, [r3, #8]
 8001afe:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 8001b02:	5cd3      	ldrb	r3, [r2, r3]
 8001b04:	4a03      	ldr	r2, [pc, #12]	; (8001b14 <HAL_RCC_GetPCLK2Freq+0x1c>)
 8001b06:	6810      	ldr	r0, [r2, #0]
}
 8001b08:	40d8      	lsrs	r0, r3
 8001b0a:	4770      	bx	lr
 8001b0c:	40021000 	.word	0x40021000
 8001b10:	08004437 	.word	0x08004437
 8001b14:	20000154 	.word	0x20000154

08001b18 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001b18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b1a:	4b44      	ldr	r3, [pc, #272]	; (8001c2c <RCCEx_PLLSAI1_Config+0x114>)
 8001b1c:	68da      	ldr	r2, [r3, #12]
 8001b1e:	f012 0f03 	tst.w	r2, #3
{
 8001b22:	4605      	mov	r5, r0
 8001b24:	460e      	mov	r6, r1
 8001b26:	461c      	mov	r4, r3
 8001b28:	6800      	ldr	r0, [r0, #0]
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001b2a:	d039      	beq.n	8001ba0 <RCCEx_PLLSAI1_Config+0x88>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001b2c:	68da      	ldr	r2, [r3, #12]
 8001b2e:	f002 0203 	and.w	r2, r2, #3
 8001b32:	4282      	cmp	r2, r0
 8001b34:	d14b      	bne.n	8001bce <RCCEx_PLLSAI1_Config+0xb6>
       ||
 8001b36:	2a00      	cmp	r2, #0
 8001b38:	d049      	beq.n	8001bce <RCCEx_PLLSAI1_Config+0xb6>
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001b3a:	68db      	ldr	r3, [r3, #12]
       ||
 8001b3c:	686a      	ldr	r2, [r5, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001b3e:	f3c3 1302 	ubfx	r3, r3, #4, #3
 8001b42:	3301      	adds	r3, #1
       ||
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d142      	bne.n	8001bce <RCCEx_PLLSAI1_Config+0xb6>
  }

  if(status == HAL_OK)
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8001b48:	6823      	ldr	r3, [r4, #0]
 8001b4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8001b4e:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001b50:	f7fe fcec 	bl	800052c <HAL_GetTick>
 8001b54:	4607      	mov	r7, r0

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != RESET)
 8001b56:	6823      	ldr	r3, [r4, #0]
 8001b58:	011a      	lsls	r2, r3, #4
 8001b5a:	d441      	bmi.n	8001be0 <RCCEx_PLLSAI1_Config+0xc8>
 8001b5c:	68af      	ldr	r7, [r5, #8]
      }
    }

    if(status == HAL_OK)
    {
      if(Divider == DIVIDER_P_UPDATE)
 8001b5e:	2e00      	cmp	r6, #0
 8001b60:	d045      	beq.n	8001bee <RCCEx_PLLSAI1_Config+0xd6>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8001b62:	2e01      	cmp	r6, #1
 8001b64:	d14f      	bne.n	8001c06 <RCCEx_PLLSAI1_Config+0xee>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001b66:	6922      	ldr	r2, [r4, #16]
 8001b68:	6928      	ldr	r0, [r5, #16]
 8001b6a:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8001b6e:	0840      	lsrs	r0, r0, #1
 8001b70:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001b74:	3801      	subs	r0, #1
 8001b76:	ea42 2207 	orr.w	r2, r2, r7, lsl #8
 8001b7a:	ea42 5240 	orr.w	r2, r2, r0, lsl #21
 8001b7e:	6122      	str	r2, [r4, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8001b80:	6823      	ldr	r3, [r4, #0]
 8001b82:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001b86:	6023      	str	r3, [r4, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b88:	f7fe fcd0 	bl	800052c <HAL_GetTick>
 8001b8c:	4606      	mov	r6, r0

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == RESET)
 8001b8e:	6823      	ldr	r3, [r4, #0]
 8001b90:	011b      	lsls	r3, r3, #4
 8001b92:	d545      	bpl.n	8001c20 <RCCEx_PLLSAI1_Config+0x108>
      }

      if(status == HAL_OK)
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8001b94:	6923      	ldr	r3, [r4, #16]
 8001b96:	69aa      	ldr	r2, [r5, #24]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	6123      	str	r3, [r4, #16]
 8001b9c:	2000      	movs	r0, #0
      }
    }
  }

  return status;
}
 8001b9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 8001ba0:	2802      	cmp	r0, #2
 8001ba2:	d010      	beq.n	8001bc6 <RCCEx_PLLSAI1_Config+0xae>
 8001ba4:	2803      	cmp	r0, #3
 8001ba6:	d014      	beq.n	8001bd2 <RCCEx_PLLSAI1_Config+0xba>
 8001ba8:	2801      	cmp	r0, #1
 8001baa:	d110      	bne.n	8001bce <RCCEx_PLLSAI1_Config+0xb6>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	079f      	lsls	r7, r3, #30
 8001bb0:	d5f5      	bpl.n	8001b9e <RCCEx_PLLSAI1_Config+0x86>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001bb2:	68e3      	ldr	r3, [r4, #12]
 8001bb4:	686a      	ldr	r2, [r5, #4]
 8001bb6:	f023 0373 	bic.w	r3, r3, #115	; 0x73
 8001bba:	3a01      	subs	r2, #1
 8001bbc:	4318      	orrs	r0, r3
 8001bbe:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8001bc2:	60e0      	str	r0, [r4, #12]
 8001bc4:	e7c0      	b.n	8001b48 <RCCEx_PLLSAI1_Config+0x30>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	f413 6f80 	tst.w	r3, #1024	; 0x400
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY) && HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001bcc:	d1f1      	bne.n	8001bb2 <RCCEx_PLLSAI1_Config+0x9a>
 8001bce:	2001      	movs	r0, #1
 8001bd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8001bd2:	681a      	ldr	r2, [r3, #0]
 8001bd4:	0391      	lsls	r1, r2, #14
 8001bd6:	d4ec      	bmi.n	8001bb2 <RCCEx_PLLSAI1_Config+0x9a>
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f413 2f80 	tst.w	r3, #262144	; 0x40000
 8001bde:	e7f5      	b.n	8001bcc <RCCEx_PLLSAI1_Config+0xb4>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001be0:	f7fe fca4 	bl	800052c <HAL_GetTick>
 8001be4:	1bc0      	subs	r0, r0, r7
 8001be6:	2802      	cmp	r0, #2
 8001be8:	d9b5      	bls.n	8001b56 <RCCEx_PLLSAI1_Config+0x3e>
        status = HAL_TIMEOUT;
 8001bea:	2003      	movs	r0, #3
 8001bec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001bee:	6922      	ldr	r2, [r4, #16]
 8001bf0:	68e9      	ldr	r1, [r5, #12]
 8001bf2:	f022 4278 	bic.w	r2, r2, #4160749568	; 0xf8000000
 8001bf6:	06c9      	lsls	r1, r1, #27
 8001bf8:	ea41 2307 	orr.w	r3, r1, r7, lsl #8
 8001bfc:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8001c00:	4313      	orrs	r3, r2
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8001c02:	6123      	str	r3, [r4, #16]
 8001c04:	e7bc      	b.n	8001b80 <RCCEx_PLLSAI1_Config+0x68>
 8001c06:	6923      	ldr	r3, [r4, #16]
 8001c08:	6968      	ldr	r0, [r5, #20]
 8001c0a:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8001c0e:	0840      	lsrs	r0, r0, #1
 8001c10:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8001c14:	3801      	subs	r0, #1
 8001c16:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 8001c1a:	ea43 6340 	orr.w	r3, r3, r0, lsl #25
 8001c1e:	e7f0      	b.n	8001c02 <RCCEx_PLLSAI1_Config+0xea>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8001c20:	f7fe fc84 	bl	800052c <HAL_GetTick>
 8001c24:	1b80      	subs	r0, r0, r6
 8001c26:	2802      	cmp	r0, #2
 8001c28:	d9b1      	bls.n	8001b8e <RCCEx_PLLSAI1_Config+0x76>
 8001c2a:	e7de      	b.n	8001bea <RCCEx_PLLSAI1_Config+0xd2>
 8001c2c:	40021000 	.word	0x40021000

08001c30 <HAL_RCCEx_PeriphCLKConfig>:
{
 8001c30:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c34:	6805      	ldr	r5, [r0, #0]
 8001c36:	f415 6500 	ands.w	r5, r5, #2048	; 0x800
{
 8001c3a:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001c3c:	d00e      	beq.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    switch(PeriphClkInit->Sai1ClockSelection)
 8001c3e:	6bc1      	ldr	r1, [r0, #60]	; 0x3c
 8001c40:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8001c44:	d05b      	beq.n	8001cfe <HAL_RCCEx_PeriphCLKConfig+0xce>
 8001c46:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 8001c4a:	d05d      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8001c4c:	2900      	cmp	r1, #0
 8001c4e:	d166      	bne.n	8001d1e <HAL_RCCEx_PeriphCLKConfig+0xee>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001c50:	3004      	adds	r0, #4
 8001c52:	f7ff ff61 	bl	8001b18 <RCCEx_PLLSAI1_Config>
    if(ret == HAL_OK)
 8001c56:	4605      	mov	r5, r0
 8001c58:	2800      	cmp	r0, #0
 8001c5a:	d055      	beq.n	8001d08 <HAL_RCCEx_PeriphCLKConfig+0xd8>
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001c5c:	6823      	ldr	r3, [r4, #0]
 8001c5e:	039e      	lsls	r6, r3, #14
 8001c60:	d56d      	bpl.n	8001d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001c62:	4e92      	ldr	r6, [pc, #584]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001c64:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c66:	00d8      	lsls	r0, r3, #3
 8001c68:	d45b      	bmi.n	8001d22 <HAL_RCCEx_PeriphCLKConfig+0xf2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8001c6a:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001c70:	65b3      	str	r3, [r6, #88]	; 0x58
 8001c72:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001c74:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c78:	9301      	str	r3, [sp, #4]
 8001c7a:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8001c7c:	2701      	movs	r7, #1
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001c7e:	f8df 8230 	ldr.w	r8, [pc, #560]	; 8001eb0 <HAL_RCCEx_PeriphCLKConfig+0x280>
 8001c82:	f8d8 3000 	ldr.w	r3, [r8]
 8001c86:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c8a:	f8c8 3000 	str.w	r3, [r8]
    tickstart = HAL_GetTick();
 8001c8e:	f7fe fc4d 	bl	800052c <HAL_GetTick>
 8001c92:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == RESET)
 8001c94:	f8d8 3000 	ldr.w	r3, [r8]
 8001c98:	05d9      	lsls	r1, r3, #23
 8001c9a:	d544      	bpl.n	8001d26 <HAL_RCCEx_PeriphCLKConfig+0xf6>
    if(ret == HAL_OK)
 8001c9c:	2d00      	cmp	r5, #0
 8001c9e:	d149      	bne.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x104>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001ca0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ca4:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8001ca8:	d014      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
 8001caa:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001cac:	4293      	cmp	r3, r2
 8001cae:	d011      	beq.n	8001cd4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cb0:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8001cb4:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8001cb8:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001cbc:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc0:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001cc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001cc8:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001ccc:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8001cd0:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001cd4:	07da      	lsls	r2, r3, #31
 8001cd6:	d509      	bpl.n	8001cec <HAL_RCCEx_PeriphCLKConfig+0xbc>
        tickstart = HAL_GetTick();
 8001cd8:	f7fe fc28 	bl	800052c <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cdc:	f241 3988 	movw	r9, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8001ce0:	4680      	mov	r8, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == RESET)
 8001ce2:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001ce6:	079b      	lsls	r3, r3, #30
 8001ce8:	f140 80c2 	bpl.w	8001e70 <HAL_RCCEx_PeriphCLKConfig+0x240>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001cec:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8001cf0:	6d22      	ldr	r2, [r4, #80]	; 0x50
 8001cf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001cf6:	4313      	orrs	r3, r2
 8001cf8:	f8c6 3090 	str.w	r3, [r6, #144]	; 0x90
 8001cfc:	e01a      	b.n	8001d34 <HAL_RCCEx_PeriphCLKConfig+0x104>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
 8001cfe:	4a6b      	ldr	r2, [pc, #428]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d00:	68d3      	ldr	r3, [r2, #12]
 8001d02:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d06:	60d3      	str	r3, [r2, #12]
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8001d08:	4a68      	ldr	r2, [pc, #416]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d0a:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 8001d0c:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001d10:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 8001d14:	430b      	orrs	r3, r1
 8001d16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
 8001d1a:	2500      	movs	r5, #0
 8001d1c:	e79e      	b.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x2c>
      ret = HAL_ERROR;
 8001d1e:	2501      	movs	r5, #1
 8001d20:	e79c      	b.n	8001c5c <HAL_RCCEx_PeriphCLKConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8001d22:	2700      	movs	r7, #0
 8001d24:	e7ab      	b.n	8001c7e <HAL_RCCEx_PeriphCLKConfig+0x4e>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001d26:	f7fe fc01 	bl	800052c <HAL_GetTick>
 8001d2a:	eba0 0009 	sub.w	r0, r0, r9
 8001d2e:	2802      	cmp	r0, #2
 8001d30:	d9b0      	bls.n	8001c94 <HAL_RCCEx_PeriphCLKConfig+0x64>
        ret = HAL_TIMEOUT;
 8001d32:	2503      	movs	r5, #3
    if(pwrclkchanged == SET)
 8001d34:	b11f      	cbz	r7, 8001d3e <HAL_RCCEx_PeriphCLKConfig+0x10e>
      __HAL_RCC_PWR_CLK_DISABLE();
 8001d36:	6db3      	ldr	r3, [r6, #88]	; 0x58
 8001d38:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001d3c:	65b3      	str	r3, [r6, #88]	; 0x58
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001d3e:	6823      	ldr	r3, [r4, #0]
 8001d40:	07df      	lsls	r7, r3, #31
 8001d42:	d508      	bpl.n	8001d56 <HAL_RCCEx_PeriphCLKConfig+0x126>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001d44:	4959      	ldr	r1, [pc, #356]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d46:	6a20      	ldr	r0, [r4, #32]
 8001d48:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d4c:	f022 0203 	bic.w	r2, r2, #3
 8001d50:	4302      	orrs	r2, r0
 8001d52:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001d56:	079e      	lsls	r6, r3, #30
 8001d58:	d508      	bpl.n	8001d6c <HAL_RCCEx_PeriphCLKConfig+0x13c>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001d5a:	4954      	ldr	r1, [pc, #336]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d5c:	6a60      	ldr	r0, [r4, #36]	; 0x24
 8001d5e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d62:	f022 020c 	bic.w	r2, r2, #12
 8001d66:	4302      	orrs	r2, r0
 8001d68:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001d6c:	0698      	lsls	r0, r3, #26
 8001d6e:	d508      	bpl.n	8001d82 <HAL_RCCEx_PeriphCLKConfig+0x152>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001d70:	494e      	ldr	r1, [pc, #312]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d72:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8001d74:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d78:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8001d7c:	4302      	orrs	r2, r0
 8001d7e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001d82:	0599      	lsls	r1, r3, #22
 8001d84:	d508      	bpl.n	8001d98 <HAL_RCCEx_PeriphCLKConfig+0x168>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001d86:	4949      	ldr	r1, [pc, #292]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d88:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8001d8a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001d8e:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 8001d92:	4302      	orrs	r2, r0
 8001d94:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001d98:	055a      	lsls	r2, r3, #21
 8001d9a:	d508      	bpl.n	8001dae <HAL_RCCEx_PeriphCLKConfig+0x17e>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001d9c:	4943      	ldr	r1, [pc, #268]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001d9e:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8001da0:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001da4:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8001da8:	4302      	orrs	r2, r0
 8001daa:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001dae:	065f      	lsls	r7, r3, #25
 8001db0:	d508      	bpl.n	8001dc4 <HAL_RCCEx_PeriphCLKConfig+0x194>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001db2:	493e      	ldr	r1, [pc, #248]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001db4:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
 8001db6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001dba:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8001dbe:	4302      	orrs	r2, r0
 8001dc0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001dc4:	05de      	lsls	r6, r3, #23
 8001dc6:	d508      	bpl.n	8001dda <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001dc8:	4938      	ldr	r1, [pc, #224]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001dca:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8001dcc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8001dd0:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 8001dd4:	4302      	orrs	r2, r0
 8001dd6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001dda:	0498      	lsls	r0, r3, #18
 8001ddc:	d50f      	bpl.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001dde:	4a33      	ldr	r2, [pc, #204]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001de0:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001de2:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001de6:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001dea:	430b      	orrs	r3, r1
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001dec:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001df0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001df4:	d144      	bne.n	8001e80 <HAL_RCCEx_PeriphCLKConfig+0x250>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001df6:	68d3      	ldr	r3, [r2, #12]
 8001df8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001dfc:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001dfe:	6823      	ldr	r3, [r4, #0]
 8001e00:	0359      	lsls	r1, r3, #13
 8001e02:	d50f      	bpl.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e04:	4a29      	ldr	r2, [pc, #164]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e06:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8001e08:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e0c:	f023 6340 	bic.w	r3, r3, #201326592	; 0xc000000
 8001e10:	430b      	orrs	r3, r1
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e12:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e16:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e1a:	d13c      	bne.n	8001e96 <HAL_RCCEx_PeriphCLKConfig+0x266>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e1c:	68d3      	ldr	r3, [r2, #12]
 8001e1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e22:	60d3      	str	r3, [r2, #12]
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e24:	6823      	ldr	r3, [r4, #0]
 8001e26:	045a      	lsls	r2, r3, #17
 8001e28:	d512      	bpl.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x220>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e2a:	4920      	ldr	r1, [pc, #128]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e2c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
 8001e2e:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8001e32:	f023 5340 	bic.w	r3, r3, #805306368	; 0x30000000
 8001e36:	4313      	orrs	r3, r2
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e38:	f1b2 5f80 	cmp.w	r2, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e3c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e40:	d106      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x220>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001e42:	2102      	movs	r1, #2
 8001e44:	1d20      	adds	r0, r4, #4
 8001e46:	f7ff fe67 	bl	8001b18 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001e4a:	2800      	cmp	r0, #0
 8001e4c:	bf18      	it	ne
 8001e4e:	4605      	movne	r5, r0
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001e50:	6823      	ldr	r3, [r4, #0]
 8001e52:	041b      	lsls	r3, r3, #16
 8001e54:	d508      	bpl.n	8001e68 <HAL_RCCEx_PeriphCLKConfig+0x238>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001e56:	4a15      	ldr	r2, [pc, #84]	; (8001eac <HAL_RCCEx_PeriphCLKConfig+0x27c>)
 8001e58:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
 8001e5a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8001e5e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8001e62:	430b      	orrs	r3, r1
 8001e64:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 8001e68:	4628      	mov	r0, r5
 8001e6a:	b003      	add	sp, #12
 8001e6c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001e70:	f7fe fb5c 	bl	800052c <HAL_GetTick>
 8001e74:	eba0 0008 	sub.w	r0, r0, r8
 8001e78:	4548      	cmp	r0, r9
 8001e7a:	f67f af32 	bls.w	8001ce2 <HAL_RCCEx_PeriphCLKConfig+0xb2>
 8001e7e:	e758      	b.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x102>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001e80:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001e84:	d1bb      	bne.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e86:	2101      	movs	r1, #1
 8001e88:	1d20      	adds	r0, r4, #4
 8001e8a:	f7ff fe45 	bl	8001b18 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 8001e8e:	2800      	cmp	r0, #0
 8001e90:	bf18      	it	ne
 8001e92:	4605      	movne	r5, r0
 8001e94:	e7b3      	b.n	8001dfe <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001e96:	f1b1 6f80 	cmp.w	r1, #67108864	; 0x4000000
 8001e9a:	d1c3      	bne.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e9c:	2101      	movs	r1, #1
 8001e9e:	1d20      	adds	r0, r4, #4
 8001ea0:	f7ff fe3a 	bl	8001b18 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8001ea4:	2800      	cmp	r0, #0
 8001ea6:	bf18      	it	ne
 8001ea8:	4605      	movne	r5, r0
 8001eaa:	e7bb      	b.n	8001e24 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
 8001eac:	40021000 	.word	0x40021000
 8001eb0:	40007000 	.word	0x40007000

08001eb4 <HAL_TIM_Base_Start_IT>:
{
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

   /* Enable the TIM Update interrupt */
   __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001eb4:	6803      	ldr	r3, [r0, #0]
 8001eb6:	68da      	ldr	r2, [r3, #12]
 8001eb8:	f042 0201 	orr.w	r2, r2, #1
 8001ebc:	60da      	str	r2, [r3, #12]

   /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	f042 0201 	orr.w	r2, r2, #1
 8001ec4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
}
 8001ec6:	2000      	movs	r0, #0
 8001ec8:	4770      	bx	lr

08001eca <HAL_TIM_OC_DelayElapsedCallback>:
 8001eca:	4770      	bx	lr

08001ecc <HAL_TIM_IC_CaptureCallback>:
 8001ecc:	4770      	bx	lr

08001ece <HAL_TIM_PWM_PulseFinishedCallback>:
 8001ece:	4770      	bx	lr

08001ed0 <HAL_TIM_TriggerCallback>:
 8001ed0:	4770      	bx	lr

08001ed2 <HAL_TIM_IRQHandler>:
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
  /* Capture compare 1 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001ed2:	6803      	ldr	r3, [r0, #0]
 8001ed4:	691a      	ldr	r2, [r3, #16]
 8001ed6:	0791      	lsls	r1, r2, #30
{
 8001ed8:	b510      	push	{r4, lr}
 8001eda:	4604      	mov	r4, r0
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001edc:	d50e      	bpl.n	8001efc <HAL_TIM_IRQHandler+0x2a>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) !=RESET)
 8001ede:	68da      	ldr	r2, [r3, #12]
 8001ee0:	0792      	lsls	r2, r2, #30
 8001ee2:	d50b      	bpl.n	8001efc <HAL_TIM_IRQHandler+0x2a>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001ee4:	f06f 0202 	mvn.w	r2, #2
 8001ee8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;

        /* Input capture event */
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001eea:	699b      	ldr	r3, [r3, #24]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001eec:	2201      	movs	r2, #1
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001eee:	079b      	lsls	r3, r3, #30
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001ef0:	7702      	strb	r2, [r0, #28]
        if((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00)
 8001ef2:	d077      	beq.n	8001fe4 <HAL_TIM_IRQHandler+0x112>
        {
          HAL_TIM_IC_CaptureCallback(htim);
 8001ef4:	f7ff ffea 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
        else
        {
          HAL_TIM_OC_DelayElapsedCallback(htim);
          HAL_TIM_PWM_PulseFinishedCallback(htim);
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	7723      	strb	r3, [r4, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001efc:	6823      	ldr	r3, [r4, #0]
 8001efe:	691a      	ldr	r2, [r3, #16]
 8001f00:	0750      	lsls	r0, r2, #29
 8001f02:	d510      	bpl.n	8001f26 <HAL_TIM_IRQHandler+0x54>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) !=RESET)
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	0751      	lsls	r1, r2, #29
 8001f08:	d50d      	bpl.n	8001f26 <HAL_TIM_IRQHandler+0x54>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001f0a:	f06f 0204 	mvn.w	r2, #4
 8001f0e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
      /* Input capture event */
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001f10:	699b      	ldr	r3, [r3, #24]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f12:	2202      	movs	r2, #2
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001f14:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001f18:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1a:	4620      	mov	r0, r4
      if((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00)
 8001f1c:	d068      	beq.n	8001ff0 <HAL_TIM_IRQHandler+0x11e>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f1e:	f7ff ffd5 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f22:	2300      	movs	r3, #0
 8001f24:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 3 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001f26:	6823      	ldr	r3, [r4, #0]
 8001f28:	691a      	ldr	r2, [r3, #16]
 8001f2a:	0712      	lsls	r2, r2, #28
 8001f2c:	d50f      	bpl.n	8001f4e <HAL_TIM_IRQHandler+0x7c>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) !=RESET)
 8001f2e:	68da      	ldr	r2, [r3, #12]
 8001f30:	0710      	lsls	r0, r2, #28
 8001f32:	d50c      	bpl.n	8001f4e <HAL_TIM_IRQHandler+0x7c>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001f34:	f06f 0208 	mvn.w	r2, #8
 8001f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001f3a:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f3c:	2204      	movs	r2, #4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001f3e:	0799      	lsls	r1, r3, #30
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001f40:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001f42:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00)
 8001f44:	d05a      	beq.n	8001ffc <HAL_TIM_IRQHandler+0x12a>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f46:	f7ff ffc1 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	7723      	strb	r3, [r4, #28]
    }
  }
  /* Capture compare 4 event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001f4e:	6823      	ldr	r3, [r4, #0]
 8001f50:	691a      	ldr	r2, [r3, #16]
 8001f52:	06d2      	lsls	r2, r2, #27
 8001f54:	d510      	bpl.n	8001f78 <HAL_TIM_IRQHandler+0xa6>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) !=RESET)
 8001f56:	68da      	ldr	r2, [r3, #12]
 8001f58:	06d0      	lsls	r0, r2, #27
 8001f5a:	d50d      	bpl.n	8001f78 <HAL_TIM_IRQHandler+0xa6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001f5c:	f06f 0210 	mvn.w	r2, #16
 8001f60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
      /* Input capture event */
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001f62:	69db      	ldr	r3, [r3, #28]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f64:	2208      	movs	r2, #8
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001f66:	f413 7f40 	tst.w	r3, #768	; 0x300
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001f6a:	7722      	strb	r2, [r4, #28]
      {
        HAL_TIM_IC_CaptureCallback(htim);
 8001f6c:	4620      	mov	r0, r4
      if((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00)
 8001f6e:	d04b      	beq.n	8002008 <HAL_TIM_IRQHandler+0x136>
        HAL_TIM_IC_CaptureCallback(htim);
 8001f70:	f7ff ffac 	bl	8001ecc <HAL_TIM_IC_CaptureCallback>
      else
      {
        HAL_TIM_OC_DelayElapsedCallback(htim);
        HAL_TIM_PWM_PulseFinishedCallback(htim);
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001f74:	2300      	movs	r3, #0
 8001f76:	7723      	strb	r3, [r4, #28]
    }
  }
  /* TIM Update event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001f78:	6823      	ldr	r3, [r4, #0]
 8001f7a:	691a      	ldr	r2, [r3, #16]
 8001f7c:	07d1      	lsls	r1, r2, #31
 8001f7e:	d508      	bpl.n	8001f92 <HAL_TIM_IRQHandler+0xc0>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) !=RESET)
 8001f80:	68da      	ldr	r2, [r3, #12]
 8001f82:	07d2      	lsls	r2, r2, #31
 8001f84:	d505      	bpl.n	8001f92 <HAL_TIM_IRQHandler+0xc0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001f86:	f06f 0201 	mvn.w	r2, #1
 8001f8a:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 8001f8c:	4620      	mov	r0, r4
 8001f8e:	f001 fec1 	bl	8003d14 <HAL_TIM_PeriodElapsedCallback>
    }
  }
  /* TIM Break input event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8001f92:	6823      	ldr	r3, [r4, #0]
 8001f94:	691a      	ldr	r2, [r3, #16]
 8001f96:	0610      	lsls	r0, r2, #24
 8001f98:	d508      	bpl.n	8001fac <HAL_TIM_IRQHandler+0xda>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) !=RESET)
 8001f9a:	68da      	ldr	r2, [r3, #12]
 8001f9c:	0611      	lsls	r1, r2, #24
 8001f9e:	d505      	bpl.n	8001fac <HAL_TIM_IRQHandler+0xda>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8001fa0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8001fa4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	f000 f927 	bl	80021fa <HAL_TIMEx_BreakCallback>
    }
  }
  /* TIM Trigger detection event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001fac:	6823      	ldr	r3, [r4, #0]
 8001fae:	691a      	ldr	r2, [r3, #16]
 8001fb0:	0652      	lsls	r2, r2, #25
 8001fb2:	d508      	bpl.n	8001fc6 <HAL_TIM_IRQHandler+0xf4>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) !=RESET)
 8001fb4:	68da      	ldr	r2, [r3, #12]
 8001fb6:	0650      	lsls	r0, r2, #25
 8001fb8:	d505      	bpl.n	8001fc6 <HAL_TIM_IRQHandler+0xf4>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001fba:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8001fbe:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	f7ff ff85 	bl	8001ed0 <HAL_TIM_TriggerCallback>
    }
  }
  /* TIM commutation event */
  if(__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8001fc6:	6823      	ldr	r3, [r4, #0]
 8001fc8:	691a      	ldr	r2, [r3, #16]
 8001fca:	0691      	lsls	r1, r2, #26
 8001fcc:	d522      	bpl.n	8002014 <HAL_TIM_IRQHandler+0x142>
  {
    if(__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) !=RESET)
 8001fce:	68da      	ldr	r2, [r3, #12]
 8001fd0:	0692      	lsls	r2, r2, #26
 8001fd2:	d51f      	bpl.n	8002014 <HAL_TIM_IRQHandler+0x142>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fd4:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutationCallback(htim);
 8001fd8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8001fda:	611a      	str	r2, [r3, #16]
    }
  }
}
 8001fdc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      HAL_TIMEx_CommutationCallback(htim);
 8001fe0:	f000 b90a 	b.w	80021f8 <HAL_TIMEx_CommutationCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001fe4:	f7ff ff71 	bl	8001eca <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001fe8:	4620      	mov	r0, r4
 8001fea:	f7ff ff70 	bl	8001ece <HAL_TIM_PWM_PulseFinishedCallback>
 8001fee:	e783      	b.n	8001ef8 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ff0:	f7ff ff6b 	bl	8001eca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001ff4:	4620      	mov	r0, r4
 8001ff6:	f7ff ff6a 	bl	8001ece <HAL_TIM_PWM_PulseFinishedCallback>
 8001ffa:	e792      	b.n	8001f22 <HAL_TIM_IRQHandler+0x50>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001ffc:	f7ff ff65 	bl	8001eca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002000:	4620      	mov	r0, r4
 8002002:	f7ff ff64 	bl	8001ece <HAL_TIM_PWM_PulseFinishedCallback>
 8002006:	e7a0      	b.n	8001f4a <HAL_TIM_IRQHandler+0x78>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002008:	f7ff ff5f 	bl	8001eca <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800200c:	4620      	mov	r0, r4
 800200e:	f7ff ff5e 	bl	8001ece <HAL_TIM_PWM_PulseFinishedCallback>
 8002012:	e7af      	b.n	8001f74 <HAL_TIM_IRQHandler+0xa2>
 8002014:	bd10      	pop	{r4, pc}
	...

08002018 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1 = 0;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002018:	4a1a      	ldr	r2, [pc, #104]	; (8002084 <TIM_Base_SetConfig+0x6c>)
  tmpcr1 = TIMx->CR1;
 800201a:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800201c:	4290      	cmp	r0, r2
{
 800201e:	b510      	push	{r4, lr}
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002020:	d002      	beq.n	8002028 <TIM_Base_SetConfig+0x10>
 8002022:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 8002026:	d109      	bne.n	800203c <TIM_Base_SetConfig+0x24>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 8002028:	684c      	ldr	r4, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800202a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  }

  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800202e:	4290      	cmp	r0, r2
    tmpcr1 |= Structure->CounterMode;
 8002030:	ea43 0304 	orr.w	r3, r3, r4
  if(IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002034:	d009      	beq.n	800204a <TIM_Base_SetConfig+0x32>
 8002036:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
 800203a:	d006      	beq.n	800204a <TIM_Base_SetConfig+0x32>
 800203c:	4a12      	ldr	r2, [pc, #72]	; (8002088 <TIM_Base_SetConfig+0x70>)
 800203e:	4290      	cmp	r0, r2
 8002040:	d003      	beq.n	800204a <TIM_Base_SetConfig+0x32>
 8002042:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8002046:	4290      	cmp	r0, r2
 8002048:	d103      	bne.n	8002052 <TIM_Base_SetConfig+0x3a>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800204a:	68ca      	ldr	r2, [r1, #12]
    tmpcr1 &= ~TIM_CR1_CKD;
 800204c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002050:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  tmpcr1 &= ~TIM_CR1_ARPE;
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002052:	694a      	ldr	r2, [r1, #20]
  tmpcr1 &= ~TIM_CR1_ARPE;
 8002054:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  tmpcr1 |= (uint32_t)Structure->AutoReloadPreload;
 8002058:	4313      	orrs	r3, r2

  TIMx->CR1 = tmpcr1;
 800205a:	6003      	str	r3, [r0, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800205c:	688b      	ldr	r3, [r1, #8]
 800205e:	62c3      	str	r3, [r0, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = (uint32_t)Structure->Prescaler;
 8002060:	680b      	ldr	r3, [r1, #0]
 8002062:	6283      	str	r3, [r0, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002064:	4b07      	ldr	r3, [pc, #28]	; (8002084 <TIM_Base_SetConfig+0x6c>)
 8002066:	4298      	cmp	r0, r3
 8002068:	d007      	beq.n	800207a <TIM_Base_SetConfig+0x62>
 800206a:	f503 53a0 	add.w	r3, r3, #5120	; 0x1400
 800206e:	4298      	cmp	r0, r3
 8002070:	d003      	beq.n	800207a <TIM_Base_SetConfig+0x62>
 8002072:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8002076:	4298      	cmp	r0, r3
 8002078:	d101      	bne.n	800207e <TIM_Base_SetConfig+0x66>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800207a:	690b      	ldr	r3, [r1, #16]
 800207c:	6303      	str	r3, [r0, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter(only for TIM1 and TIM8) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800207e:	2301      	movs	r3, #1
 8002080:	6143      	str	r3, [r0, #20]
 8002082:	bd10      	pop	{r4, pc}
 8002084:	40012c00 	.word	0x40012c00
 8002088:	40014000 	.word	0x40014000

0800208c <HAL_TIM_Base_Init>:
{
 800208c:	b510      	push	{r4, lr}
  if(htim == NULL)
 800208e:	4604      	mov	r4, r0
 8002090:	b1a0      	cbz	r0, 80020bc <HAL_TIM_Base_Init+0x30>
  if(htim->State == HAL_TIM_STATE_RESET)
 8002092:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8002096:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800209a:	b91b      	cbnz	r3, 80020a4 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800209c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 80020a0:	f001 fea0 	bl	8003de4 <HAL_TIM_Base_MspInit>
  htim->State= HAL_TIM_STATE_BUSY;
 80020a4:	2302      	movs	r3, #2
 80020a6:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80020aa:	6820      	ldr	r0, [r4, #0]
 80020ac:	1d21      	adds	r1, r4, #4
 80020ae:	f7ff ffb3 	bl	8002018 <TIM_Base_SetConfig>
  htim->State= HAL_TIM_STATE_READY;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 80020b8:	2000      	movs	r0, #0
 80020ba:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80020bc:	2001      	movs	r0, #1
}
 80020be:	bd10      	pop	{r4, pc}

080020c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef* TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80020c0:	b510      	push	{r4, lr}
  uint32_t tmpsmcr = 0;

  tmpsmcr = TIMx->SMCR;
 80020c2:	6884      	ldr	r4, [r0, #8]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020c4:	430a      	orrs	r2, r1
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80020c6:	f424 447f 	bic.w	r4, r4, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8)));
 80020ca:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
 80020ce:	4323      	orrs	r3, r4

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80020d0:	6083      	str	r3, [r0, #8]
 80020d2:	bd10      	pop	{r4, pc}

080020d4 <TIM_SlaveTimer_SetConfig>:
  tmpsmcr = htim->Instance->SMCR;
 80020d4:	6800      	ldr	r0, [r0, #0]
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80020d6:	684a      	ldr	r2, [r1, #4]
  tmpsmcr = htim->Instance->SMCR;
 80020d8:	6883      	ldr	r3, [r0, #8]
  tmpsmcr &= ~TIM_SMCR_TS;
 80020da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80020de:	4313      	orrs	r3, r2
{
 80020e0:	b430      	push	{r4, r5}
  tmpsmcr &= ~TIM_SMCR_SMS;
 80020e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80020e6:	680c      	ldr	r4, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_SMS;
 80020e8:	f023 0307 	bic.w	r3, r3, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80020ec:	4323      	orrs	r3, r4
  switch (sSlaveConfig->InputTrigger)
 80020ee:	2a50      	cmp	r2, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80020f0:	6083      	str	r3, [r0, #8]
  switch (sSlaveConfig->InputTrigger)
 80020f2:	d01c      	beq.n	800212e <TIM_SlaveTimer_SetConfig+0x5a>
 80020f4:	d803      	bhi.n	80020fe <TIM_SlaveTimer_SetConfig+0x2a>
 80020f6:	2a40      	cmp	r2, #64	; 0x40
 80020f8:	d00b      	beq.n	8002112 <TIM_SlaveTimer_SetConfig+0x3e>
}
 80020fa:	bc30      	pop	{r4, r5}
 80020fc:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80020fe:	2a60      	cmp	r2, #96	; 0x60
 8002100:	d025      	beq.n	800214e <TIM_SlaveTimer_SetConfig+0x7a>
 8002102:	2a70      	cmp	r2, #112	; 0x70
 8002104:	d1f9      	bne.n	80020fa <TIM_SlaveTimer_SetConfig+0x26>
      TIM_ETR_SetConfig(htim->Instance,
 8002106:	690b      	ldr	r3, [r1, #16]
 8002108:	688a      	ldr	r2, [r1, #8]
 800210a:	68c9      	ldr	r1, [r1, #12]
}
 800210c:	bc30      	pop	{r4, r5}
      TIM_ETR_SetConfig(htim->Instance,
 800210e:	f7ff bfd7 	b.w	80020c0 <TIM_ETR_SetConfig>
      tmpccer = htim->Instance->CCER;
 8002112:	6a02      	ldr	r2, [r0, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002114:	6a03      	ldr	r3, [r0, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
 8002116:	6909      	ldr	r1, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6203      	str	r3, [r0, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800211e:	6983      	ldr	r3, [r0, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002120:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4);
 8002124:	ea43 1301 	orr.w	r3, r3, r1, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 8002128:	6183      	str	r3, [r0, #24]
  TIMx->CCER = tmpccer;
 800212a:	6202      	str	r2, [r0, #32]
 800212c:	e7e5      	b.n	80020fa <TIM_SlaveTimer_SetConfig+0x26>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800212e:	688a      	ldr	r2, [r1, #8]
 8002130:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8002132:	6a01      	ldr	r1, [r0, #32]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002134:	6a04      	ldr	r4, [r0, #32]
 8002136:	f024 0401 	bic.w	r4, r4, #1
 800213a:	6204      	str	r4, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800213c:	6983      	ldr	r3, [r0, #24]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800213e:	f021 010a 	bic.w	r1, r1, #10
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002142:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4);
 8002146:	ea43 1305 	orr.w	r3, r3, r5, lsl #4
  tmpccer |= TIM_ICPolarity;
 800214a:	430a      	orrs	r2, r1
 800214c:	e7ec      	b.n	8002128 <TIM_SlaveTimer_SetConfig+0x54>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800214e:	688c      	ldr	r4, [r1, #8]
 8002150:	690d      	ldr	r5, [r1, #16]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002152:	6a01      	ldr	r1, [r0, #32]
 8002154:	f021 0110 	bic.w	r1, r1, #16
 8002158:	6201      	str	r1, [r0, #32]
  tmpccmr1 = TIMx->CCMR1;
 800215a:	6982      	ldr	r2, [r0, #24]
  tmpccer = TIMx->CCER;
 800215c:	6a03      	ldr	r3, [r0, #32]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800215e:	f422 4270 	bic.w	r2, r2, #61440	; 0xf000
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002162:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
  tmpccmr1 |= (TIM_ICFilter << 12);
 8002166:	ea42 3205 	orr.w	r2, r2, r5, lsl #12
  tmpccer |= (TIM_ICPolarity << 4);
 800216a:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
  TIMx->CCMR1 = tmpccmr1 ;
 800216e:	6182      	str	r2, [r0, #24]
  TIMx->CCER = tmpccer;
 8002170:	6203      	str	r3, [r0, #32]
}
 8002172:	e7c2      	b.n	80020fa <TIM_SlaveTimer_SetConfig+0x26>

08002174 <HAL_TIM_SlaveConfigSynchronization>:
{
 8002174:	b538      	push	{r3, r4, r5, lr}
  __HAL_LOCK(htim);
 8002176:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 800217a:	2b01      	cmp	r3, #1
{
 800217c:	4604      	mov	r4, r0
 800217e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(htim);
 8002182:	d015      	beq.n	80021b0 <HAL_TIM_SlaveConfigSynchronization+0x3c>
 8002184:	2501      	movs	r5, #1
 8002186:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
  htim->State = HAL_TIM_STATE_BUSY;
 800218a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  TIM_SlaveTimer_SetConfig(htim, sSlaveConfig);
 800218e:	f7ff ffa1 	bl	80020d4 <TIM_SlaveTimer_SetConfig>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 8002192:	6823      	ldr	r3, [r4, #0]
 8002194:	68da      	ldr	r2, [r3, #12]
 8002196:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800219a:	60da      	str	r2, [r3, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800219c:	68da      	ldr	r2, [r3, #12]
  __HAL_UNLOCK(htim);
 800219e:	2000      	movs	r0, #0
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80021a0:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80021a4:	60da      	str	r2, [r3, #12]
  htim->State = HAL_TIM_STATE_READY;
 80021a6:	f884 503d 	strb.w	r5, [r4, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80021aa:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  return HAL_OK;
 80021ae:	bd38      	pop	{r3, r4, r5, pc}
  __HAL_LOCK(htim);
 80021b0:	4618      	mov	r0, r3
    }
 80021b2:	bd38      	pop	{r3, r4, r5, pc}

080021b4 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_SYNCHRO_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80021b4:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80021b8:	2b01      	cmp	r3, #1
{
 80021ba:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(htim);
 80021bc:	d018      	beq.n	80021f0 <HAL_TIMEx_MasterConfigSynchronization+0x3c>

 /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80021be:	6802      	ldr	r2, [r0, #0]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80021c0:	4d0c      	ldr	r5, [pc, #48]	; (80021f4 <HAL_TIMEx_MasterConfigSynchronization+0x40>)
  tmpcr2 = htim->Instance->CR2;
 80021c2:	6853      	ldr	r3, [r2, #4]
  tmpsmcr = htim->Instance->SMCR;
 80021c4:	6894      	ldr	r4, [r2, #8]
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80021c6:	42aa      	cmp	r2, r5
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021c8:	bf02      	ittt	eq
 80021ca:	684d      	ldreq	r5, [r1, #4]
    tmpcr2 &= ~TIM_CR2_MMS2;
 80021cc:	f423 0370 	biceq.w	r3, r3, #15728640	; 0xf00000
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80021d0:	432b      	orreq	r3, r5
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021d2:	680d      	ldr	r5, [r1, #0]

  /* Reset the MSM Bit */
  tmpsmcr &= ~TIM_SMCR_MSM;
  /* Set master mode */
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021d4:	6889      	ldr	r1, [r1, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80021d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80021da:	432b      	orrs	r3, r5
  tmpsmcr &= ~TIM_SMCR_MSM;
 80021dc:	f024 0480 	bic.w	r4, r4, #128	; 0x80

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80021e0:	6053      	str	r3, [r2, #4]
  tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80021e2:	4321      	orrs	r1, r4

  /* Update TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  __HAL_UNLOCK(htim);
 80021e4:	2300      	movs	r3, #0
  htim->Instance->SMCR = tmpsmcr;
 80021e6:	6091      	str	r1, [r2, #8]
  __HAL_UNLOCK(htim);
 80021e8:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
 80021ec:	4618      	mov	r0, r3
 80021ee:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(htim);
 80021f0:	2002      	movs	r0, #2
}
 80021f2:	bd30      	pop	{r4, r5, pc}
 80021f4:	40012c00 	.word	0x40012c00

080021f8 <HAL_TIMEx_CommutationCallback>:
 80021f8:	4770      	bx	lr

080021fa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80021fa:	4770      	bx	lr

080021fc <UART_EndRxTransfer>:
{
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80021fc:	6803      	ldr	r3, [r0, #0]
 80021fe:	681a      	ldr	r2, [r3, #0]
 8002200:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002204:	601a      	str	r2, [r3, #0]
#endif
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002206:	689a      	ldr	r2, [r3, #8]
 8002208:	f022 0201 	bic.w	r2, r2, #1
 800220c:	609a      	str	r2, [r3, #8]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800220e:	2320      	movs	r3, #32
 8002210:	f880 3072 	strb.w	r3, [r0, #114]	; 0x72
  
  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8002214:	2300      	movs	r3, #0
 8002216:	6603      	str	r3, [r0, #96]	; 0x60
 8002218:	4770      	bx	lr
	...

0800221c <HAL_UART_Receive_IT>:
  if(huart->RxState == HAL_UART_STATE_READY)
 800221c:	f890 3072 	ldrb.w	r3, [r0, #114]	; 0x72
 8002220:	2b20      	cmp	r3, #32
 8002222:	d149      	bne.n	80022b8 <HAL_UART_Receive_IT+0x9c>
    if((pData == NULL ) || (Size == 0U))
 8002224:	2900      	cmp	r1, #0
 8002226:	d045      	beq.n	80022b4 <HAL_UART_Receive_IT+0x98>
 8002228:	2a00      	cmp	r2, #0
 800222a:	d043      	beq.n	80022b4 <HAL_UART_Receive_IT+0x98>
    __HAL_LOCK(huart);
 800222c:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8002230:	2b01      	cmp	r3, #1
 8002232:	d041      	beq.n	80022b8 <HAL_UART_Receive_IT+0x9c>
 8002234:	2301      	movs	r3, #1
 8002236:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    huart->RxISR       = NULL;
 800223a:	2300      	movs	r3, #0
 800223c:	6603      	str	r3, [r0, #96]	; 0x60
    UART_MASK_COMPUTATION(huart);
 800223e:	6883      	ldr	r3, [r0, #8]
    huart->pRxBuffPtr  = pData;
 8002240:	6541      	str	r1, [r0, #84]	; 0x54
    UART_MASK_COMPUTATION(huart);
 8002242:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    huart->RxXferSize  = Size;
 8002246:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
    huart->RxXferCount = Size;
 800224a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 800224e:	d121      	bne.n	8002294 <HAL_UART_Receive_IT+0x78>
 8002250:	6902      	ldr	r2, [r0, #16]
 8002252:	b9ea      	cbnz	r2, 8002290 <HAL_UART_Receive_IT+0x74>
 8002254:	f240 12ff 	movw	r2, #511	; 0x1ff
 8002258:	f8a0 205c 	strh.w	r2, [r0, #92]	; 0x5c
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800225c:	2200      	movs	r2, #0
 800225e:	6742      	str	r2, [r0, #116]	; 0x74
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002260:	2222      	movs	r2, #34	; 0x22
 8002262:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002266:	6802      	ldr	r2, [r0, #0]
 8002268:	6891      	ldr	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800226a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800226e:	f041 0101 	orr.w	r1, r1, #1
 8002272:	6091      	str	r1, [r2, #8]
      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002274:	d11c      	bne.n	80022b0 <HAL_UART_Receive_IT+0x94>
 8002276:	6903      	ldr	r3, [r0, #16]
 8002278:	b9d3      	cbnz	r3, 80022b0 <HAL_UART_Receive_IT+0x94>
        huart->RxISR = UART_RxISR_16BIT;
 800227a:	4b10      	ldr	r3, [pc, #64]	; (80022bc <HAL_UART_Receive_IT+0xa0>)
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800227c:	6811      	ldr	r1, [r2, #0]
        huart->RxISR = UART_RxISR_8BIT;
 800227e:	6603      	str	r3, [r0, #96]	; 0x60
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8002280:	f441 7190 	orr.w	r1, r1, #288	; 0x120
      __HAL_UNLOCK(huart);
 8002284:	2300      	movs	r3, #0
 8002286:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
      SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800228a:	6011      	str	r1, [r2, #0]
    return HAL_OK;
 800228c:	4618      	mov	r0, r3
 800228e:	4770      	bx	lr
    UART_MASK_COMPUTATION(huart);
 8002290:	22ff      	movs	r2, #255	; 0xff
 8002292:	e7e1      	b.n	8002258 <HAL_UART_Receive_IT+0x3c>
 8002294:	b923      	cbnz	r3, 80022a0 <HAL_UART_Receive_IT+0x84>
 8002296:	6902      	ldr	r2, [r0, #16]
 8002298:	2a00      	cmp	r2, #0
 800229a:	d0f9      	beq.n	8002290 <HAL_UART_Receive_IT+0x74>
 800229c:	227f      	movs	r2, #127	; 0x7f
 800229e:	e7db      	b.n	8002258 <HAL_UART_Receive_IT+0x3c>
 80022a0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80022a4:	d1da      	bne.n	800225c <HAL_UART_Receive_IT+0x40>
 80022a6:	6902      	ldr	r2, [r0, #16]
 80022a8:	2a00      	cmp	r2, #0
 80022aa:	d0f7      	beq.n	800229c <HAL_UART_Receive_IT+0x80>
 80022ac:	223f      	movs	r2, #63	; 0x3f
 80022ae:	e7d3      	b.n	8002258 <HAL_UART_Receive_IT+0x3c>
        huart->RxISR = UART_RxISR_8BIT;
 80022b0:	4b03      	ldr	r3, [pc, #12]	; (80022c0 <HAL_UART_Receive_IT+0xa4>)
 80022b2:	e7e3      	b.n	800227c <HAL_UART_Receive_IT+0x60>
      return HAL_ERROR;
 80022b4:	2001      	movs	r0, #1
 80022b6:	4770      	bx	lr
    return HAL_BUSY;
 80022b8:	2002      	movs	r0, #2
}
 80022ba:	4770      	bx	lr
 80022bc:	080023cd 	.word	0x080023cd
 80022c0:	08002377 	.word	0x08002377

080022c4 <HAL_UART_Transmit_DMA>:
{
 80022c4:	b538      	push	{r3, r4, r5, lr}
 80022c6:	4604      	mov	r4, r0
 80022c8:	4613      	mov	r3, r2
  if(huart->gState == HAL_UART_STATE_READY)
 80022ca:	f894 2071 	ldrb.w	r2, [r4, #113]	; 0x71
 80022ce:	2a20      	cmp	r2, #32
 80022d0:	d12b      	bne.n	800232a <HAL_UART_Transmit_DMA+0x66>
    if((pData == NULL ) || (Size == 0U))
 80022d2:	b341      	cbz	r1, 8002326 <HAL_UART_Transmit_DMA+0x62>
 80022d4:	b33b      	cbz	r3, 8002326 <HAL_UART_Transmit_DMA+0x62>
    __HAL_LOCK(huart);
 80022d6:	f894 2070 	ldrb.w	r2, [r4, #112]	; 0x70
 80022da:	2a01      	cmp	r2, #1
 80022dc:	d025      	beq.n	800232a <HAL_UART_Transmit_DMA+0x66>
 80022de:	2201      	movs	r2, #1
 80022e0:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80022e4:	6ea0      	ldr	r0, [r4, #104]	; 0x68
    huart->TxXferCount = Size;
 80022e6:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ea:	2500      	movs	r5, #0
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022ec:	2221      	movs	r2, #33	; 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80022ee:	6765      	str	r5, [r4, #116]	; 0x74
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80022f0:	f884 2071 	strb.w	r2, [r4, #113]	; 0x71
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80022f4:	4a0e      	ldr	r2, [pc, #56]	; (8002330 <HAL_UART_Transmit_DMA+0x6c>)
    huart->TxXferSize  = Size;
 80022f6:	f8a4 3050 	strh.w	r3, [r4, #80]	; 0x50
    huart->pTxBuffPtr  = pData;
 80022fa:	64e1      	str	r1, [r4, #76]	; 0x4c
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80022fc:	62c2      	str	r2, [r0, #44]	; 0x2c
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80022fe:	4a0d      	ldr	r2, [pc, #52]	; (8002334 <HAL_UART_Transmit_DMA+0x70>)
 8002300:	6302      	str	r2, [r0, #48]	; 0x30
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8002302:	4a0d      	ldr	r2, [pc, #52]	; (8002338 <HAL_UART_Transmit_DMA+0x74>)
 8002304:	6342      	str	r2, [r0, #52]	; 0x34
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 8002306:	6822      	ldr	r2, [r4, #0]
    huart->hdmatx->XferAbortCallback = NULL;
 8002308:	6385      	str	r5, [r0, #56]	; 0x38
    HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size);
 800230a:	3228      	adds	r2, #40	; 0x28
 800230c:	f7fe f9fe 	bl	800070c <HAL_DMA_Start_IT>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8002310:	6823      	ldr	r3, [r4, #0]
 8002312:	2240      	movs	r2, #64	; 0x40
 8002314:	621a      	str	r2, [r3, #32]
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8002316:	689a      	ldr	r2, [r3, #8]
    __HAL_UNLOCK(huart);
 8002318:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800231c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002320:	609a      	str	r2, [r3, #8]
    return HAL_OK;
 8002322:	4628      	mov	r0, r5
 8002324:	bd38      	pop	{r3, r4, r5, pc}
      return HAL_ERROR;
 8002326:	2001      	movs	r0, #1
 8002328:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_BUSY;
 800232a:	2002      	movs	r0, #2
}
 800232c:	bd38      	pop	{r3, r4, r5, pc}
 800232e:	bf00      	nop
 8002330:	0800233d 	.word	0x0800233d
 8002334:	0800236d 	.word	0x0800236d
 8002338:	08002423 	.word	0x08002423

0800233c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800233c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  /* DMA Normal mode */
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 800233e:	6803      	ldr	r3, [r0, #0]
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002340:	6a82      	ldr	r2, [r0, #40]	; 0x28
  if ( HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC) )
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f013 0320 	ands.w	r3, r3, #32
 8002348:	d10b      	bne.n	8002362 <UART_DMATransmitCplt+0x26>
  {  
    huart->TxXferCount = 0U;
 800234a:	f8a2 3052 	strh.w	r3, [r2, #82]	; 0x52
    
    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
    in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800234e:	6813      	ldr	r3, [r2, #0]
 8002350:	689a      	ldr	r2, [r3, #8]
 8002352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002356:	609a      	str	r2, [r3, #8]
    
    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002358:	681a      	ldr	r2, [r3, #0]
 800235a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800235e:	601a      	str	r2, [r3, #0]
 8002360:	bd08      	pop	{r3, pc}
  }
  /* DMA Circular mode */
  else
  {
    HAL_UART_TxCpltCallback(huart);
 8002362:	4610      	mov	r0, r2
 8002364:	f001 fe58 	bl	8004018 <HAL_UART_TxCpltCallback>
 8002368:	bd08      	pop	{r3, pc}

0800236a <HAL_UART_TxHalfCpltCallback>:
 800236a:	4770      	bx	lr

0800236c <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800236c:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
  
  HAL_UART_TxHalfCpltCallback(huart);
 800236e:	6a80      	ldr	r0, [r0, #40]	; 0x28
 8002370:	f7ff fffb 	bl	800236a <HAL_UART_TxHalfCpltCallback>
 8002374:	bd08      	pop	{r3, pc}

08002376 <UART_RxISR_8BIT>:
{
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002376:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 800237a:	2a22      	cmp	r2, #34	; 0x22
{
 800237c:	b538      	push	{r3, r4, r5, lr}
 800237e:	6802      	ldr	r2, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 8002380:	d11e      	bne.n	80023c0 <UART_RxISR_8BIT+0x4a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8002382:	8c92      	ldrh	r2, [r2, #36]	; 0x24
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 8002384:	6d44      	ldr	r4, [r0, #84]	; 0x54
  uint16_t uhMask = huart->Mask;
 8002386:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
    *huart->pRxBuffPtr++ = (uint8_t)(uhdata & (uint8_t)uhMask);
 800238a:	1c65      	adds	r5, r4, #1
 800238c:	400a      	ands	r2, r1
 800238e:	6545      	str	r5, [r0, #84]	; 0x54
 8002390:	7022      	strb	r2, [r4, #0]
    
    if(--huart->RxXferCount == 0)
 8002392:	f8b0 205a 	ldrh.w	r2, [r0, #90]	; 0x5a
 8002396:	3a01      	subs	r2, #1
 8002398:	b292      	uxth	r2, r2
 800239a:	f8a0 205a 	strh.w	r2, [r0, #90]	; 0x5a
 800239e:	b9a2      	cbnz	r2, 80023ca <UART_RxISR_8BIT+0x54>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023a0:	6801      	ldr	r1, [r0, #0]
 80023a2:	680c      	ldr	r4, [r1, #0]
 80023a4:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80023a8:	600c      	str	r4, [r1, #0]
#endif
      
      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023aa:	688c      	ldr	r4, [r1, #8]
 80023ac:	f024 0401 	bic.w	r4, r4, #1
 80023b0:	608c      	str	r4, [r1, #8]
     
      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80023b2:	2120      	movs	r1, #32
 80023b4:	f880 1072 	strb.w	r1, [r0, #114]	; 0x72
      
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80023b8:	6602      	str	r2, [r0, #96]	; 0x60
      
      HAL_UART_RxCpltCallback(huart);
 80023ba:	f001 fc99 	bl	8003cf0 <HAL_UART_RxCpltCallback>
 80023be:	bd38      	pop	{r3, r4, r5, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80023c0:	8b13      	ldrh	r3, [r2, #24]
 80023c2:	b29b      	uxth	r3, r3
 80023c4:	f043 0308 	orr.w	r3, r3, #8
 80023c8:	8313      	strh	r3, [r2, #24]
 80023ca:	bd38      	pop	{r3, r4, r5, pc}

080023cc <UART_RxISR_16BIT>:
  uint16_t* tmp;
  uint16_t uhMask = huart->Mask;
  uint16_t  uhdata;
  
  /* Check that a Rx process is ongoing */
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023cc:	f890 2072 	ldrb.w	r2, [r0, #114]	; 0x72
 80023d0:	2a22      	cmp	r2, #34	; 0x22
{
 80023d2:	b510      	push	{r4, lr}
 80023d4:	6802      	ldr	r2, [r0, #0]
  if(huart->RxState == HAL_UART_STATE_BUSY_RX)
 80023d6:	d11d      	bne.n	8002414 <UART_RxISR_16BIT+0x48>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80023d8:	8c94      	ldrh	r4, [r2, #36]	; 0x24
    tmp = (uint16_t*) huart->pRxBuffPtr ;
    *tmp = (uint16_t)(uhdata & uhMask);
 80023da:	f8b0 105c 	ldrh.w	r1, [r0, #92]	; 0x5c
 80023de:	400c      	ands	r4, r1
 80023e0:	6d41      	ldr	r1, [r0, #84]	; 0x54
 80023e2:	f821 4b02 	strh.w	r4, [r1], #2
    huart->pRxBuffPtr +=2;
 80023e6:	6541      	str	r1, [r0, #84]	; 0x54
    
    if(--huart->RxXferCount == 0)
 80023e8:	f8b0 105a 	ldrh.w	r1, [r0, #90]	; 0x5a
 80023ec:	3901      	subs	r1, #1
 80023ee:	b289      	uxth	r1, r1
 80023f0:	f8a0 105a 	strh.w	r1, [r0, #90]	; 0x5a
 80023f4:	b999      	cbnz	r1, 800241e <UART_RxISR_16BIT+0x52>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80023f6:	6814      	ldr	r4, [r2, #0]
 80023f8:	f424 7490 	bic.w	r4, r4, #288	; 0x120
 80023fc:	6014      	str	r4, [r2, #0]
#endif
      
      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80023fe:	6894      	ldr	r4, [r2, #8]
 8002400:	f024 0401 	bic.w	r4, r4, #1
 8002404:	6094      	str	r4, [r2, #8]
      
      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8002406:	2220      	movs	r2, #32
 8002408:	f880 2072 	strb.w	r2, [r0, #114]	; 0x72
      
      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800240c:	6601      	str	r1, [r0, #96]	; 0x60

      HAL_UART_RxCpltCallback(huart);
 800240e:	f001 fc6f 	bl	8003cf0 <HAL_UART_RxCpltCallback>
 8002412:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8002414:	8b13      	ldrh	r3, [r2, #24]
 8002416:	b29b      	uxth	r3, r3
 8002418:	f043 0308 	orr.w	r3, r3, #8
 800241c:	8313      	strh	r3, [r2, #24]
 800241e:	bd10      	pop	{r4, pc}

08002420 <HAL_UART_ErrorCallback>:
 8002420:	4770      	bx	lr

08002422 <UART_DMAError>:
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 8002422:	6a81      	ldr	r1, [r0, #40]	; 0x28
{
 8002424:	b508      	push	{r3, lr}
  if (  (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002426:	f891 3071 	ldrb.w	r3, [r1, #113]	; 0x71
 800242a:	2b21      	cmp	r3, #33	; 0x21
 800242c:	d10d      	bne.n	800244a <UART_DMAError+0x28>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) )
 800242e:	680b      	ldr	r3, [r1, #0]
 8002430:	689a      	ldr	r2, [r3, #8]
 8002432:	0612      	lsls	r2, r2, #24
 8002434:	d509      	bpl.n	800244a <UART_DMAError+0x28>
    huart->TxXferCount = 0U;
 8002436:	2200      	movs	r2, #0
 8002438:	f8a1 2052 	strh.w	r2, [r1, #82]	; 0x52
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800243c:	681a      	ldr	r2, [r3, #0]
 800243e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8002442:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 8002444:	2320      	movs	r3, #32
 8002446:	f881 3071 	strb.w	r3, [r1, #113]	; 0x71
  if (  (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800244a:	f891 3072 	ldrb.w	r3, [r1, #114]	; 0x72
 800244e:	2b22      	cmp	r3, #34	; 0x22
 8002450:	d109      	bne.n	8002466 <UART_DMAError+0x44>
      &&(HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) )
 8002452:	680b      	ldr	r3, [r1, #0]
 8002454:	689b      	ldr	r3, [r3, #8]
 8002456:	065b      	lsls	r3, r3, #25
 8002458:	d505      	bpl.n	8002466 <UART_DMAError+0x44>
    huart->RxXferCount = 0U;
 800245a:	2300      	movs	r3, #0
 800245c:	f8a1 305a 	strh.w	r3, [r1, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 8002460:	4608      	mov	r0, r1
 8002462:	f7ff fecb 	bl	80021fc <UART_EndRxTransfer>
  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8002466:	6f4b      	ldr	r3, [r1, #116]	; 0x74
 8002468:	f043 0310 	orr.w	r3, r3, #16
 800246c:	674b      	str	r3, [r1, #116]	; 0x74
  HAL_UART_ErrorCallback(huart);
 800246e:	4608      	mov	r0, r1
 8002470:	f7ff ffd6 	bl	8002420 <HAL_UART_ErrorCallback>
 8002474:	bd08      	pop	{r3, pc}
	...

08002478 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8002478:	6803      	ldr	r3, [r0, #0]
 800247a:	69da      	ldr	r2, [r3, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800247c:	6819      	ldr	r1, [r3, #0]
{
 800247e:	b570      	push	{r4, r5, r6, lr}
  if (errorflags == RESET)
 8002480:	0716      	lsls	r6, r2, #28
{
 8002482:	4604      	mov	r4, r0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002484:	689d      	ldr	r5, [r3, #8]
  if (errorflags == RESET)
 8002486:	d10a      	bne.n	800249e <HAL_UART_IRQHandler+0x26>
    if(((isrflags & USART_ISR_RXNE) != RESET)
 8002488:	0696      	lsls	r6, r2, #26
 800248a:	d565      	bpl.n	8002558 <HAL_UART_IRQHandler+0xe0>
       && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800248c:	068e      	lsls	r6, r1, #26
 800248e:	d563      	bpl.n	8002558 <HAL_UART_IRQHandler+0xe0>
      if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8002490:	6e03      	ldr	r3, [r0, #96]	; 0x60
 8002492:	2b00      	cmp	r3, #0
 8002494:	f000 8089 	beq.w	80025aa <HAL_UART_IRQHandler+0x132>
}
 8002498:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 800249c:	4718      	bx	r3
     && (   ((cr3its & USART_CR3_EIE) != RESET)
 800249e:	f015 0001 	ands.w	r0, r5, #1
 80024a2:	d102      	bne.n	80024aa <HAL_UART_IRQHandler+0x32>
         || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)) )
 80024a4:	f411 7f90 	tst.w	r1, #288	; 0x120
 80024a8:	d056      	beq.n	8002558 <HAL_UART_IRQHandler+0xe0>
    if(((isrflags & USART_ISR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80024aa:	07d5      	lsls	r5, r2, #31
 80024ac:	d507      	bpl.n	80024be <HAL_UART_IRQHandler+0x46>
 80024ae:	05ce      	lsls	r6, r1, #23
 80024b0:	d505      	bpl.n	80024be <HAL_UART_IRQHandler+0x46>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80024b2:	2501      	movs	r5, #1
 80024b4:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80024b6:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80024b8:	f045 0501 	orr.w	r5, r5, #1
 80024bc:	6765      	str	r5, [r4, #116]	; 0x74
    if(((isrflags & USART_ISR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024be:	0795      	lsls	r5, r2, #30
 80024c0:	d506      	bpl.n	80024d0 <HAL_UART_IRQHandler+0x58>
 80024c2:	b128      	cbz	r0, 80024d0 <HAL_UART_IRQHandler+0x58>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80024c4:	2502      	movs	r5, #2
 80024c6:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80024c8:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80024ca:	f045 0504 	orr.w	r5, r5, #4
 80024ce:	6765      	str	r5, [r4, #116]	; 0x74
    if(((isrflags & USART_ISR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80024d0:	0756      	lsls	r6, r2, #29
 80024d2:	d506      	bpl.n	80024e2 <HAL_UART_IRQHandler+0x6a>
 80024d4:	b128      	cbz	r0, 80024e2 <HAL_UART_IRQHandler+0x6a>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80024d6:	2504      	movs	r5, #4
 80024d8:	621d      	str	r5, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80024da:	6f65      	ldr	r5, [r4, #116]	; 0x74
 80024dc:	f045 0502 	orr.w	r5, r5, #2
 80024e0:	6765      	str	r5, [r4, #116]	; 0x74
    if(   ((isrflags & USART_ISR_ORE) != RESET)
 80024e2:	0715      	lsls	r5, r2, #28
 80024e4:	d507      	bpl.n	80024f6 <HAL_UART_IRQHandler+0x7e>
       &&(  ((cr1its & USART_CR1_RXNEIE) != RESET) ||
 80024e6:	068e      	lsls	r6, r1, #26
 80024e8:	d400      	bmi.n	80024ec <HAL_UART_IRQHandler+0x74>
 80024ea:	b120      	cbz	r0, 80024f6 <HAL_UART_IRQHandler+0x7e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80024ec:	2008      	movs	r0, #8
 80024ee:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80024f0:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80024f2:	4303      	orrs	r3, r0
 80024f4:	6763      	str	r3, [r4, #116]	; 0x74
    if(huart->ErrorCode != HAL_UART_ERROR_NONE)
 80024f6:	6f63      	ldr	r3, [r4, #116]	; 0x74
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d056      	beq.n	80025aa <HAL_UART_IRQHandler+0x132>
      if(((isrflags & USART_ISR_RXNE) != RESET)
 80024fc:	0695      	lsls	r5, r2, #26
 80024fe:	d505      	bpl.n	800250c <HAL_UART_IRQHandler+0x94>
         && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002500:	0688      	lsls	r0, r1, #26
 8002502:	d503      	bpl.n	800250c <HAL_UART_IRQHandler+0x94>
        if (huart->RxISR != NULL) {huart->RxISR(huart);}
 8002504:	6e23      	ldr	r3, [r4, #96]	; 0x60
 8002506:	b10b      	cbz	r3, 800250c <HAL_UART_IRQHandler+0x94>
 8002508:	4620      	mov	r0, r4
 800250a:	4798      	blx	r3
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 800250c:	6f63      	ldr	r3, [r4, #116]	; 0x74
 800250e:	0719      	lsls	r1, r3, #28
        UART_EndRxTransfer(huart);
 8002510:	4620      	mov	r0, r4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002512:	d404      	bmi.n	800251e <HAL_UART_IRQHandler+0xa6>
          (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)))
 8002514:	6823      	ldr	r3, [r4, #0]
 8002516:	689d      	ldr	r5, [r3, #8]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) ||
 8002518:	f015 0540 	ands.w	r5, r5, #64	; 0x40
 800251c:	d018      	beq.n	8002550 <HAL_UART_IRQHandler+0xd8>
        UART_EndRxTransfer(huart);
 800251e:	f7ff fe6d 	bl	80021fc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002522:	6823      	ldr	r3, [r4, #0]
 8002524:	689a      	ldr	r2, [r3, #8]
 8002526:	0652      	lsls	r2, r2, #25
 8002528:	d50e      	bpl.n	8002548 <HAL_UART_IRQHandler+0xd0>
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800252a:	689a      	ldr	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 800252c:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800252e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002532:	609a      	str	r2, [r3, #8]
          if(huart->hdmarx != NULL)
 8002534:	b140      	cbz	r0, 8002548 <HAL_UART_IRQHandler+0xd0>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002536:	4b1d      	ldr	r3, [pc, #116]	; (80025ac <HAL_UART_IRQHandler+0x134>)
 8002538:	6383      	str	r3, [r0, #56]	; 0x38
            if(HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800253a:	f7fe f925 	bl	8000788 <HAL_DMA_Abort_IT>
 800253e:	2800      	cmp	r0, #0
 8002540:	d033      	beq.n	80025aa <HAL_UART_IRQHandler+0x132>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002542:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8002544:	6b83      	ldr	r3, [r0, #56]	; 0x38
 8002546:	e7a7      	b.n	8002498 <HAL_UART_IRQHandler+0x20>
            HAL_UART_ErrorCallback(huart);
 8002548:	4620      	mov	r0, r4
 800254a:	f7ff ff69 	bl	8002420 <HAL_UART_ErrorCallback>
 800254e:	bd70      	pop	{r4, r5, r6, pc}
        HAL_UART_ErrorCallback(huart);
 8002550:	f7ff ff66 	bl	8002420 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002554:	6765      	str	r5, [r4, #116]	; 0x74
 8002556:	bd70      	pop	{r4, r5, r6, pc}
  if(((isrflags & USART_ISR_WUF) != RESET) && ((cr3its & USART_CR3_WUFIE) != RESET))
 8002558:	02d6      	lsls	r6, r2, #11
 800255a:	d50e      	bpl.n	800257a <HAL_UART_IRQHandler+0x102>
 800255c:	0268      	lsls	r0, r5, #9
 800255e:	d50c      	bpl.n	800257a <HAL_UART_IRQHandler+0x102>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8002560:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002564:	621a      	str	r2, [r3, #32]
    huart->gState  = HAL_UART_STATE_READY;
 8002566:	2320      	movs	r3, #32
 8002568:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
    HAL_UARTEx_WakeupCallback(huart);
 800256c:	4620      	mov	r0, r4
    huart->RxState = HAL_UART_STATE_READY;
 800256e:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
}
 8002572:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    HAL_UARTEx_WakeupCallback(huart);
 8002576:	f000 ba30 	b.w	80029da <HAL_UARTEx_WakeupCallback>
  if(((isrflags & USART_ISR_TXE) != RESET)
 800257a:	0616      	lsls	r6, r2, #24
 800257c:	d505      	bpl.n	800258a <HAL_UART_IRQHandler+0x112>
     && ((cr1its & USART_CR1_TXEIE) != RESET))
 800257e:	060d      	lsls	r5, r1, #24
 8002580:	d503      	bpl.n	800258a <HAL_UART_IRQHandler+0x112>
    if (huart->TxISR != NULL) {huart->TxISR(huart);}
 8002582:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8002584:	b18b      	cbz	r3, 80025aa <HAL_UART_IRQHandler+0x132>
 8002586:	4620      	mov	r0, r4
 8002588:	e786      	b.n	8002498 <HAL_UART_IRQHandler+0x20>
  if(((isrflags & USART_ISR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800258a:	0650      	lsls	r0, r2, #25
 800258c:	d50d      	bpl.n	80025aa <HAL_UART_IRQHandler+0x132>
 800258e:	064a      	lsls	r2, r1, #25
 8002590:	d50b      	bpl.n	80025aa <HAL_UART_IRQHandler+0x132>
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8002592:	681a      	ldr	r2, [r3, #0]
 8002594:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002598:	601a      	str	r2, [r3, #0]
  huart->gState = HAL_UART_STATE_READY;
 800259a:	2320      	movs	r3, #32
 800259c:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  huart->TxISR = NULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	6663      	str	r3, [r4, #100]	; 0x64
  HAL_UART_TxCpltCallback(huart);
 80025a4:	4620      	mov	r0, r4
 80025a6:	f001 fd37 	bl	8004018 <HAL_UART_TxCpltCallback>
 80025aa:	bd70      	pop	{r4, r5, r6, pc}
 80025ac:	080025b1 	.word	0x080025b1

080025b0 <UART_DMAAbortOnError>:
{
 80025b0:	b508      	push	{r3, lr}
  UART_HandleTypeDef* huart = (UART_HandleTypeDef*)(hdma->Parent);
 80025b2:	6a80      	ldr	r0, [r0, #40]	; 0x28
  huart->RxXferCount = 0U;
 80025b4:	2300      	movs	r3, #0
 80025b6:	f8a0 305a 	strh.w	r3, [r0, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80025ba:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
  HAL_UART_ErrorCallback(huart);
 80025be:	f7ff ff2f 	bl	8002420 <HAL_UART_ErrorCallback>
 80025c2:	bd08      	pop	{r3, pc}

080025c4 <UART_SetConfig>:
  if(UART_INSTANCE_LOWPOWER(huart))
 80025c4:	6802      	ldr	r2, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025c6:	69c1      	ldr	r1, [r0, #28]
{
 80025c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80025ca:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025cc:	6883      	ldr	r3, [r0, #8]
 80025ce:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025d0:	6815      	ldr	r5, [r2, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025d2:	4303      	orrs	r3, r0
 80025d4:	6960      	ldr	r0, [r4, #20]
 80025d6:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025d8:	4882      	ldr	r0, [pc, #520]	; (80027e4 <UART_SetConfig+0x220>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80025da:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80025dc:	4028      	ands	r0, r5
 80025de:	4303      	orrs	r3, r0
 80025e0:	6013      	str	r3, [r2, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80025e2:	6853      	ldr	r3, [r2, #4]
 80025e4:	68e0      	ldr	r0, [r4, #12]
 80025e6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80025ea:	4303      	orrs	r3, r0
 80025ec:	6053      	str	r3, [r2, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025ee:	4b7e      	ldr	r3, [pc, #504]	; (80027e8 <UART_SetConfig+0x224>)
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80025f0:	69a0      	ldr	r0, [r4, #24]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80025f2:	429a      	cmp	r2, r3
    tmpreg |= huart->Init.OneBitSampling;
 80025f4:	bf1c      	itt	ne
 80025f6:	6a23      	ldrne	r3, [r4, #32]
 80025f8:	4318      	orrne	r0, r3
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80025fa:	6893      	ldr	r3, [r2, #8]
 80025fc:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8002600:	4303      	orrs	r3, r0
 8002602:	6093      	str	r3, [r2, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002604:	4b79      	ldr	r3, [pc, #484]	; (80027ec <UART_SetConfig+0x228>)
 8002606:	429a      	cmp	r2, r3
 8002608:	d114      	bne.n	8002634 <UART_SetConfig+0x70>
 800260a:	f503 4358 	add.w	r3, r3, #55296	; 0xd800
 800260e:	4a78      	ldr	r2, [pc, #480]	; (80027f0 <UART_SetConfig+0x22c>)
 8002610:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002614:	f003 0303 	and.w	r3, r3, #3
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002618:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 800261c:	5cd3      	ldrb	r3, [r2, r3]
 800261e:	f040 80aa 	bne.w	8002776 <UART_SetConfig+0x1b2>
    switch (clocksource)
 8002622:	2b08      	cmp	r3, #8
 8002624:	d820      	bhi.n	8002668 <UART_SetConfig+0xa4>
 8002626:	e8df f003 	tbb	[pc, r3]
 800262a:	8f77      	.short	0x8f77
 800262c:	1f9b1f92 	.word	0x1f9b1f92
 8002630:	1f1f      	.short	0x1f1f
 8002632:	9e          	.byte	0x9e
 8002633:	00          	.byte	0x00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002634:	4b6f      	ldr	r3, [pc, #444]	; (80027f4 <UART_SetConfig+0x230>)
 8002636:	429a      	cmp	r2, r3
 8002638:	d107      	bne.n	800264a <UART_SetConfig+0x86>
 800263a:	f503 33e6 	add.w	r3, r3, #117760	; 0x1cc00
 800263e:	4a6e      	ldr	r2, [pc, #440]	; (80027f8 <UART_SetConfig+0x234>)
 8002640:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002644:	f003 030c 	and.w	r3, r3, #12
 8002648:	e7e6      	b.n	8002618 <UART_SetConfig+0x54>
 800264a:	4b67      	ldr	r3, [pc, #412]	; (80027e8 <UART_SetConfig+0x224>)
 800264c:	429a      	cmp	r2, r3
 800264e:	f040 80c2 	bne.w	80027d6 <UART_SetConfig+0x212>
 8002652:	f503 33c8 	add.w	r3, r3, #102400	; 0x19000
 8002656:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
 800265a:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 800265e:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002662:	d02a      	beq.n	80026ba <UART_SetConfig+0xf6>
 8002664:	d806      	bhi.n	8002674 <UART_SetConfig+0xb0>
 8002666:	b315      	cbz	r5, 80026ae <UART_SetConfig+0xea>
        ret = HAL_ERROR;
 8002668:	2201      	movs	r2, #1
  huart->RxISR = NULL;
 800266a:	2300      	movs	r3, #0
 800266c:	6623      	str	r3, [r4, #96]	; 0x60
  huart->TxISR = NULL;
 800266e:	6663      	str	r3, [r4, #100]	; 0x64
}
 8002670:	4610      	mov	r0, r2
 8002672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002674:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8002678:	d006      	beq.n	8002688 <UART_SetConfig+0xc4>
 800267a:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 800267e:	d1f3      	bne.n	8002668 <UART_SetConfig+0xa4>
      lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002680:	f44f 4000 	mov.w	r0, #32768	; 0x8000
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002684:	2508      	movs	r5, #8
 8002686:	e001      	b.n	800268c <UART_SetConfig+0xc8>
      lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002688:	485c      	ldr	r0, [pc, #368]	; (80027fc <UART_SetConfig+0x238>)
  UART_GETCLOCKSOURCE(huart, clocksource);
 800268a:	2502      	movs	r5, #2
      if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
 800268c:	6862      	ldr	r2, [r4, #4]
 800268e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 8002692:	4283      	cmp	r3, r0
 8002694:	d8e8      	bhi.n	8002668 <UART_SetConfig+0xa4>
 8002696:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 800269a:	d8e5      	bhi.n	8002668 <UART_SetConfig+0xa4>
        switch (clocksource)
 800269c:	2d08      	cmp	r5, #8
 800269e:	d838      	bhi.n	8002712 <UART_SetConfig+0x14e>
 80026a0:	e8df f005 	tbb	[pc, r5]
 80026a4:	3726370f 	.word	0x3726370f
 80026a8:	3737372e 	.word	0x3737372e
 80026ac:	31          	.byte	0x31
 80026ad:	00          	.byte	0x00
      lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80026ae:	f7ff fa13 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 80026b2:	2800      	cmp	r0, #0
 80026b4:	d1ea      	bne.n	800268c <UART_SetConfig+0xc8>
 80026b6:	4602      	mov	r2, r0
 80026b8:	e7d7      	b.n	800266a <UART_SetConfig+0xa6>
      lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 80026ba:	f7fe fe8d 	bl	80013d8 <HAL_RCC_GetSysClockFreq>
      break;
 80026be:	2504      	movs	r5, #4
 80026c0:	e7f7      	b.n	80026b2 <UART_SetConfig+0xee>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026c2:	f7ff fa09 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80026c6:	6862      	ldr	r2, [r4, #4]
 80026c8:	f44f 7180 	mov.w	r1, #256	; 0x100
 80026cc:	0856      	lsrs	r6, r2, #1
 80026ce:	2700      	movs	r7, #0
 80026d0:	fbe1 6700 	umlal	r6, r7, r1, r0
 80026d4:	2300      	movs	r3, #0
 80026d6:	4630      	mov	r0, r6
 80026d8:	4639      	mov	r1, r7
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80026da:	f7fd fd77 	bl	80001cc <__aeabi_uldivmod>
          break;
 80026de:	2200      	movs	r2, #0
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80026e0:	4b47      	ldr	r3, [pc, #284]	; (8002800 <UART_SetConfig+0x23c>)
 80026e2:	f5a0 7140 	sub.w	r1, r0, #768	; 0x300
 80026e6:	4299      	cmp	r1, r3
 80026e8:	d8be      	bhi.n	8002668 <UART_SetConfig+0xa4>
          huart->Instance->BRR = usartdiv;
 80026ea:	6823      	ldr	r3, [r4, #0]
 80026ec:	60d8      	str	r0, [r3, #12]
 80026ee:	e7bc      	b.n	800266a <UART_SetConfig+0xa6>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 80026f0:	4844      	ldr	r0, [pc, #272]	; (8002804 <UART_SetConfig+0x240>)
 80026f2:	0855      	lsrs	r5, r2, #1
 80026f4:	2300      	movs	r3, #0
 80026f6:	2100      	movs	r1, #0
 80026f8:	1940      	adds	r0, r0, r5
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80026fa:	f141 0100 	adc.w	r1, r1, #0
 80026fe:	e7ec      	b.n	80026da <UART_SetConfig+0x116>
          usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002700:	f7fe fe6a 	bl	80013d8 <HAL_RCC_GetSysClockFreq>
 8002704:	e7df      	b.n	80026c6 <UART_SetConfig+0x102>
          usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8002706:	0850      	lsrs	r0, r2, #1
 8002708:	2100      	movs	r1, #0
 800270a:	2300      	movs	r3, #0
 800270c:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8002710:	e7f3      	b.n	80026fa <UART_SetConfig+0x136>
          ret = HAL_ERROR;
 8002712:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002714:	2000      	movs	r0, #0
 8002716:	e7e3      	b.n	80026e0 <UART_SetConfig+0x11c>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002718:	f7ff f9de 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 800271c:	6861      	ldr	r1, [r4, #4]
 800271e:	084a      	lsrs	r2, r1, #1
 8002720:	eb02 0340 	add.w	r3, r2, r0, lsl #1
 8002724:	fbb3 f3f1 	udiv	r3, r3, r1
 8002728:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 800272a:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800272c:	f1a3 0010 	sub.w	r0, r3, #16
 8002730:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8002734:	4288      	cmp	r0, r1
 8002736:	d897      	bhi.n	8002668 <UART_SetConfig+0xa4>
      brrtemp = usartdiv & 0xFFF0U;
 8002738:	f023 010f 	bic.w	r1, r3, #15
      huart->Instance->BRR = brrtemp;
 800273c:	6820      	ldr	r0, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800273e:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8002742:	430b      	orrs	r3, r1
 8002744:	60c3      	str	r3, [r0, #12]
 8002746:	e790      	b.n	800266a <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002748:	f7ff f9d6 	bl	8001af8 <HAL_RCC_GetPCLK2Freq>
 800274c:	e7e6      	b.n	800271c <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800274e:	6860      	ldr	r0, [r4, #4]
 8002750:	0843      	lsrs	r3, r0, #1
 8002752:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002756:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800275a:	fbb3 f3f0 	udiv	r3, r3, r0
 800275e:	e7e3      	b.n	8002728 <UART_SetConfig+0x164>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002760:	f7fe fe3a 	bl	80013d8 <HAL_RCC_GetSysClockFreq>
 8002764:	e7da      	b.n	800271c <UART_SetConfig+0x158>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8002766:	6860      	ldr	r0, [r4, #4]
 8002768:	0843      	lsrs	r3, r0, #1
 800276a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 800276e:	e7f4      	b.n	800275a <UART_SetConfig+0x196>
      ret = HAL_ERROR;
 8002770:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 8002772:	2300      	movs	r3, #0
 8002774:	e7da      	b.n	800272c <UART_SetConfig+0x168>
    switch (clocksource)
 8002776:	2b08      	cmp	r3, #8
 8002778:	d830      	bhi.n	80027dc <UART_SetConfig+0x218>
 800277a:	e8df f003 	tbb	[pc, r3]
 800277e:	1805      	.short	0x1805
 8002780:	2f242f1b 	.word	0x2f242f1b
 8002784:	2f2f      	.short	0x2f2f
 8002786:	27          	.byte	0x27
 8002787:	00          	.byte	0x00
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8002788:	f7ff f9a6 	bl	8001ad8 <HAL_RCC_GetPCLK1Freq>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800278c:	6862      	ldr	r2, [r4, #4]
 800278e:	eb00 0352 	add.w	r3, r0, r2, lsr #1
 8002792:	fbb3 f3f2 	udiv	r3, r3, r2
 8002796:	b29b      	uxth	r3, r3
  HAL_StatusTypeDef ret               = HAL_OK;
 8002798:	2200      	movs	r2, #0
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800279a:	f1a3 0010 	sub.w	r0, r3, #16
 800279e:	f64f 71ef 	movw	r1, #65519	; 0xffef
 80027a2:	4288      	cmp	r0, r1
 80027a4:	f63f af60 	bhi.w	8002668 <UART_SetConfig+0xa4>
      huart->Instance->BRR = usartdiv;
 80027a8:	6821      	ldr	r1, [r4, #0]
 80027aa:	60cb      	str	r3, [r1, #12]
 80027ac:	e75d      	b.n	800266a <UART_SetConfig+0xa6>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 80027ae:	f7ff f9a3 	bl	8001af8 <HAL_RCC_GetPCLK2Freq>
 80027b2:	e7eb      	b.n	800278c <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 80027b4:	6860      	ldr	r0, [r4, #4]
 80027b6:	0843      	lsrs	r3, r0, #1
 80027b8:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 80027bc:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80027c0:	fbb3 f3f0 	udiv	r3, r3, r0
 80027c4:	e7e7      	b.n	8002796 <UART_SetConfig+0x1d2>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80027c6:	f7fe fe07 	bl	80013d8 <HAL_RCC_GetSysClockFreq>
 80027ca:	e7df      	b.n	800278c <UART_SetConfig+0x1c8>
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80027cc:	6860      	ldr	r0, [r4, #4]
 80027ce:	0843      	lsrs	r3, r0, #1
 80027d0:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
 80027d4:	e7f4      	b.n	80027c0 <UART_SetConfig+0x1fc>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027d6:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
 80027da:	d0c9      	beq.n	8002770 <UART_SetConfig+0x1ac>
      ret = HAL_ERROR;
 80027dc:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80027de:	2300      	movs	r3, #0
 80027e0:	e7db      	b.n	800279a <UART_SetConfig+0x1d6>
 80027e2:	bf00      	nop
 80027e4:	efff69f3 	.word	0xefff69f3
 80027e8:	40008000 	.word	0x40008000
 80027ec:	40013800 	.word	0x40013800
 80027f0:	080043ac 	.word	0x080043ac
 80027f4:	40004400 	.word	0x40004400
 80027f8:	080043b0 	.word	0x080043b0
 80027fc:	00f42400 	.word	0x00f42400
 8002800:	000ffcff 	.word	0x000ffcff
 8002804:	f4240000 	.word	0xf4240000

08002808 <UART_AdvFeatureConfig>:
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8002808:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800280a:	07da      	lsls	r2, r3, #31
{
 800280c:	b510      	push	{r4, lr}
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800280e:	d506      	bpl.n	800281e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002810:	6801      	ldr	r1, [r0, #0]
 8002812:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8002814:	684a      	ldr	r2, [r1, #4]
 8002816:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 800281a:	4322      	orrs	r2, r4
 800281c:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800281e:	079c      	lsls	r4, r3, #30
 8002820:	d506      	bpl.n	8002830 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002822:	6801      	ldr	r1, [r0, #0]
 8002824:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8002826:	684a      	ldr	r2, [r1, #4]
 8002828:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800282c:	4322      	orrs	r2, r4
 800282e:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002830:	0759      	lsls	r1, r3, #29
 8002832:	d506      	bpl.n	8002842 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002834:	6801      	ldr	r1, [r0, #0]
 8002836:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8002838:	684a      	ldr	r2, [r1, #4]
 800283a:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800283e:	4322      	orrs	r2, r4
 8002840:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002842:	071a      	lsls	r2, r3, #28
 8002844:	d506      	bpl.n	8002854 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002846:	6801      	ldr	r1, [r0, #0]
 8002848:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800284a:	684a      	ldr	r2, [r1, #4]
 800284c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002850:	4322      	orrs	r2, r4
 8002852:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002854:	06dc      	lsls	r4, r3, #27
 8002856:	d506      	bpl.n	8002866 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002858:	6801      	ldr	r1, [r0, #0]
 800285a:	6b84      	ldr	r4, [r0, #56]	; 0x38
 800285c:	688a      	ldr	r2, [r1, #8]
 800285e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8002862:	4322      	orrs	r2, r4
 8002864:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002866:	0699      	lsls	r1, r3, #26
 8002868:	d506      	bpl.n	8002878 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800286a:	6801      	ldr	r1, [r0, #0]
 800286c:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 800286e:	688a      	ldr	r2, [r1, #8]
 8002870:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002874:	4322      	orrs	r2, r4
 8002876:	608a      	str	r2, [r1, #8]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002878:	065a      	lsls	r2, r3, #25
 800287a:	d50f      	bpl.n	800289c <UART_AdvFeatureConfig+0x94>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800287c:	6801      	ldr	r1, [r0, #0]
 800287e:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8002880:	684a      	ldr	r2, [r1, #4]
 8002882:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8002886:	4322      	orrs	r2, r4
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002888:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800288c:	604a      	str	r2, [r1, #4]
    if(huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800288e:	d105      	bne.n	800289c <UART_AdvFeatureConfig+0x94>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002890:	684a      	ldr	r2, [r1, #4]
 8002892:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8002894:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8002898:	4322      	orrs	r2, r4
 800289a:	604a      	str	r2, [r1, #4]
  if(HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800289c:	061b      	lsls	r3, r3, #24
 800289e:	d506      	bpl.n	80028ae <UART_AdvFeatureConfig+0xa6>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80028a0:	6802      	ldr	r2, [r0, #0]
 80028a2:	6c81      	ldr	r1, [r0, #72]	; 0x48
 80028a4:	6853      	ldr	r3, [r2, #4]
 80028a6:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 80028aa:	430b      	orrs	r3, r1
 80028ac:	6053      	str	r3, [r2, #4]
 80028ae:	bd10      	pop	{r4, pc}

080028b0 <UART_WaitOnFlagUntilTimeout>:
{
 80028b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80028b4:	9d06      	ldr	r5, [sp, #24]
 80028b6:	4604      	mov	r4, r0
 80028b8:	460f      	mov	r7, r1
 80028ba:	4616      	mov	r6, r2
 80028bc:	4698      	mov	r8, r3
  while((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80028be:	6821      	ldr	r1, [r4, #0]
 80028c0:	69ca      	ldr	r2, [r1, #28]
 80028c2:	ea37 0302 	bics.w	r3, r7, r2
 80028c6:	bf0c      	ite	eq
 80028c8:	2201      	moveq	r2, #1
 80028ca:	2200      	movne	r2, #0
 80028cc:	42b2      	cmp	r2, r6
 80028ce:	d002      	beq.n	80028d6 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 80028d0:	2000      	movs	r0, #0
}
 80028d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if(Timeout != HAL_MAX_DELAY)
 80028d6:	1c6b      	adds	r3, r5, #1
 80028d8:	d0f2      	beq.n	80028c0 <UART_WaitOnFlagUntilTimeout+0x10>
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 80028da:	b99d      	cbnz	r5, 8002904 <UART_WaitOnFlagUntilTimeout+0x54>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80028dc:	6823      	ldr	r3, [r4, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80028e4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80028e6:	689a      	ldr	r2, [r3, #8]
 80028e8:	f022 0201 	bic.w	r2, r2, #1
 80028ec:	609a      	str	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80028ee:	2320      	movs	r3, #32
 80028f0:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
        huart->RxState = HAL_UART_STATE_READY;
 80028f4:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
        __HAL_UNLOCK(huart);
 80028f8:	2300      	movs	r3, #0
 80028fa:	f884 3070 	strb.w	r3, [r4, #112]	; 0x70
 80028fe:	2003      	movs	r0, #3
 8002900:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if((Timeout == 0U) || ((HAL_GetTick()-Tickstart) > Timeout))
 8002904:	f7fd fe12 	bl	800052c <HAL_GetTick>
 8002908:	eba0 0008 	sub.w	r0, r0, r8
 800290c:	4285      	cmp	r5, r0
 800290e:	d2d6      	bcs.n	80028be <UART_WaitOnFlagUntilTimeout+0xe>
 8002910:	e7e4      	b.n	80028dc <UART_WaitOnFlagUntilTimeout+0x2c>

08002912 <UART_CheckIdleState>:
{
 8002912:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8002914:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002916:	2600      	movs	r6, #0
 8002918:	6746      	str	r6, [r0, #116]	; 0x74
  tickstart = HAL_GetTick();
 800291a:	f7fd fe07 	bl	800052c <HAL_GetTick>
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800291e:	6823      	ldr	r3, [r4, #0]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	071a      	lsls	r2, r3, #28
  tickstart = HAL_GetTick();
 8002924:	4605      	mov	r5, r0
  if((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002926:	d417      	bmi.n	8002958 <UART_CheckIdleState+0x46>
  if((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002928:	6823      	ldr	r3, [r4, #0]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	075b      	lsls	r3, r3, #29
 800292e:	d50a      	bpl.n	8002946 <UART_CheckIdleState+0x34>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002930:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002934:	9300      	str	r3, [sp, #0]
 8002936:	2200      	movs	r2, #0
 8002938:	462b      	mov	r3, r5
 800293a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800293e:	4620      	mov	r0, r4
 8002940:	f7ff ffb6 	bl	80028b0 <UART_WaitOnFlagUntilTimeout>
 8002944:	b9a0      	cbnz	r0, 8002970 <UART_CheckIdleState+0x5e>
  huart->gState= HAL_UART_STATE_READY;
 8002946:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8002948:	2000      	movs	r0, #0
  huart->gState= HAL_UART_STATE_READY;
 800294a:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UNLOCK(huart);
 800294e:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState= HAL_UART_STATE_READY;
 8002952:	f884 3072 	strb.w	r3, [r4, #114]	; 0x72
  return HAL_OK;
 8002956:	e00c      	b.n	8002972 <UART_CheckIdleState+0x60>
    if(UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002958:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	4632      	mov	r2, r6
 8002960:	4603      	mov	r3, r0
 8002962:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002966:	4620      	mov	r0, r4
 8002968:	f7ff ffa2 	bl	80028b0 <UART_WaitOnFlagUntilTimeout>
 800296c:	2800      	cmp	r0, #0
 800296e:	d0db      	beq.n	8002928 <UART_CheckIdleState+0x16>
      return HAL_TIMEOUT;
 8002970:	2003      	movs	r0, #3
}
 8002972:	b002      	add	sp, #8
 8002974:	bd70      	pop	{r4, r5, r6, pc}

08002976 <HAL_UART_Init>:
{
 8002976:	b510      	push	{r4, lr}
  if(huart == NULL)
 8002978:	4604      	mov	r4, r0
 800297a:	b360      	cbz	r0, 80029d6 <HAL_UART_Init+0x60>
  if(huart->gState == HAL_UART_STATE_RESET)
 800297c:	f890 3071 	ldrb.w	r3, [r0, #113]	; 0x71
 8002980:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8002984:	b91b      	cbnz	r3, 800298e <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 8002986:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 800298a:	f001 fa49 	bl	8003e20 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 800298e:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 8002990:	2324      	movs	r3, #36	; 0x24
 8002992:	f884 3071 	strb.w	r3, [r4, #113]	; 0x71
  __HAL_UART_DISABLE(huart);
 8002996:	6813      	ldr	r3, [r2, #0]
 8002998:	f023 0301 	bic.w	r3, r3, #1
 800299c:	6013      	str	r3, [r2, #0]
  if (UART_SetConfig(huart) == HAL_ERROR)
 800299e:	4620      	mov	r0, r4
 80029a0:	f7ff fe10 	bl	80025c4 <UART_SetConfig>
 80029a4:	2801      	cmp	r0, #1
 80029a6:	d016      	beq.n	80029d6 <HAL_UART_Init+0x60>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80029a8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80029aa:	b113      	cbz	r3, 80029b2 <HAL_UART_Init+0x3c>
    UART_AdvFeatureConfig(huart);
 80029ac:	4620      	mov	r0, r4
 80029ae:	f7ff ff2b 	bl	8002808 <UART_AdvFeatureConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80029b2:	6823      	ldr	r3, [r4, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80029ba:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80029bc:	689a      	ldr	r2, [r3, #8]
 80029be:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80029c2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 80029c4:	681a      	ldr	r2, [r3, #0]
 80029c6:	f042 0201 	orr.w	r2, r2, #1
  return (UART_CheckIdleState(huart));
 80029ca:	4620      	mov	r0, r4
  __HAL_UART_ENABLE(huart);
 80029cc:	601a      	str	r2, [r3, #0]
}
 80029ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  return (UART_CheckIdleState(huart));
 80029d2:	f7ff bf9e 	b.w	8002912 <UART_CheckIdleState>
}
 80029d6:	2001      	movs	r0, #1
 80029d8:	bd10      	pop	{r4, pc}

080029da <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
 __weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80029da:	4770      	bx	lr

080029dc <USB_CoreInit>:
  * @param  cfg : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 80029dc:	b084      	sub	sp, #16
 80029de:	a801      	add	r0, sp, #4
 80029e0:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(cfg);

  return HAL_OK;
}
 80029e4:	b004      	add	sp, #16
 80029e6:	2000      	movs	r0, #0
 80029e8:	4770      	bx	lr

080029ea <USB_EnableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Set interrupt mask */
  USBx->CNTR |= winterruptmask;
 80029ea:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 80029ee:	b29b      	uxth	r3, r3
 80029f0:	f443 433d 	orr.w	r3, r3, #48384	; 0xbd00
 80029f4:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 80029f8:	2000      	movs	r0, #0
 80029fa:	4770      	bx	lr

080029fc <USB_DisableGlobalInt>:
  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM | USB_CNTR_SUSPM | USB_CNTR_ERRM \
    | USB_CNTR_ESOFM | USB_CNTR_RESETM;
  
  /* Clear interrupt mask */
  USBx->CNTR &= ~winterruptmask;
 80029fc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
 8002a00:	f423 5374 	bic.w	r3, r3, #15616	; 0x3d00
 8002a04:	045b      	lsls	r3, r3, #17
 8002a06:	0c5b      	lsrs	r3, r3, #17
 8002a08:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  
  return HAL_OK;
}
 8002a0c:	2000      	movs	r0, #0
 8002a0e:	4770      	bx	lr

08002a10 <USB_SetCurrentMode>:
  /* Prevent unused argument(s) compilation warning */
  UNUSED(USBx);
  UNUSED(mode);

  return HAL_OK;
}
 8002a10:	2000      	movs	r0, #0
 8002a12:	4770      	bx	lr

08002a14 <USB_DevInit>:
  * @param  cfg  : pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit (USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8002a14:	b084      	sub	sp, #16
 8002a16:	b510      	push	{r4, lr}
 8002a18:	ac03      	add	r4, sp, #12
 8002a1a:	e884 000e 	stmia.w	r4, {r1, r2, r3}
  
  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
    
  return HAL_OK;
}
 8002a1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBx->CNTR = USB_CNTR_FRES;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
  USBx->CNTR = 0;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
}
 8002a2e:	b004      	add	sp, #16
  USBx->ISTR = 0;
 8002a30:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
  USBx->BTABLE = BTABLE_ADDRESS;
 8002a34:	f8a0 3050 	strh.w	r3, [r0, #80]	; 0x50
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	4770      	bx	lr

08002a3c <USB_ActivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002a3c:	b570      	push	{r4, r5, r6, lr}
  /* initialize Endpoint */
  switch (ep->type)
 8002a3e:	78ca      	ldrb	r2, [r1, #3]
 8002a40:	780b      	ldrb	r3, [r1, #0]
 8002a42:	2a03      	cmp	r2, #3
 8002a44:	d810      	bhi.n	8002a68 <USB_ActivateEndpoint+0x2c>
 8002a46:	e8df f002 	tbb	[pc, r2]
 8002a4a:	6702      	.short	0x6702
 8002a4c:	5b51      	.short	0x5b51
  {
  case EP_TYPE_CTRL:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_CONTROL);
 8002a4e:	b21b      	sxth	r3, r3
 8002a50:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002a54:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002a58:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002a5c:	0412      	lsls	r2, r2, #16
 8002a5e:	0c12      	lsrs	r2, r2, #16
 8002a60:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    break;
  case EP_TYPE_INTR:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
    break;
  case EP_TYPE_ISOC:
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002a64:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    break;
  default:
      break;
  } 
  
  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 8002a68:	780c      	ldrb	r4, [r1, #0]
 8002a6a:	b226      	sxth	r6, r4
 8002a6c:	f640 720f 	movw	r2, #3855	; 0xf0f
 8002a70:	f830 3026 	ldrh.w	r3, [r0, r6, lsl #2]
 8002a74:	f248 0580 	movw	r5, #32896	; 0x8080
 8002a78:	432c      	orrs	r4, r5
 8002a7a:	4013      	ands	r3, r2
 8002a7c:	4323      	orrs	r3, r4
 8002a7e:	f820 3026 	strh.w	r3, [r0, r6, lsl #2]
  
  if (ep->doublebuffer == 0) 
 8002a82:	7a8c      	ldrb	r4, [r1, #10]
 8002a84:	780b      	ldrb	r3, [r1, #0]
 8002a86:	2c00      	cmp	r4, #0
 8002a88:	f040 8098 	bne.w	8002bbc <USB_ActivateEndpoint+0x180>
  {
    if (ep->is_in)
 8002a8c:	784e      	ldrb	r6, [r1, #1]
 8002a8e:	888d      	ldrh	r5, [r1, #4]
 8002a90:	2408      	movs	r4, #8
 8002a92:	2e00      	cmp	r6, #0
 8002a94:	d04c      	beq.n	8002b30 <USB_ActivateEndpoint+0xf4>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002a96:	f8b0 6050 	ldrh.w	r6, [r0, #80]	; 0x50
 8002a9a:	b2b6      	uxth	r6, r6
 8002a9c:	fb14 6303 	smlabb	r3, r4, r3, r6
 8002aa0:	4403      	add	r3, r0
 8002aa2:	f025 0501 	bic.w	r5, r5, #1
 8002aa6:	f8a3 5400 	strh.w	r5, [r3, #1024]	; 0x400
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002aaa:	780c      	ldrb	r4, [r1, #0]
 8002aac:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002ab0:	065b      	lsls	r3, r3, #25
 8002ab2:	d508      	bpl.n	8002ac6 <USB_ActivateEndpoint+0x8a>
 8002ab4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002ab8:	401a      	ands	r2, r3
 8002aba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002abe:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002ac2:	f820 2024 	strh.w	r2, [r0, r4, lsl #2]
      /* Configure NAK status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK); 
 8002ac6:	780a      	ldrb	r2, [r1, #0]
 8002ac8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002acc:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ad0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ad4:	041b      	lsls	r3, r3, #16
 8002ad6:	0c1b      	lsrs	r3, r3, #16
 8002ad8:	f083 0320 	eor.w	r3, r3, #32
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
      /*Set the endpoint Receive buffer counter*/
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure VALID status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002adc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ae0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ae4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002ae8:	2000      	movs	r0, #0
 8002aea:	bd70      	pop	{r4, r5, r6, pc}
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_BULK);
 8002aec:	b21b      	sxth	r3, r3
 8002aee:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002af2:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002af6:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002afa:	0412      	lsls	r2, r2, #16
 8002afc:	0c12      	lsrs	r2, r2, #16
 8002afe:	e7b1      	b.n	8002a64 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_INTERRUPT);
 8002b00:	b21b      	sxth	r3, r3
 8002b02:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002b06:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002b0a:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b0e:	0412      	lsls	r2, r2, #16
 8002b10:	0c12      	lsrs	r2, r2, #16
 8002b12:	f442 62c0 	orr.w	r2, r2, #1536	; 0x600
 8002b16:	e7a5      	b.n	8002a64 <USB_ActivateEndpoint+0x28>
    PCD_SET_EPTYPE(USBx, ep->num, USB_EP_ISOCHRONOUS);
 8002b18:	b21b      	sxth	r3, r3
 8002b1a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002b1e:	f422 42ec 	bic.w	r2, r2, #30208	; 0x7600
 8002b22:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8002b26:	0412      	lsls	r2, r2, #16
 8002b28:	0c12      	lsrs	r2, r2, #16
 8002b2a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b2e:	e799      	b.n	8002a64 <USB_ActivateEndpoint+0x28>
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8002b30:	f8b0 2050 	ldrh.w	r2, [r0, #80]	; 0x50
 8002b34:	b292      	uxth	r2, r2
 8002b36:	fb14 2303 	smlabb	r3, r4, r3, r2
 8002b3a:	4403      	add	r3, r0
 8002b3c:	f025 0501 	bic.w	r5, r5, #1
 8002b40:	f8a3 5404 	strh.w	r5, [r3, #1028]	; 0x404
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002b44:	f8b0 3050 	ldrh.w	r3, [r0, #80]	; 0x50
 8002b48:	780a      	ldrb	r2, [r1, #0]
 8002b4a:	b29b      	uxth	r3, r3
 8002b4c:	fb14 3302 	smlabb	r3, r4, r2, r3
 8002b50:	690c      	ldr	r4, [r1, #16]
 8002b52:	2c3e      	cmp	r4, #62	; 0x3e
 8002b54:	f200 4506 	addw	r5, r0, #1030	; 0x406
 8002b58:	d928      	bls.n	8002bac <USB_ActivateEndpoint+0x170>
 8002b5a:	f3c4 124f 	ubfx	r2, r4, #5, #16
 8002b5e:	06e6      	lsls	r6, r4, #27
 8002b60:	bf08      	it	eq
 8002b62:	f102 32ff 	addeq.w	r2, r2, #4294967295
 8002b66:	4c6e      	ldr	r4, [pc, #440]	; (8002d20 <USB_ActivateEndpoint+0x2e4>)
 8002b68:	bf08      	it	eq
 8002b6a:	b292      	uxtheq	r2, r2
 8002b6c:	ea44 2282 	orr.w	r2, r4, r2, lsl #10
 8002b70:	535a      	strh	r2, [r3, r5]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002b72:	780a      	ldrb	r2, [r1, #0]
 8002b74:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b78:	045b      	lsls	r3, r3, #17
 8002b7a:	d50b      	bpl.n	8002b94 <USB_ActivateEndpoint+0x158>
 8002b7c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002b84:	051b      	lsls	r3, r3, #20
 8002b86:	0d1b      	lsrs	r3, r3, #20
 8002b88:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002b90:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002b94:	780a      	ldrb	r2, [r1, #0]
 8002b96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002b9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002b9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba2:	041b      	lsls	r3, r3, #16
 8002ba4:	0c1b      	lsrs	r3, r3, #16
 8002ba6:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002baa:	e797      	b.n	8002adc <USB_ActivateEndpoint+0xa0>
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8002bac:	f3c4 024f 	ubfx	r2, r4, #1, #16
 8002bb0:	07e4      	lsls	r4, r4, #31
 8002bb2:	bf44      	itt	mi
 8002bb4:	3201      	addmi	r2, #1
 8002bb6:	b292      	uxthmi	r2, r2
 8002bb8:	0292      	lsls	r2, r2, #10
 8002bba:	e7d9      	b.n	8002b70 <USB_ActivateEndpoint+0x134>
    PCD_SET_EP_DBUF(USBx, ep->num);
 8002bbc:	b21b      	sxth	r3, r3
 8002bbe:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 8002bc2:	b2a4      	uxth	r4, r4
 8002bc4:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8002bc8:	4014      	ands	r4, r2
 8002bca:	432c      	orrs	r4, r5
 8002bcc:	f820 4023 	strh.w	r4, [r0, r3, lsl #2]
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num,ep->pmaaddr0, ep->pmaaddr1);
 8002bd0:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002bd4:	b2a5      	uxth	r5, r4
 8002bd6:	780c      	ldrb	r4, [r1, #0]
 8002bd8:	2308      	movs	r3, #8
 8002bda:	fb13 5404 	smlabb	r4, r3, r4, r5
 8002bde:	88cd      	ldrh	r5, [r1, #6]
 8002be0:	4404      	add	r4, r0
 8002be2:	f025 0501 	bic.w	r5, r5, #1
 8002be6:	f8a4 5400 	strh.w	r5, [r4, #1024]	; 0x400
 8002bea:	f8b0 4050 	ldrh.w	r4, [r0, #80]	; 0x50
 8002bee:	780d      	ldrb	r5, [r1, #0]
 8002bf0:	b2a4      	uxth	r4, r4
 8002bf2:	fb13 4305 	smlabb	r3, r3, r5, r4
 8002bf6:	890c      	ldrh	r4, [r1, #8]
 8002bf8:	4403      	add	r3, r0
 8002bfa:	f024 0401 	bic.w	r4, r4, #1
 8002bfe:	f8a3 4404 	strh.w	r4, [r3, #1028]	; 0x404
 8002c02:	780b      	ldrb	r3, [r1, #0]
    if (ep->is_in==0)
 8002c04:	784c      	ldrb	r4, [r1, #1]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c06:	b21b      	sxth	r3, r3
    if (ep->is_in==0)
 8002c08:	2c00      	cmp	r4, #0
 8002c0a:	d147      	bne.n	8002c9c <USB_ActivateEndpoint+0x260>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c0c:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 8002c10:	0466      	lsls	r6, r4, #17
 8002c12:	d508      	bpl.n	8002c26 <USB_ActivateEndpoint+0x1ea>
 8002c14:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 8002c18:	4022      	ands	r2, r4
 8002c1a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002c1e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002c22:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002c26:	780a      	ldrb	r2, [r1, #0]
 8002c28:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c2c:	065d      	lsls	r5, r3, #25
 8002c2e:	d50b      	bpl.n	8002c48 <USB_ActivateEndpoint+0x20c>
 8002c30:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c34:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c38:	051b      	lsls	r3, r3, #20
 8002c3a:	0d1b      	lsrs	r3, r3, #20
 8002c3c:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c40:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c44:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002c48:	780a      	ldrb	r2, [r1, #0]
 8002c4a:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002c4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002c52:	051b      	lsls	r3, r3, #20
 8002c54:	0d1b      	lsrs	r3, r3, #20
 8002c56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002c5a:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002c5e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002c62:	780c      	ldrb	r4, [r1, #0]
 8002c64:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002c68:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002c6c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002c70:	041b      	lsls	r3, r3, #16
 8002c72:	0c1b      	lsrs	r3, r3, #16
 8002c74:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002c78:	f248 0280 	movw	r2, #32896	; 0x8080
 8002c7c:	4313      	orrs	r3, r2
 8002c7e:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002c82:	7809      	ldrb	r1, [r1, #0]
 8002c84:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002c88:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002c90:	041b      	lsls	r3, r3, #16
 8002c92:	0c1b      	lsrs	r3, r3, #16
 8002c94:	4313      	orrs	r3, r2
 8002c96:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002c9a:	e725      	b.n	8002ae8 <USB_ActivateEndpoint+0xac>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002c9c:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 8002ca0:	0464      	lsls	r4, r4, #17
 8002ca2:	d508      	bpl.n	8002cb6 <USB_ActivateEndpoint+0x27a>
 8002ca4:	f830 4023 	ldrh.w	r4, [r0, r3, lsl #2]
 8002ca8:	4022      	ands	r2, r4
 8002caa:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002cae:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002cb2:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002cb6:	780a      	ldrb	r2, [r1, #0]
 8002cb8:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cbc:	065b      	lsls	r3, r3, #25
 8002cbe:	d50b      	bpl.n	8002cd8 <USB_ActivateEndpoint+0x29c>
 8002cc0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cc4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002cc8:	051b      	lsls	r3, r3, #20
 8002cca:	0d1b      	lsrs	r3, r3, #20
 8002ccc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002cd0:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002cd4:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002cd8:	780a      	ldrb	r2, [r1, #0]
 8002cda:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002cde:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002ce2:	051b      	lsls	r3, r3, #20
 8002ce4:	0d1b      	lsrs	r3, r3, #20
 8002ce6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002cea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002cee:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002cf2:	780c      	ldrb	r4, [r1, #0]
 8002cf4:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002cf8:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002cfc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002d00:	041b      	lsls	r3, r3, #16
 8002d02:	0c1b      	lsrs	r3, r3, #16
 8002d04:	f248 0280 	movw	r2, #32896	; 0x8080
 8002d08:	4313      	orrs	r3, r2
 8002d0a:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d0e:	7809      	ldrb	r1, [r1, #0]
 8002d10:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002d14:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d1c:	e7b8      	b.n	8002c90 <USB_ActivateEndpoint+0x254>
 8002d1e:	bf00      	nop
 8002d20:	ffff8000 	.word	0xffff8000

08002d24 <USB_DeactivateEndpoint>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002d24:	b510      	push	{r4, lr}
 8002d26:	780b      	ldrb	r3, [r1, #0]
  if (ep->doublebuffer == 0) 
 8002d28:	7a8c      	ldrb	r4, [r1, #10]
 8002d2a:	784a      	ldrb	r2, [r1, #1]
  {
    if (ep->is_in)
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d2c:	b21b      	sxth	r3, r3
  if (ep->doublebuffer == 0) 
 8002d2e:	bbcc      	cbnz	r4, 8002da4 <USB_DeactivateEndpoint+0x80>
    if (ep->is_in)
 8002d30:	b302      	cbz	r2, 8002d74 <USB_DeactivateEndpoint+0x50>
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002d32:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002d36:	0652      	lsls	r2, r2, #25
 8002d38:	d50b      	bpl.n	8002d52 <USB_DeactivateEndpoint+0x2e>
 8002d3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002d3e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002d42:	0512      	lsls	r2, r2, #20
 8002d44:	0d12      	lsrs	r2, r2, #20
 8002d46:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002d4a:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002d4e:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS); 
 8002d52:	780a      	ldrb	r2, [r1, #0]
 8002d54:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d58:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002d5c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d60:	041b      	lsls	r3, r3, #16
 8002d62:	0c1b      	lsrs	r3, r3, #16
 8002d64:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002d68:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002d6c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
    }
  }
  
  return HAL_OK;
}
 8002d70:	2000      	movs	r0, #0
 8002d72:	bd10      	pop	{r4, pc}
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002d74:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002d78:	0454      	lsls	r4, r2, #17
 8002d7a:	d50b      	bpl.n	8002d94 <USB_DeactivateEndpoint+0x70>
 8002d7c:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002d80:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002d84:	0512      	lsls	r2, r2, #20
 8002d86:	0d12      	lsrs	r2, r2, #20
 8002d88:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002d8c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002d90:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002d94:	780a      	ldrb	r2, [r1, #0]
 8002d96:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002d9a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002d9e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002da2:	e7dd      	b.n	8002d60 <USB_DeactivateEndpoint+0x3c>
    if (ep->is_in==0)
 8002da4:	2a00      	cmp	r2, #0
 8002da6:	d148      	bne.n	8002e3a <USB_DeactivateEndpoint+0x116>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002da8:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002dac:	0452      	lsls	r2, r2, #17
 8002dae:	d50b      	bpl.n	8002dc8 <USB_DeactivateEndpoint+0xa4>
 8002db0:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002db4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002db8:	0512      	lsls	r2, r2, #20
 8002dba:	0d12      	lsrs	r2, r2, #20
 8002dbc:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002dc0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002dc4:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002dc8:	780a      	ldrb	r2, [r1, #0]
 8002dca:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dce:	065c      	lsls	r4, r3, #25
 8002dd0:	d50b      	bpl.n	8002dea <USB_DeactivateEndpoint+0xc6>
 8002dd2:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002dd6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002dda:	051b      	lsls	r3, r3, #20
 8002ddc:	0d1b      	lsrs	r3, r3, #20
 8002dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002de2:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002de6:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_TX_DTOG(USBx, ep->num);
 8002dea:	780a      	ldrb	r2, [r1, #0]
 8002dec:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002df0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002df4:	051b      	lsls	r3, r3, #20
 8002df6:	0d1b      	lsrs	r3, r3, #20
 8002df8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002dfc:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e00:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e04:	780c      	ldrb	r4, [r1, #0]
 8002e06:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e12:	041b      	lsls	r3, r3, #16
 8002e14:	0c1b      	lsrs	r3, r3, #16
 8002e16:	f248 0280 	movw	r2, #32896	; 0x8080
 8002e1a:	4313      	orrs	r3, r2
 8002e1c:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e20:	7809      	ldrb	r1, [r1, #0]
 8002e22:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002e26:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002e2a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002e2e:	041b      	lsls	r3, r3, #16
 8002e30:	0c1b      	lsrs	r3, r3, #16
 8002e32:	4313      	orrs	r3, r2
 8002e34:	f820 3021 	strh.w	r3, [r0, r1, lsl #2]
 8002e38:	e79a      	b.n	8002d70 <USB_DeactivateEndpoint+0x4c>
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002e3a:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002e3e:	0452      	lsls	r2, r2, #17
 8002e40:	d50b      	bpl.n	8002e5a <USB_DeactivateEndpoint+0x136>
 8002e42:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002e46:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002e4a:	0512      	lsls	r2, r2, #20
 8002e4c:	0d12      	lsrs	r2, r2, #20
 8002e4e:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002e52:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002e56:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002e5a:	780a      	ldrb	r2, [r1, #0]
 8002e5c:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e60:	065b      	lsls	r3, r3, #25
 8002e62:	d50b      	bpl.n	8002e7c <USB_DeactivateEndpoint+0x158>
 8002e64:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e68:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e6c:	051b      	lsls	r3, r3, #20
 8002e6e:	0d1b      	lsrs	r3, r3, #20
 8002e70:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002e74:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8002e78:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_RX_DTOG(USBx, ep->num);
 8002e7c:	780a      	ldrb	r2, [r1, #0]
 8002e7e:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002e82:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e86:	051b      	lsls	r3, r3, #20
 8002e88:	0d1b      	lsrs	r3, r3, #20
 8002e8a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002e8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e92:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8002e96:	780c      	ldrb	r4, [r1, #0]
 8002e98:	f830 3024 	ldrh.w	r3, [r0, r4, lsl #2]
 8002e9c:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ea0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ea4:	041b      	lsls	r3, r3, #16
 8002ea6:	0c1b      	lsrs	r3, r3, #16
 8002ea8:	f248 0280 	movw	r2, #32896	; 0x8080
 8002eac:	4313      	orrs	r3, r2
 8002eae:	f820 3024 	strh.w	r3, [r0, r4, lsl #2]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8002eb2:	7809      	ldrb	r1, [r1, #0]
 8002eb4:	f830 3021 	ldrh.w	r3, [r0, r1, lsl #2]
 8002eb8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ebc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ec0:	e7b5      	b.n	8002e2e <USB_DeactivateEndpoint+0x10a>

08002ec2 <USB_EPSetStall>:
  * @param  ep: pointer to endpoint structure   
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx , USB_EPTypeDef *ep)
{
  if (ep->num == 0)
 8002ec2:	780a      	ldrb	r2, [r1, #0]
 8002ec4:	b98a      	cbnz	r2, 8002eea <USB_EPSetStall+0x28>
  {
    /* This macro sets STALL status for RX & TX*/ 
    PCD_SET_EP_TXRX_STATUS(USBx, ep->num, USB_EP_RX_STALL, USB_EP_TX_STALL); 
 8002ec6:	8803      	ldrh	r3, [r0, #0]
 8002ec8:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002ecc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002ed0:	041b      	lsls	r3, r3, #16
 8002ed2:	0c1b      	lsrs	r3, r3, #16
 8002ed4:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002ed8:	f083 0310 	eor.w	r3, r3, #16
 8002edc:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002ee0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002ee4:	8003      	strh	r3, [r0, #0]
    {
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
    }
  }
  return HAL_OK;
}
 8002ee6:	2000      	movs	r0, #0
 8002ee8:	4770      	bx	lr
    if (ep->is_in)
 8002eea:	784b      	ldrb	r3, [r1, #1]
 8002eec:	b212      	sxth	r2, r2
 8002eee:	b183      	cbz	r3, 8002f12 <USB_EPSetStall+0x50>
      PCD_SET_EP_TX_STATUS(USBx, ep->num , USB_EP_TX_STALL); 
 8002ef0:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002ef4:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002ef8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002efc:	041b      	lsls	r3, r3, #16
 8002efe:	0c1b      	lsrs	r3, r3, #16
 8002f00:	f083 0310 	eor.w	r3, r3, #16
      PCD_SET_EP_RX_STATUS(USBx, ep->num , USB_EP_RX_STALL);
 8002f04:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f08:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f0c:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
 8002f10:	e7e9      	b.n	8002ee6 <USB_EPSetStall+0x24>
 8002f12:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f16:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002f1a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002f1e:	041b      	lsls	r3, r3, #16
 8002f20:	0c1b      	lsrs	r3, r3, #16
 8002f22:	f483 5380 	eor.w	r3, r3, #4096	; 0x1000
 8002f26:	e7ed      	b.n	8002f04 <USB_EPSetStall+0x42>

08002f28 <USB_EPClearStall>:
  * @param  USBx : Selected device
  * @param  ep: pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8002f28:	780b      	ldrb	r3, [r1, #0]
  if (ep->is_in)
 8002f2a:	784a      	ldrb	r2, [r1, #1]
  {
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f2c:	b21b      	sxth	r3, r3
  if (ep->is_in)
 8002f2e:	b312      	cbz	r2, 8002f76 <USB_EPClearStall+0x4e>
    PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8002f30:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f34:	0652      	lsls	r2, r2, #25
 8002f36:	d50b      	bpl.n	8002f50 <USB_EPClearStall+0x28>
 8002f38:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f3c:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f40:	0512      	lsls	r2, r2, #20
 8002f42:	0d12      	lsrs	r2, r2, #20
 8002f44:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002f48:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 8002f4c:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8002f50:	780a      	ldrb	r2, [r1, #0]
 8002f52:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f56:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f5e:	041b      	lsls	r3, r3, #16
 8002f60:	0c1b      	lsrs	r3, r3, #16
 8002f62:	f083 0330 	eor.w	r3, r3, #48	; 0x30
  }
  else
  {
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002f6a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002f6e:	f820 3022 	strh.w	r3, [r0, r2, lsl #2]
  }
  return HAL_OK;
}
 8002f72:	2000      	movs	r0, #0
 8002f74:	4770      	bx	lr
    PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8002f76:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f7a:	0452      	lsls	r2, r2, #17
 8002f7c:	d50b      	bpl.n	8002f96 <USB_EPClearStall+0x6e>
 8002f7e:	f830 2023 	ldrh.w	r2, [r0, r3, lsl #2]
 8002f82:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8002f86:	0512      	lsls	r2, r2, #20
 8002f88:	0d12      	lsrs	r2, r2, #20
 8002f8a:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8002f8e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8002f92:	f820 2023 	strh.w	r2, [r0, r3, lsl #2]
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8002f96:	780a      	ldrb	r2, [r1, #0]
 8002f98:	f830 3022 	ldrh.w	r3, [r0, r2, lsl #2]
 8002f9c:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fa0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fa4:	041b      	lsls	r3, r3, #16
 8002fa6:	0c1b      	lsrs	r3, r3, #16
 8002fa8:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8002fac:	e7db      	b.n	8002f66 <USB_EPClearStall+0x3e>

08002fae <USB_SetDevAddress>:
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress (USB_TypeDef *USBx, uint8_t address)
{
  if(address == 0) 
 8002fae:	b911      	cbnz	r1, 8002fb6 <USB_SetDevAddress+0x8>
  {
   /* set device address and enable function */
   USBx->DADDR = USB_DADDR_EF;
 8002fb0:	2380      	movs	r3, #128	; 0x80
 8002fb2:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
  }
  
  return HAL_OK;
}
 8002fb6:	2000      	movs	r0, #0
 8002fb8:	4770      	bx	lr
	...

08002fbc <USB_DevConnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect (USB_TypeDef *USBx)
{
  /* Enabling DP Pull-Down bit to Connect internal pull-up on USB DP line */
  USB->BCDR |= USB_BCDR_DPPU;
 8002fbc:	4a05      	ldr	r2, [pc, #20]	; (8002fd4 <USB_DevConnect+0x18>)
 8002fbe:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8002fc2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002fc6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
  
  return HAL_OK;
}
 8002fd0:	2000      	movs	r0, #0
 8002fd2:	4770      	bx	lr
 8002fd4:	40006800 	.word	0x40006800

08002fd8 <USB_DevDisconnect>:
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect (USB_TypeDef *USBx)
{
  /* Disable DP Pull-Down bit*/
  USB->BCDR &= ~(USB_BCDR_DPPU);
 8002fd8:	4a04      	ldr	r2, [pc, #16]	; (8002fec <USB_DevDisconnect+0x14>)
 8002fda:	f8b2 3058 	ldrh.w	r3, [r2, #88]	; 0x58
 8002fde:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8002fe2:	f8a2 3058 	strh.w	r3, [r2, #88]	; 0x58
   
  return HAL_OK;
}
 8002fe6:	2000      	movs	r0, #0
 8002fe8:	4770      	bx	lr
 8002fea:	bf00      	nop
 8002fec:	40006800 	.word	0x40006800

08002ff0 <USB_ReadInterrupts>:
  */
uint32_t  USB_ReadInterrupts (USB_TypeDef *USBx)
{
  uint32_t tmpreg = 0;
  
  tmpreg = USBx->ISTR;
 8002ff0:	f8b0 0044 	ldrh.w	r0, [r0, #68]	; 0x44
  return tmpreg;
}
 8002ff4:	b280      	uxth	r0, r0
 8002ff6:	4770      	bx	lr

08002ff8 <USB_EP0_OutStart>:
  UNUSED(USBx);
  UNUSED(psetup);
  UNUSED(dma);
  
  return HAL_OK;
}
 8002ff8:	2000      	movs	r0, #0
 8002ffa:	4770      	bx	lr

08002ffc <USB_WritePMA>:
  * @param  wPMABufAddr : address into PMA.
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 8002ffc:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;
 8002ffe:	3301      	adds	r3, #1
  uint32_t i;
  uint16_t temp1, temp2;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + (uint32_t)USBx + 0x400);
 8003000:	f500 6080 	add.w	r0, r0, #1024	; 0x400
  uint32_t n = (wNBytes + 1) >> 1;
 8003004:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr + (uint32_t)USBx + 0x400);
 8003006:	4402      	add	r2, r0
 8003008:	3102      	adds	r1, #2

  for (i = n; i != 0; i--)
 800300a:	b903      	cbnz	r3, 800300e <USB_WritePMA+0x12>
    pbUsrBuf++;
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
    *pdwVal++ = temp2;
    pbUsrBuf++;
  }
}
 800300c:	bd10      	pop	{r4, pc}
    temp2 = temp1 | (uint16_t) * pbUsrBuf << 8;
 800300e:	f811 4c01 	ldrb.w	r4, [r1, #-1]
 8003012:	f811 0c02 	ldrb.w	r0, [r1, #-2]
 8003016:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
    *pdwVal++ = temp2;
 800301a:	f822 0b02 	strh.w	r0, [r2], #2
  for (i = n; i != 0; i--)
 800301e:	3b01      	subs	r3, #1
 8003020:	e7f2      	b.n	8003008 <USB_WritePMA+0xc>
	...

08003024 <USB_EPStartXfer>:
{
 8003024:	b570      	push	{r4, r5, r6, lr}
  uint32_t len = ep->xfer_len;
 8003026:	698a      	ldr	r2, [r1, #24]
{
 8003028:	460d      	mov	r5, r1
  if (ep->is_in == 1)
 800302a:	7849      	ldrb	r1, [r1, #1]
 800302c:	692b      	ldr	r3, [r5, #16]
 800302e:	2901      	cmp	r1, #1
{
 8003030:	4604      	mov	r4, r0
 8003032:	7aa8      	ldrb	r0, [r5, #10]
  if (ep->is_in == 1)
 8003034:	d162      	bne.n	80030fc <USB_EPStartXfer+0xd8>
    if (ep->xfer_len > ep->maxpacket)
 8003036:	429a      	cmp	r2, r3
      ep->xfer_len =0;
 8003038:	bf97      	itett	ls
 800303a:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 800303c:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 800303e:	61ab      	strls	r3, [r5, #24]
 8003040:	4613      	movls	r3, r2
      ep->xfer_len-=len; 
 8003042:	bf88      	it	hi
 8003044:	61aa      	strhi	r2, [r5, #24]
 8003046:	b29e      	uxth	r6, r3
    if (ep->doublebuffer == 0) 
 8003048:	bb08      	cbnz	r0, 800308e <USB_EPStartXfer+0x6a>
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, len);
 800304a:	4633      	mov	r3, r6
 800304c:	88aa      	ldrh	r2, [r5, #4]
 800304e:	6969      	ldr	r1, [r5, #20]
 8003050:	4620      	mov	r0, r4
 8003052:	f7ff ffd3 	bl	8002ffc <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8003056:	f8b4 3050 	ldrh.w	r3, [r4, #80]	; 0x50
 800305a:	782a      	ldrb	r2, [r5, #0]
 800305c:	b29b      	uxth	r3, r3
 800305e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8003062:	4423      	add	r3, r4
 8003064:	f8a3 6402 	strh.w	r6, [r3, #1026]	; 0x402
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8003068:	782a      	ldrb	r2, [r5, #0]
 800306a:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 800306e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003072:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003076:	041b      	lsls	r3, r3, #16
 8003078:	0c1b      	lsrs	r3, r3, #16
 800307a:	f083 0330 	eor.w	r3, r3, #48	; 0x30
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 800307e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003082:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003086:	f824 3022 	strh.w	r3, [r4, r2, lsl #2]
}
 800308a:	2000      	movs	r0, #0
 800308c:	bd70      	pop	{r4, r5, r6, pc}
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800308e:	7828      	ldrb	r0, [r5, #0]
 8003090:	b202      	sxth	r2, r0
 8003092:	f834 2022 	ldrh.w	r2, [r4, r2, lsl #2]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003096:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
      if (PCD_GET_ENDPOINT(USBx, ep->num)& USB_EP_DTOG_TX)
 800309a:	f012 0f40 	tst.w	r2, #64	; 0x40
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 800309e:	b289      	uxth	r1, r1
 80030a0:	f04f 0208 	mov.w	r2, #8
 80030a4:	fb12 1200 	smlabb	r2, r2, r0, r1
 80030a8:	4422      	add	r2, r4
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80030aa:	6969      	ldr	r1, [r5, #20]
        PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80030ac:	f8a2 3402 	strh.w	r3, [r2, #1026]	; 0x402
        pmabuffer = ep->pmaaddr1;
 80030b0:	bf14      	ite	ne
 80030b2:	892a      	ldrhne	r2, [r5, #8]
        pmabuffer = ep->pmaaddr0;
 80030b4:	88ea      	ldrheq	r2, [r5, #6]
      USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, len);
 80030b6:	4633      	mov	r3, r6
 80030b8:	4620      	mov	r0, r4
 80030ba:	f7ff ff9f 	bl	8002ffc <USB_WritePMA>
      PCD_FreeUserBuffer(USBx, ep->num, ep->is_in);
 80030be:	786a      	ldrb	r2, [r5, #1]
 80030c0:	782b      	ldrb	r3, [r5, #0]
 80030c2:	b96a      	cbnz	r2, 80030e0 <USB_EPStartXfer+0xbc>
 80030c4:	b21b      	sxth	r3, r3
 80030c6:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 80030ca:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030ce:	0512      	lsls	r2, r2, #20
 80030d0:	0d12      	lsrs	r2, r2, #20
 80030d2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80030d6:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
 80030da:	f824 2023 	strh.w	r2, [r4, r3, lsl #2]
 80030de:	e7c3      	b.n	8003068 <USB_EPStartXfer+0x44>
 80030e0:	2a01      	cmp	r2, #1
 80030e2:	d1c1      	bne.n	8003068 <USB_EPStartXfer+0x44>
 80030e4:	b21b      	sxth	r3, r3
 80030e6:	f834 2023 	ldrh.w	r2, [r4, r3, lsl #2]
 80030ea:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80030ee:	0512      	lsls	r2, r2, #20
 80030f0:	0d12      	lsrs	r2, r2, #20
 80030f2:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 80030f6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80030fa:	e7ee      	b.n	80030da <USB_EPStartXfer+0xb6>
    if (ep->xfer_len > ep->maxpacket)
 80030fc:	429a      	cmp	r2, r3
      ep->xfer_len-=len; 
 80030fe:	bf8b      	itete	hi
 8003100:	1ad2      	subhi	r2, r2, r3
      ep->xfer_len =0;
 8003102:	2300      	movls	r3, #0
      ep->xfer_len-=len; 
 8003104:	61aa      	strhi	r2, [r5, #24]
      ep->xfer_len =0;
 8003106:	61ab      	strls	r3, [r5, #24]
 8003108:	bf98      	it	ls
 800310a:	4613      	movls	r3, r2
 800310c:	782a      	ldrb	r2, [r5, #0]
    if (ep->doublebuffer == 0) 
 800310e:	b9a8      	cbnz	r0, 800313c <USB_EPStartXfer+0x118>
      PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003110:	f8b4 1050 	ldrh.w	r1, [r4, #80]	; 0x50
 8003114:	2b3e      	cmp	r3, #62	; 0x3e
 8003116:	b289      	uxth	r1, r1
 8003118:	eb01 01c2 	add.w	r1, r1, r2, lsl #3
 800311c:	f204 4006 	addw	r0, r4, #1030	; 0x406
 8003120:	d91a      	bls.n	8003158 <USB_EPStartXfer+0x134>
 8003122:	f3c3 124f 	ubfx	r2, r3, #5, #16
 8003126:	06de      	lsls	r6, r3, #27
 8003128:	bf08      	it	eq
 800312a:	f102 32ff 	addeq.w	r2, r2, #4294967295
 800312e:	4b0e      	ldr	r3, [pc, #56]	; (8003168 <USB_EPStartXfer+0x144>)
 8003130:	bf08      	it	eq
 8003132:	b292      	uxtheq	r2, r2
 8003134:	ea43 2282 	orr.w	r2, r3, r2, lsl #10
 8003138:	520a      	strh	r2, [r1, r0]
 800313a:	e001      	b.n	8003140 <USB_EPStartXfer+0x11c>
 800313c:	2900      	cmp	r1, #0
 800313e:	d0e7      	beq.n	8003110 <USB_EPStartXfer+0xec>
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8003140:	782a      	ldrb	r2, [r5, #0]
 8003142:	f834 3022 	ldrh.w	r3, [r4, r2, lsl #2]
 8003146:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800314a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800314e:	041b      	lsls	r3, r3, #16
 8003150:	0c1b      	lsrs	r3, r3, #16
 8003152:	f483 5340 	eor.w	r3, r3, #12288	; 0x3000
 8003156:	e792      	b.n	800307e <USB_EPStartXfer+0x5a>
      PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8003158:	f3c3 024f 	ubfx	r2, r3, #1, #16
 800315c:	07db      	lsls	r3, r3, #31
 800315e:	bf44      	itt	mi
 8003160:	3201      	addmi	r2, #1
 8003162:	b292      	uxthmi	r2, r2
 8003164:	0292      	lsls	r2, r2, #10
 8003166:	e7e7      	b.n	8003138 <USB_EPStartXfer+0x114>
 8003168:	ffff8000 	.word	0xffff8000

0800316c <USB_ReadPMA>:
  * @param  wNBytes : number of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
  uint32_t n = (wNBytes + 1) >> 1;
 800316c:	3301      	adds	r3, #1
  uint32_t i;
  uint16_t *pdwVal;
  pdwVal = (uint16_t *)(wPMABufAddr + (uint32_t)USBx + 0x400);
 800316e:	f500 6080 	add.w	r0, r0, #1024	; 0x400
{
 8003172:	b510      	push	{r4, lr}
  uint32_t n = (wNBytes + 1) >> 1;
 8003174:	105b      	asrs	r3, r3, #1
  pdwVal = (uint16_t *)(wPMABufAddr + (uint32_t)USBx + 0x400);
 8003176:	4402      	add	r2, r0
  for (i = n; i != 0; i--)
 8003178:	2400      	movs	r4, #0
 800317a:	42a3      	cmp	r3, r4
 800317c:	d100      	bne.n	8003180 <USB_ReadPMA+0x14>
  {
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
    pbUsrBuf++;
  }
}
 800317e:	bd10      	pop	{r4, pc}
    *(uint16_t*)pbUsrBuf++ = *pdwVal++;
 8003180:	f832 0014 	ldrh.w	r0, [r2, r4, lsl #1]
 8003184:	f821 0014 	strh.w	r0, [r1, r4, lsl #1]
 8003188:	3401      	adds	r4, #1
 800318a:	e7f6      	b.n	800317a <USB_ReadPMA+0xe>

0800318c <USBD_CDC_DataIn>:
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn (USBD_HandleTypeDef *pdev, uint8_t epnum)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 800318c:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  if(pdev->pClassData != NULL)
 8003190:	b11b      	cbz	r3, 800319a <USBD_CDC_DataIn+0xe>
  {
    
    hcdc->TxState = 0;
 8003192:	2000      	movs	r0, #0
 8003194:	f8c3 0214 	str.w	r0, [r3, #532]	; 0x214

    return USBD_OK;
 8003198:	4770      	bx	lr
  }
  else
  {
    return USBD_FAIL;
 800319a:	2002      	movs	r0, #2
  }
}
 800319c:	4770      	bx	lr

0800319e <USBD_CDC_EP0_RxReady>:
  */
static uint8_t  USBD_CDC_EP0_RxReady (USBD_HandleTypeDef *pdev)
{ 
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 800319e:	f8d0 321c 	ldr.w	r3, [r0, #540]	; 0x21c
{ 
 80031a2:	b510      	push	{r4, lr}
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80031a4:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  if((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFF))
 80031a8:	b15b      	cbz	r3, 80031c2 <USBD_CDC_EP0_RxReady+0x24>
 80031aa:	f894 0200 	ldrb.w	r0, [r4, #512]	; 0x200
 80031ae:	28ff      	cmp	r0, #255	; 0xff
 80031b0:	d007      	beq.n	80031c2 <USBD_CDC_EP0_RxReady+0x24>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 80031b2:	689b      	ldr	r3, [r3, #8]
 80031b4:	f894 2201 	ldrb.w	r2, [r4, #513]	; 0x201
 80031b8:	4621      	mov	r1, r4
 80031ba:	4798      	blx	r3
                                                      (uint8_t *)hcdc->data,
                                                      hcdc->CmdLength);
      hcdc->CmdOpCode = 0xFF; 
 80031bc:	23ff      	movs	r3, #255	; 0xff
 80031be:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
      
  }
  return USBD_OK;
}
 80031c2:	2000      	movs	r0, #0
 80031c4:	bd10      	pop	{r4, pc}
	...

080031c8 <USBD_CDC_GetFSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgFSDesc);
 80031c8:	2343      	movs	r3, #67	; 0x43
 80031ca:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgFSDesc;
}
 80031cc:	4800      	ldr	r0, [pc, #0]	; (80031d0 <USBD_CDC_GetFSCfgDesc+0x8>)
 80031ce:	4770      	bx	lr
 80031d0:	20000038 	.word	0x20000038

080031d4 <USBD_CDC_GetHSCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_CfgHSDesc);
 80031d4:	2343      	movs	r3, #67	; 0x43
 80031d6:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_CfgHSDesc;
}
 80031d8:	4800      	ldr	r0, [pc, #0]	; (80031dc <USBD_CDC_GetHSCfgDesc+0x8>)
 80031da:	4770      	bx	lr
 80031dc:	2000007c 	.word	0x2000007c

080031e0 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc (uint16_t *length)
{
  *length = sizeof (USBD_CDC_OtherSpeedCfgDesc);
 80031e0:	2343      	movs	r3, #67	; 0x43
 80031e2:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
}
 80031e4:	4800      	ldr	r0, [pc, #0]	; (80031e8 <USBD_CDC_GetOtherSpeedCfgDesc+0x8>)
 80031e6:	4770      	bx	lr
 80031e8:	200000cc 	.word	0x200000cc

080031ec <USBD_CDC_GetDeviceQualifierDescriptor>:
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor (uint16_t *length)
{
  *length = sizeof (USBD_CDC_DeviceQualifierDesc);
 80031ec:	230a      	movs	r3, #10
 80031ee:	8003      	strh	r3, [r0, #0]
  return USBD_CDC_DeviceQualifierDesc;
}
 80031f0:	4800      	ldr	r0, [pc, #0]	; (80031f4 <USBD_CDC_GetDeviceQualifierDescriptor+0x8>)
 80031f2:	4770      	bx	lr
 80031f4:	200000c0 	.word	0x200000c0

080031f8 <USBD_CDC_DataOut>:
{      
 80031f8:	b538      	push	{r3, r4, r5, lr}
 80031fa:	4605      	mov	r5, r0
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80031fc:	f8d0 4218 	ldr.w	r4, [r0, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003200:	f001 f842 	bl	8004288 <USBD_LL_GetRxDataSize>
  if(pdev->pClassData != NULL)
 8003204:	f8d5 3218 	ldr.w	r3, [r5, #536]	; 0x218
  hcdc->RxLength = USBD_LL_GetRxDataSize (pdev, epnum);
 8003208:	f8c4 020c 	str.w	r0, [r4, #524]	; 0x20c
  if(pdev->pClassData != NULL)
 800320c:	b14b      	cbz	r3, 8003222 <USBD_CDC_DataOut+0x2a>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 800320e:	f8d5 321c 	ldr.w	r3, [r5, #540]	; 0x21c
 8003212:	f8d4 0204 	ldr.w	r0, [r4, #516]	; 0x204
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	f504 7103 	add.w	r1, r4, #524	; 0x20c
 800321c:	4798      	blx	r3
    return USBD_OK;
 800321e:	2000      	movs	r0, #0
 8003220:	bd38      	pop	{r3, r4, r5, pc}
    return USBD_FAIL;
 8003222:	2002      	movs	r0, #2
}
 8003224:	bd38      	pop	{r3, r4, r5, pc}
	...

08003228 <USBD_CDC_Setup>:
{
 8003228:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800322a:	780f      	ldrb	r7, [r1, #0]
 800322c:	f017 0360 	ands.w	r3, r7, #96	; 0x60
{
 8003230:	4606      	mov	r6, r0
 8003232:	460c      	mov	r4, r1
  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8003234:	d023      	beq.n	800327e <USBD_CDC_Setup+0x56>
 8003236:	2b20      	cmp	r3, #32
 8003238:	d119      	bne.n	800326e <USBD_CDC_Setup+0x46>
    if (req->wLength)
 800323a:	88ca      	ldrh	r2, [r1, #6]
 800323c:	784b      	ldrb	r3, [r1, #1]
 800323e:	b1c2      	cbz	r2, 8003272 <USBD_CDC_Setup+0x4a>
      if (req->bmRequest & 0x80)
 8003240:	0639      	lsls	r1, r7, #24
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003242:	f8d0 5218 	ldr.w	r5, [r0, #536]	; 0x218
      if (req->bmRequest & 0x80)
 8003246:	d50b      	bpl.n	8003260 <USBD_CDC_Setup+0x38>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003248:	f8d0 121c 	ldr.w	r1, [r0, #540]	; 0x21c
 800324c:	4618      	mov	r0, r3
 800324e:	688f      	ldr	r7, [r1, #8]
 8003250:	4629      	mov	r1, r5
 8003252:	47b8      	blx	r7
          USBD_CtlSendData (pdev, 
 8003254:	88e2      	ldrh	r2, [r4, #6]
 8003256:	4629      	mov	r1, r5
 8003258:	4630      	mov	r0, r6
      USBD_CtlSendData (pdev,
 800325a:	f000 fb92 	bl	8003982 <USBD_CtlSendData>
      break;
 800325e:	e006      	b.n	800326e <USBD_CDC_Setup+0x46>
        hcdc->CmdOpCode = req->bRequest;
 8003260:	f885 3200 	strb.w	r3, [r5, #512]	; 0x200
        hcdc->CmdLength = req->wLength;
 8003264:	f885 2201 	strb.w	r2, [r5, #513]	; 0x201
        USBD_CtlPrepareRx (pdev, 
 8003268:	4629      	mov	r1, r5
 800326a:	f000 fb9f 	bl	80039ac <USBD_CtlPrepareRx>
}
 800326e:	2000      	movs	r0, #0
 8003270:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 8003272:	f8d0 021c 	ldr.w	r0, [r0, #540]	; 0x21c
 8003276:	6884      	ldr	r4, [r0, #8]
 8003278:	4618      	mov	r0, r3
 800327a:	47a0      	blx	r4
 800327c:	e7f7      	b.n	800326e <USBD_CDC_Setup+0x46>
    switch (req->bRequest)
 800327e:	784b      	ldrb	r3, [r1, #1]
 8003280:	2b0a      	cmp	r3, #10
 8003282:	d1f4      	bne.n	800326e <USBD_CDC_Setup+0x46>
      USBD_CtlSendData (pdev,
 8003284:	2201      	movs	r2, #1
 8003286:	4901      	ldr	r1, [pc, #4]	; (800328c <USBD_CDC_Setup+0x64>)
 8003288:	e7e7      	b.n	800325a <USBD_CDC_Setup+0x32>
 800328a:	bf00      	nop
 800328c:	20000184 	.word	0x20000184

08003290 <USBD_CDC_DeInit>:
{
 8003290:	b510      	push	{r4, lr}
  USBD_LL_CloseEP(pdev,
 8003292:	2181      	movs	r1, #129	; 0x81
{
 8003294:	4604      	mov	r4, r0
  USBD_LL_CloseEP(pdev,
 8003296:	f000 ff93 	bl	80041c0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 800329a:	2101      	movs	r1, #1
 800329c:	4620      	mov	r0, r4
 800329e:	f000 ff8f 	bl	80041c0 <USBD_LL_CloseEP>
  USBD_LL_CloseEP(pdev,
 80032a2:	2182      	movs	r1, #130	; 0x82
 80032a4:	4620      	mov	r0, r4
 80032a6:	f000 ff8b 	bl	80041c0 <USBD_LL_CloseEP>
  if(pdev->pClassData != NULL)
 80032aa:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
 80032ae:	b153      	cbz	r3, 80032c6 <USBD_CDC_DeInit+0x36>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80032b0:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80032b8:	f8d4 0218 	ldr.w	r0, [r4, #536]	; 0x218
 80032bc:	f001 f812 	bl	80042e4 <USBD_static_free>
    pdev->pClassData = NULL;
 80032c0:	2300      	movs	r3, #0
 80032c2:	f8c4 3218 	str.w	r3, [r4, #536]	; 0x218
}
 80032c6:	2000      	movs	r0, #0
 80032c8:	bd10      	pop	{r4, pc}

080032ca <USBD_CDC_Init>:
{
 80032ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80032cc:	7c03      	ldrb	r3, [r0, #16]
{
 80032ce:	4604      	mov	r4, r0
  if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80032d0:	bb7b      	cbnz	r3, 8003332 <USBD_CDC_Init+0x68>
    USBD_LL_OpenEP(pdev,
 80032d2:	f44f 7300 	mov.w	r3, #512	; 0x200
 80032d6:	2202      	movs	r2, #2
 80032d8:	2181      	movs	r1, #129	; 0x81
 80032da:	f000 ff61 	bl	80041a0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 80032de:	f44f 7300 	mov.w	r3, #512	; 0x200
    USBD_LL_OpenEP(pdev,
 80032e2:	2202      	movs	r2, #2
 80032e4:	2101      	movs	r1, #1
 80032e6:	4620      	mov	r0, r4
 80032e8:	f000 ff5a 	bl	80041a0 <USBD_LL_OpenEP>
  USBD_LL_OpenEP(pdev,
 80032ec:	2308      	movs	r3, #8
 80032ee:	2203      	movs	r2, #3
 80032f0:	2182      	movs	r1, #130	; 0x82
 80032f2:	4620      	mov	r0, r4
 80032f4:	f000 ff54 	bl	80041a0 <USBD_LL_OpenEP>
  pdev->pClassData = USBD_malloc(sizeof (USBD_CDC_HandleTypeDef));
 80032f8:	f44f 7007 	mov.w	r0, #540	; 0x21c
 80032fc:	f000 ffee 	bl	80042dc <USBD_static_malloc>
 8003300:	4606      	mov	r6, r0
 8003302:	f8c4 0218 	str.w	r0, [r4, #536]	; 0x218
  if(pdev->pClassData == NULL)
 8003306:	b320      	cbz	r0, 8003352 <USBD_CDC_Init+0x88>
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 8003308:	f8d4 321c 	ldr.w	r3, [r4, #540]	; 0x21c
 800330c:	681b      	ldr	r3, [r3, #0]
 800330e:	4798      	blx	r3
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 8003310:	7c27      	ldrb	r7, [r4, #16]
    hcdc->TxState =0;
 8003312:	2500      	movs	r5, #0
 8003314:	f8c6 5214 	str.w	r5, [r6, #532]	; 0x214
    hcdc->RxState =0;
 8003318:	f8c6 5218 	str.w	r5, [r6, #536]	; 0x218
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 800331c:	b987      	cbnz	r7, 8003340 <USBD_CDC_Init+0x76>
      USBD_LL_PrepareReceive(pdev,
 800331e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003322:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003326:	2101      	movs	r1, #1
 8003328:	4620      	mov	r0, r4
 800332a:	f000 ff9f 	bl	800426c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800332e:	4638      	mov	r0, r7
 8003330:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    USBD_LL_OpenEP(pdev,
 8003332:	2340      	movs	r3, #64	; 0x40
 8003334:	2202      	movs	r2, #2
 8003336:	2181      	movs	r1, #129	; 0x81
 8003338:	f000 ff32 	bl	80041a0 <USBD_LL_OpenEP>
    USBD_LL_OpenEP(pdev,
 800333c:	2340      	movs	r3, #64	; 0x40
 800333e:	e7d0      	b.n	80032e2 <USBD_CDC_Init+0x18>
      USBD_LL_PrepareReceive(pdev,
 8003340:	2340      	movs	r3, #64	; 0x40
 8003342:	f8d6 2204 	ldr.w	r2, [r6, #516]	; 0x204
 8003346:	2101      	movs	r1, #1
 8003348:	4620      	mov	r0, r4
 800334a:	f000 ff8f 	bl	800426c <USBD_LL_PrepareReceive>
  uint8_t ret = 0;
 800334e:	4628      	mov	r0, r5
 8003350:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ret = 1; 
 8003352:	2001      	movs	r0, #1
}
 8003354:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08003356 <USBD_CDC_RegisterInterface>:
uint8_t  USBD_CDC_RegisterInterface  (USBD_HandleTypeDef   *pdev, 
                                      USBD_CDC_ItfTypeDef *fops)
{
  uint8_t  ret = USBD_FAIL;
  
  if(fops != NULL)
 8003356:	b119      	cbz	r1, 8003360 <USBD_CDC_RegisterInterface+0xa>
  {
    pdev->pUserData= fops;
 8003358:	f8c0 121c 	str.w	r1, [r0, #540]	; 0x21c
    ret = USBD_OK;    
 800335c:	2000      	movs	r0, #0
 800335e:	4770      	bx	lr
  uint8_t  ret = USBD_FAIL;
 8003360:	2002      	movs	r0, #2
  }
  
  return ret;
}
 8003362:	4770      	bx	lr

08003364 <USBD_CDC_SetTxBuffer>:
  */
uint8_t  USBD_CDC_SetTxBuffer  (USBD_HandleTypeDef   *pdev,
                                uint8_t  *pbuff,
                                uint16_t length)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003364:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  hcdc->TxBuffer = pbuff;
  hcdc->TxLength = length;  
  
  return USBD_OK;  
}
 8003368:	2000      	movs	r0, #0
  hcdc->TxBuffer = pbuff;
 800336a:	f8c3 1208 	str.w	r1, [r3, #520]	; 0x208
  hcdc->TxLength = length;  
 800336e:	f8c3 2210 	str.w	r2, [r3, #528]	; 0x210
}
 8003372:	4770      	bx	lr

08003374 <USBD_CDC_SetRxBuffer>:
uint8_t  USBD_CDC_SetRxBuffer  (USBD_HandleTypeDef   *pdev,
                                   uint8_t  *pbuff)
{
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
  
  hcdc->RxBuffer = pbuff;
 8003374:	f8d0 3218 	ldr.w	r3, [r0, #536]	; 0x218
  
  return USBD_OK;
}
 8003378:	2000      	movs	r0, #0
  hcdc->RxBuffer = pbuff;
 800337a:	f8c3 1204 	str.w	r1, [r3, #516]	; 0x204
}
 800337e:	4770      	bx	lr

08003380 <USBD_CDC_TransmitPacket>:
  * @param  epnum: endpoint number
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 8003380:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 8003384:	b510      	push	{r4, lr}
  
  if(pdev->pClassData != NULL)
 8003386:	b172      	cbz	r2, 80033a6 <USBD_CDC_TransmitPacket+0x26>
  {
    if(hcdc->TxState == 0)
 8003388:	f8d2 4214 	ldr.w	r4, [r2, #532]	; 0x214
 800338c:	2301      	movs	r3, #1
 800338e:	b964      	cbnz	r4, 80033aa <USBD_CDC_TransmitPacket+0x2a>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1;
 8003390:	f8c2 3214 	str.w	r3, [r2, #532]	; 0x214
      
      /* Transmit next packet */
      USBD_LL_Transmit(pdev,
 8003394:	2181      	movs	r1, #129	; 0x81
 8003396:	f8b2 3210 	ldrh.w	r3, [r2, #528]	; 0x210
 800339a:	f8d2 2208 	ldr.w	r2, [r2, #520]	; 0x208
 800339e:	f000 ff57 	bl	8004250 <USBD_LL_Transmit>
                       CDC_IN_EP,
                       hcdc->TxBuffer,
                       hcdc->TxLength);
      
      return USBD_OK;
 80033a2:	4620      	mov	r0, r4
 80033a4:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
    }
  }
  else
  {
    return USBD_FAIL;
 80033a6:	2002      	movs	r0, #2
 80033a8:	bd10      	pop	{r4, pc}
      return USBD_BUSY;
 80033aa:	4618      	mov	r0, r3
  }
}
 80033ac:	bd10      	pop	{r4, pc}

080033ae <USBD_CDC_ReceivePacket>:
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{      
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef*) pdev->pClassData;
 80033ae:	f8d0 2218 	ldr.w	r2, [r0, #536]	; 0x218
{      
 80033b2:	b510      	push	{r4, lr}
  
  /* Suspend or Resume USB Out process */
  if(pdev->pClassData != NULL)
 80033b4:	b162      	cbz	r2, 80033d0 <USBD_CDC_ReceivePacket+0x22>
  {
    if(pdev->dev_speed == USBD_SPEED_HIGH  ) 
 80033b6:	7c04      	ldrb	r4, [r0, #16]
 80033b8:	b944      	cbnz	r4, 80033cc <USBD_CDC_ReceivePacket+0x1e>
    {      
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80033ba:	f44f 7300 	mov.w	r3, #512	; 0x200
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 80033be:	f8d2 2204 	ldr.w	r2, [r2, #516]	; 0x204
 80033c2:	2101      	movs	r1, #1
 80033c4:	f000 ff52 	bl	800426c <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 80033c8:	2000      	movs	r0, #0
 80033ca:	bd10      	pop	{r4, pc}
      USBD_LL_PrepareReceive(pdev,
 80033cc:	2340      	movs	r3, #64	; 0x40
 80033ce:	e7f6      	b.n	80033be <USBD_CDC_ReceivePacket+0x10>
  }
  else
  {
    return USBD_FAIL;
 80033d0:	2002      	movs	r0, #2
  }
}
 80033d2:	bd10      	pop	{r4, pc}

080033d4 <USBD_Init>:
* @param  pdesc: Descriptor structure address
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev, USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80033d4:	b508      	push	{r3, lr}
  /* Check whether the USB Host handle is valid */
  if(pdev == NULL)
 80033d6:	b180      	cbz	r0, 80033fa <USBD_Init+0x26>
    USBD_ErrLog("Invalid Device handle");
    return USBD_FAIL; 
  }
  
  /* Unlink previous class*/
  if(pdev->pClass != NULL)
 80033d8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80033dc:	b113      	cbz	r3, 80033e4 <USBD_Init+0x10>
  {
    pdev->pClass = NULL;
 80033de:	2300      	movs	r3, #0
 80033e0:	f8c0 3214 	str.w	r3, [r0, #532]	; 0x214
  }
  
  /* Assign USBD Descriptors */
  if(pdesc != NULL)
 80033e4:	b109      	cbz	r1, 80033ea <USBD_Init+0x16>
  {
    pdev->pDesc = pdesc;
 80033e6:	f8c0 1210 	str.w	r1, [r0, #528]	; 0x210
  }
  
  /* Set Device initial State */
  pdev->dev_state  = USBD_STATE_DEFAULT;
 80033ea:	2301      	movs	r3, #1
 80033ec:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  pdev->id = id;
 80033f0:	7002      	strb	r2, [r0, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 80033f2:	f000 fe89 	bl	8004108 <USBD_LL_Init>
  
  return USBD_OK; 
 80033f6:	2000      	movs	r0, #0
 80033f8:	bd08      	pop	{r3, pc}
    return USBD_FAIL; 
 80033fa:	2002      	movs	r0, #2
}
 80033fc:	bd08      	pop	{r3, pc}

080033fe <USBD_RegisterClass>:
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
  USBD_StatusTypeDef   status = USBD_OK;
  if(pclass != 0)
 80033fe:	b119      	cbz	r1, 8003408 <USBD_RegisterClass+0xa>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8003400:	f8c0 1214 	str.w	r1, [r0, #532]	; 0x214
    status = USBD_OK;
 8003404:	2000      	movs	r0, #0
 8003406:	4770      	bx	lr
  }
  else
  {
    USBD_ErrLog("Invalid Class handle");
    status = USBD_FAIL; 
 8003408:	2002      	movs	r0, #2
  }
  
  return status;
}
 800340a:	4770      	bx	lr

0800340c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start  (USBD_HandleTypeDef *pdev)
{
 800340c:	b508      	push	{r3, lr}
  
  /* Start the low level driver  */
  USBD_LL_Start(pdev); 
 800340e:	f000 feb9 	bl	8004184 <USBD_LL_Start>
  
  return USBD_OK;  
}
 8003412:	2000      	movs	r0, #0
 8003414:	bd08      	pop	{r3, pc}

08003416 <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8003416:	b508      	push	{r3, lr}
  USBD_StatusTypeDef   ret = USBD_FAIL;
  
  if(pdev->pClass != NULL)
 8003418:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 800341c:	b90b      	cbnz	r3, 8003422 <USBD_SetClassConfig+0xc>
  USBD_StatusTypeDef   ret = USBD_FAIL;
 800341e:	2002      	movs	r0, #2
 8003420:	bd08      	pop	{r3, pc}
  {
    /* Set configuration  and Start the Class*/
    if(pdev->pClass->Init(pdev, cfgidx) == 0)
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	4798      	blx	r3
 8003426:	2800      	cmp	r0, #0
 8003428:	d1f9      	bne.n	800341e <USBD_SetClassConfig+0x8>
    {
      ret = USBD_OK;
    }
  }
  return ret; 
}
 800342a:	bd08      	pop	{r3, pc}

0800342c <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 800342c:	b508      	push	{r3, lr}
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);  
 800342e:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	4798      	blx	r3
  return USBD_OK;
}
 8003436:	2000      	movs	r0, #0
 8003438:	bd08      	pop	{r3, pc}

0800343a <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800343a:	b538      	push	{r3, r4, r5, lr}
 800343c:	4604      	mov	r4, r0

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800343e:	f500 7502 	add.w	r5, r0, #520	; 0x208
 8003442:	4628      	mov	r0, r5
 8003444:	f000 fa6d 	bl	8003922 <USBD_ParseSetupRequest>
  
  pdev->ep0_state = USBD_EP0_SETUP;
 8003448:	2301      	movs	r3, #1
  pdev->ep0_data_len = pdev->request.wLength;
  
  switch (pdev->request.bmRequest & 0x1F) 
 800344a:	f894 1208 	ldrb.w	r1, [r4, #520]	; 0x208
  pdev->ep0_state = USBD_EP0_SETUP;
 800344e:	f8c4 31f4 	str.w	r3, [r4, #500]	; 0x1f4
  pdev->ep0_data_len = pdev->request.wLength;
 8003452:	f8b4 320e 	ldrh.w	r3, [r4, #526]	; 0x20e
 8003456:	f8c4 31f8 	str.w	r3, [r4, #504]	; 0x1f8
  switch (pdev->request.bmRequest & 0x1F) 
 800345a:	f001 031f 	and.w	r3, r1, #31
 800345e:	2b01      	cmp	r3, #1
 8003460:	d00e      	beq.n	8003480 <USBD_LL_SetupStage+0x46>
 8003462:	d307      	bcc.n	8003474 <USBD_LL_SetupStage+0x3a>
 8003464:	2b02      	cmp	r3, #2
 8003466:	d010      	beq.n	800348a <USBD_LL_SetupStage+0x50>
  case USB_REQ_RECIPIENT_ENDPOINT:        
    USBD_StdEPReq(pdev, &pdev->request);   
    break;
    
  default:           
    USBD_LL_StallEP(pdev , pdev->request.bmRequest & 0x80);
 8003468:	f001 0180 	and.w	r1, r1, #128	; 0x80
 800346c:	4620      	mov	r0, r4
 800346e:	f000 feb5 	bl	80041dc <USBD_LL_StallEP>
    break;
 8003472:	e003      	b.n	800347c <USBD_LL_SetupStage+0x42>
    USBD_StdDevReq (pdev, &pdev->request);
 8003474:	4629      	mov	r1, r5
 8003476:	4620      	mov	r0, r4
 8003478:	f000 f8d6 	bl	8003628 <USBD_StdDevReq>
  }  
  return USBD_OK;  
}
 800347c:	2000      	movs	r0, #0
 800347e:	bd38      	pop	{r3, r4, r5, pc}
    USBD_StdItfReq(pdev, &pdev->request);
 8003480:	4629      	mov	r1, r5
 8003482:	4620      	mov	r0, r4
 8003484:	f000 f9d2 	bl	800382c <USBD_StdItfReq>
    break;
 8003488:	e7f8      	b.n	800347c <USBD_LL_SetupStage+0x42>
    USBD_StdEPReq(pdev, &pdev->request);   
 800348a:	4629      	mov	r1, r5
 800348c:	4620      	mov	r0, r4
 800348e:	f000 f9e5 	bl	800385c <USBD_StdEPReq>
    break;
 8003492:	e7f3      	b.n	800347c <USBD_LL_SetupStage+0x42>

08003494 <USBD_LL_DataOutStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev , uint8_t epnum, uint8_t *pdata)
{
 8003494:	b538      	push	{r3, r4, r5, lr}
 8003496:	4604      	mov	r4, r0
 8003498:	4615      	mov	r5, r2
  USBD_EndpointTypeDef    *pep;
  
  if(epnum == 0) 
 800349a:	bb11      	cbnz	r1, 80034e2 <USBD_LL_DataOutStage+0x4e>
  {
    pep = &pdev->ep_out[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_OUT)
 800349c:	f8d0 31f4 	ldr.w	r3, [r0, #500]	; 0x1f4
 80034a0:	2b03      	cmp	r3, #3
 80034a2:	d10f      	bne.n	80034c4 <USBD_LL_DataOutStage+0x30>
    {
      if(pep->rem_length > pep->maxpacket)
 80034a4:	f8d0 310c 	ldr.w	r3, [r0, #268]	; 0x10c
 80034a8:	f8d0 2110 	ldr.w	r2, [r0, #272]	; 0x110
 80034ac:	4293      	cmp	r3, r2
 80034ae:	d90b      	bls.n	80034c8 <USBD_LL_DataOutStage+0x34>
      {
        pep->rem_length -=  pep->maxpacket;
 80034b0:	1a9b      	subs	r3, r3, r2
       
        USBD_CtlContinueRx (pdev, 
                            pdata,
                            MIN(pep->rem_length ,pep->maxpacket));
 80034b2:	429a      	cmp	r2, r3
 80034b4:	bf28      	it	cs
 80034b6:	461a      	movcs	r2, r3
        pep->rem_length -=  pep->maxpacket;
 80034b8:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
        USBD_CtlContinueRx (pdev, 
 80034bc:	b292      	uxth	r2, r2
 80034be:	4629      	mov	r1, r5
 80034c0:	f000 fa83 	bl	80039ca <USBD_CtlContinueRx>
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataOut(pdev, epnum); 
  }  
  return USBD_OK;
}
 80034c4:	2000      	movs	r0, #0
 80034c6:	bd38      	pop	{r3, r4, r5, pc}
        if((pdev->pClass->EP0_RxReady != NULL)&&
 80034c8:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80034cc:	691b      	ldr	r3, [r3, #16]
 80034ce:	b123      	cbz	r3, 80034da <USBD_LL_DataOutStage+0x46>
 80034d0:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80034d4:	2a03      	cmp	r2, #3
 80034d6:	d100      	bne.n	80034da <USBD_LL_DataOutStage+0x46>
          pdev->pClass->EP0_RxReady(pdev); 
 80034d8:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80034da:	4620      	mov	r0, r4
 80034dc:	f000 fa7d 	bl	80039da <USBD_CtlSendStatus>
 80034e0:	e7f0      	b.n	80034c4 <USBD_LL_DataOutStage+0x30>
  else if((pdev->pClass->DataOut != NULL)&&
 80034e2:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80034e6:	699b      	ldr	r3, [r3, #24]
 80034e8:	2b00      	cmp	r3, #0
 80034ea:	d0eb      	beq.n	80034c4 <USBD_LL_DataOutStage+0x30>
 80034ec:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80034f0:	2a03      	cmp	r2, #3
 80034f2:	d1e7      	bne.n	80034c4 <USBD_LL_DataOutStage+0x30>
    pdev->pClass->DataOut(pdev, epnum); 
 80034f4:	4798      	blx	r3
 80034f6:	e7e5      	b.n	80034c4 <USBD_LL_DataOutStage+0x30>

080034f8 <USBD_LL_DataInStage>:
* @param  pdev: device instance
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev ,uint8_t epnum, uint8_t *pdata)
{
 80034f8:	b570      	push	{r4, r5, r6, lr}
 80034fa:	4613      	mov	r3, r2
 80034fc:	4604      	mov	r4, r0
  USBD_EndpointTypeDef    *pep;
    
  if(epnum == 0) 
 80034fe:	460e      	mov	r6, r1
 8003500:	2900      	cmp	r1, #0
 8003502:	d13d      	bne.n	8003580 <USBD_LL_DataInStage+0x88>
  {
    pep = &pdev->ep_in[0];
    
    if ( pdev->ep0_state == USBD_EP0_DATA_IN)
 8003504:	f8d0 21f4 	ldr.w	r2, [r0, #500]	; 0x1f4
 8003508:	2a02      	cmp	r2, #2
 800350a:	d10f      	bne.n	800352c <USBD_LL_DataInStage+0x34>
    {
      if(pep->rem_length > pep->maxpacket)
 800350c:	69c5      	ldr	r5, [r0, #28]
 800350e:	6a02      	ldr	r2, [r0, #32]
 8003510:	4295      	cmp	r5, r2
 8003512:	d914      	bls.n	800353e <USBD_LL_DataInStage+0x46>
      {
        pep->rem_length -=  pep->maxpacket;
 8003514:	1aaa      	subs	r2, r5, r2
 8003516:	61c2      	str	r2, [r0, #28]
        
        USBD_CtlContinueSendData (pdev, 
 8003518:	4619      	mov	r1, r3
 800351a:	b292      	uxth	r2, r2
 800351c:	f000 fa3e 	bl	800399c <USBD_CtlContinueSendData>
                                  pdata, 
                                  pep->rem_length);
        
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003520:	4633      	mov	r3, r6
          
          USBD_CtlContinueSendData(pdev , NULL, 0);
          pdev->ep0_data_len = 0;
          
        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive (pdev,
 8003522:	461a      	mov	r2, r3
 8003524:	4619      	mov	r1, r3
 8003526:	4620      	mov	r0, r4
 8003528:	f000 fea0 	bl	800426c <USBD_LL_PrepareReceive>
          }          
          USBD_CtlReceiveStatus(pdev);
        }
      }
    }
    if (pdev->dev_test_mode == 1)
 800352c:	f894 3200 	ldrb.w	r3, [r4, #512]	; 0x200
 8003530:	2b01      	cmp	r3, #1
 8003532:	d102      	bne.n	800353a <USBD_LL_DataInStage+0x42>
    {
      USBD_RunTestMode(pdev); 
      pdev->dev_test_mode = 0;
 8003534:	2300      	movs	r3, #0
 8003536:	f884 3200 	strb.w	r3, [r4, #512]	; 0x200
          (pdev->dev_state == USBD_STATE_CONFIGURED))
  {
    pdev->pClass->DataIn(pdev, epnum); 
  }  
  return USBD_OK;
}
 800353a:	2000      	movs	r0, #0
 800353c:	bd70      	pop	{r4, r5, r6, pc}
        if((pep->total_length % pep->maxpacket == 0) &&
 800353e:	6983      	ldr	r3, [r0, #24]
 8003540:	fbb3 f5f2 	udiv	r5, r3, r2
 8003544:	fb02 3515 	mls	r5, r2, r5, r3
 8003548:	b965      	cbnz	r5, 8003564 <USBD_LL_DataInStage+0x6c>
 800354a:	429a      	cmp	r2, r3
 800354c:	d80a      	bhi.n	8003564 <USBD_LL_DataInStage+0x6c>
           (pep->total_length >= pep->maxpacket) &&
 800354e:	f8d0 21f8 	ldr.w	r2, [r0, #504]	; 0x1f8
 8003552:	4293      	cmp	r3, r2
 8003554:	d206      	bcs.n	8003564 <USBD_LL_DataInStage+0x6c>
          USBD_CtlContinueSendData(pdev , NULL, 0);
 8003556:	462a      	mov	r2, r5
 8003558:	f000 fa20 	bl	800399c <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0;
 800355c:	f8c4 51f8 	str.w	r5, [r4, #504]	; 0x1f8
        USBD_LL_PrepareReceive (pdev,
 8003560:	462b      	mov	r3, r5
 8003562:	e7de      	b.n	8003522 <USBD_LL_DataInStage+0x2a>
          if((pdev->pClass->EP0_TxSent != NULL)&&
 8003564:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 8003568:	68db      	ldr	r3, [r3, #12]
 800356a:	b12b      	cbz	r3, 8003578 <USBD_LL_DataInStage+0x80>
 800356c:	f894 21fc 	ldrb.w	r2, [r4, #508]	; 0x1fc
 8003570:	2a03      	cmp	r2, #3
 8003572:	d101      	bne.n	8003578 <USBD_LL_DataInStage+0x80>
            pdev->pClass->EP0_TxSent(pdev); 
 8003574:	4620      	mov	r0, r4
 8003576:	4798      	blx	r3
          USBD_CtlReceiveStatus(pdev);
 8003578:	4620      	mov	r0, r4
 800357a:	f000 fa39 	bl	80039f0 <USBD_CtlReceiveStatus>
 800357e:	e7d5      	b.n	800352c <USBD_LL_DataInStage+0x34>
  else if((pdev->pClass->DataIn != NULL)&& 
 8003580:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003584:	695b      	ldr	r3, [r3, #20]
 8003586:	2b00      	cmp	r3, #0
 8003588:	d0d7      	beq.n	800353a <USBD_LL_DataInStage+0x42>
 800358a:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800358e:	2a03      	cmp	r2, #3
 8003590:	d1d3      	bne.n	800353a <USBD_LL_DataInStage+0x42>
    pdev->pClass->DataIn(pdev, epnum); 
 8003592:	4798      	blx	r3
 8003594:	e7d1      	b.n	800353a <USBD_LL_DataInStage+0x42>

08003596 <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef  *pdev)
{
 8003596:	b538      	push	{r3, r4, r5, lr}
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev,
 8003598:	2200      	movs	r2, #0
{
 800359a:	4604      	mov	r4, r0
  USBD_LL_OpenEP(pdev,
 800359c:	4611      	mov	r1, r2
              0x00,
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800359e:	2540      	movs	r5, #64	; 0x40
  USBD_LL_OpenEP(pdev,
 80035a0:	2340      	movs	r3, #64	; 0x40
 80035a2:	f000 fdfd 	bl	80041a0 <USBD_LL_OpenEP>
  
  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev,
 80035a6:	462b      	mov	r3, r5
  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80035a8:	f8c4 5110 	str.w	r5, [r4, #272]	; 0x110
  USBD_LL_OpenEP(pdev,
 80035ac:	2200      	movs	r2, #0
 80035ae:	2180      	movs	r1, #128	; 0x80
 80035b0:	4620      	mov	r0, r4
 80035b2:	f000 fdf5 	bl	80041a0 <USBD_LL_OpenEP>
              USBD_EP_TYPE_CTRL,
              USB_MAX_EP0_SIZE);
  
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80035b6:	2301      	movs	r3, #1
 80035b8:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
  
  if (pdev->pClassData) 
 80035bc:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80035c0:	6225      	str	r5, [r4, #32]
  if (pdev->pClassData) 
 80035c2:	b12b      	cbz	r3, 80035d0 <USBD_LL_Reset+0x3a>
    pdev->pClass->DeInit(pdev, pdev->dev_config);  
 80035c4:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80035c8:	7921      	ldrb	r1, [r4, #4]
 80035ca:	685b      	ldr	r3, [r3, #4]
 80035cc:	4620      	mov	r0, r4
 80035ce:	4798      	blx	r3
 
  
  return USBD_OK;
}
 80035d0:	2000      	movs	r0, #0
 80035d2:	bd38      	pop	{r3, r4, r5, pc}

080035d4 <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef  *pdev, USBD_SpeedTypeDef speed)
{
  pdev->dev_speed = speed;
 80035d4:	7401      	strb	r1, [r0, #16]
  return USBD_OK;
}
 80035d6:	2000      	movs	r0, #0
 80035d8:	4770      	bx	lr

080035da <USBD_LL_Suspend>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_old_state =  pdev->dev_state;
 80035da:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80035de:	f880 31fd 	strb.w	r3, [r0, #509]	; 0x1fd
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 80035e2:	2304      	movs	r3, #4
 80035e4:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80035e8:	2000      	movs	r0, #0
 80035ea:	4770      	bx	lr

080035ec <USBD_LL_Resume>:
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef  *pdev)
{
  pdev->dev_state = pdev->dev_old_state;  
 80035ec:	f890 31fd 	ldrb.w	r3, [r0, #509]	; 0x1fd
 80035f0:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
  return USBD_OK;
}
 80035f4:	2000      	movs	r0, #0
 80035f6:	4770      	bx	lr

080035f8 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef  *pdev)
{
 80035f8:	b508      	push	{r3, lr}
  if(pdev->dev_state == USBD_STATE_CONFIGURED)
 80035fa:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80035fe:	2a03      	cmp	r2, #3
 8003600:	d104      	bne.n	800360c <USBD_LL_SOF+0x14>
  {
    if(pdev->pClass->SOF != NULL)
 8003602:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	b103      	cbz	r3, 800360c <USBD_LL_SOF+0x14>
    {
      pdev->pClass->SOF(pdev);
 800360a:	4798      	blx	r3
    }
  }
  return USBD_OK;
}
 800360c:	2000      	movs	r0, #0
 800360e:	bd08      	pop	{r3, pc}

08003610 <USBD_CtlError.constprop.0>:
* @param  pdev: device instance
* @param  req: usb request
* @retval None
*/

void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003610:	b510      	push	{r4, lr}
                            USBD_SetupReqTypedef *req)
{
  USBD_LL_StallEP(pdev , 0x80);
 8003612:	2180      	movs	r1, #128	; 0x80
void USBD_CtlError( USBD_HandleTypeDef *pdev ,
 8003614:	4604      	mov	r4, r0
  USBD_LL_StallEP(pdev , 0x80);
 8003616:	f000 fde1 	bl	80041dc <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev , 0);
 800361a:	4620      	mov	r0, r4
 800361c:	2100      	movs	r1, #0
}
 800361e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_StallEP(pdev , 0);
 8003622:	f000 bddb 	b.w	80041dc <USBD_LL_StallEP>
	...

08003628 <USBD_StdDevReq>:
{
 8003628:	b537      	push	{r0, r1, r2, r4, r5, lr}
  switch (req->bRequest) 
 800362a:	784b      	ldrb	r3, [r1, #1]
{
 800362c:	4604      	mov	r4, r0
 800362e:	460d      	mov	r5, r1
  switch (req->bRequest) 
 8003630:	2b09      	cmp	r3, #9
 8003632:	f200 8082 	bhi.w	800373a <USBD_StdDevReq+0x112>
 8003636:	e8df f013 	tbh	[pc, r3, lsl #1]
 800363a:	00d1      	.short	0x00d1
 800363c:	008000ed 	.word	0x008000ed
 8003640:	008000e1 	.word	0x008000e1
 8003644:	000a0075 	.word	0x000a0075
 8003648:	00c10080 	.word	0x00c10080
 800364c:	0095      	.short	0x0095
  switch (req->wValue >> 8)
 800364e:	884b      	ldrh	r3, [r1, #2]
 8003650:	0a1a      	lsrs	r2, r3, #8
 8003652:	3a01      	subs	r2, #1
 8003654:	2a0e      	cmp	r2, #14
 8003656:	d870      	bhi.n	800373a <USBD_StdDevReq+0x112>
 8003658:	e8df f002 	tbb	[pc, r2]
 800365c:	6f312420 	.word	0x6f312420
 8003660:	6f5a516f 	.word	0x6f5a516f
 8003664:	6f6f6f6f 	.word	0x6f6f6f6f
 8003668:	6f6f      	.short	0x6f6f
 800366a:	08          	.byte	0x08
 800366b:	00          	.byte	0x00
    pbuf = pdev->pDesc->GetBOSDescriptor(pdev->dev_speed, &len);
 800366c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 8003670:	69db      	ldr	r3, [r3, #28]
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8003672:	7c20      	ldrb	r0, [r4, #16]
 8003674:	f10d 0106 	add.w	r1, sp, #6
 8003678:	4798      	blx	r3
  if((len != 0)&& (req->wLength != 0))
 800367a:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 800367e:	2a00      	cmp	r2, #0
 8003680:	d06b      	beq.n	800375a <USBD_StdDevReq+0x132>
 8003682:	88eb      	ldrh	r3, [r5, #6]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d068      	beq.n	800375a <USBD_StdDevReq+0x132>
    len = MIN(len , req->wLength);
 8003688:	429a      	cmp	r2, r3
 800368a:	bf28      	it	cs
 800368c:	461a      	movcs	r2, r3
 800368e:	f8ad 2006 	strh.w	r2, [sp, #6]
    USBD_CtlSendData (pdev, 
 8003692:	4601      	mov	r1, r0
    USBD_CtlSendData (pdev, 
 8003694:	4620      	mov	r0, r4
 8003696:	f000 f974 	bl	8003982 <USBD_CtlSendData>
 800369a:	e05e      	b.n	800375a <USBD_StdDevReq+0x132>
    pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800369c:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	e7e6      	b.n	8003672 <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH )   
 80036a4:	7c02      	ldrb	r2, [r0, #16]
 80036a6:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 80036aa:	b932      	cbnz	r2, 80036ba <USBD_StdDevReq+0x92>
      pbuf   = (uint8_t *)pdev->pClass->GetHSConfigDescriptor(&len);
 80036ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80036ae:	f10d 0006 	add.w	r0, sp, #6
 80036b2:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80036b4:	2302      	movs	r3, #2
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80036b6:	7043      	strb	r3, [r0, #1]
 80036b8:	e7df      	b.n	800367a <USBD_StdDevReq+0x52>
      pbuf   = (uint8_t *)pdev->pClass->GetFSConfigDescriptor(&len);
 80036ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036bc:	e7f7      	b.n	80036ae <USBD_StdDevReq+0x86>
    switch ((uint8_t)(req->wValue))
 80036be:	b2db      	uxtb	r3, r3
 80036c0:	2b05      	cmp	r3, #5
 80036c2:	d83a      	bhi.n	800373a <USBD_StdDevReq+0x112>
 80036c4:	e8df f003 	tbb	[pc, r3]
 80036c8:	0f0b0703 	.word	0x0f0b0703
 80036cc:	1713      	.short	0x1713
     pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);        
 80036ce:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	e7cd      	b.n	8003672 <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80036d6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	e7c9      	b.n	8003672 <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80036de:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	e7c5      	b.n	8003672 <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80036e6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80036ea:	691b      	ldr	r3, [r3, #16]
 80036ec:	e7c1      	b.n	8003672 <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80036ee:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80036f2:	695b      	ldr	r3, [r3, #20]
 80036f4:	e7bd      	b.n	8003672 <USBD_StdDevReq+0x4a>
      pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80036f6:	f8d0 3210 	ldr.w	r3, [r0, #528]	; 0x210
 80036fa:	699b      	ldr	r3, [r3, #24]
 80036fc:	e7b9      	b.n	8003672 <USBD_StdDevReq+0x4a>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 80036fe:	7c03      	ldrb	r3, [r0, #16]
 8003700:	b9db      	cbnz	r3, 800373a <USBD_StdDevReq+0x112>
      pbuf   = (uint8_t *)pdev->pClass->GetDeviceQualifierDescriptor(&len);
 8003702:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003706:	f10d 0006 	add.w	r0, sp, #6
 800370a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800370c:	4798      	blx	r3
 800370e:	e7b4      	b.n	800367a <USBD_StdDevReq+0x52>
    if(pdev->dev_speed == USBD_SPEED_HIGH  )   
 8003710:	7c03      	ldrb	r3, [r0, #16]
 8003712:	b993      	cbnz	r3, 800373a <USBD_StdDevReq+0x112>
      pbuf   = (uint8_t *)pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8003714:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003718:	f10d 0006 	add.w	r0, sp, #6
 800371c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800371e:	4798      	blx	r3
      pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8003720:	2307      	movs	r3, #7
 8003722:	e7c8      	b.n	80036b6 <USBD_StdDevReq+0x8e>
  if ((req->wIndex == 0) && (req->wLength == 0)) 
 8003724:	888b      	ldrh	r3, [r1, #4]
 8003726:	b943      	cbnz	r3, 800373a <USBD_StdDevReq+0x112>
 8003728:	88cb      	ldrh	r3, [r1, #6]
 800372a:	b933      	cbnz	r3, 800373a <USBD_StdDevReq+0x112>
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 800372c:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003730:	788d      	ldrb	r5, [r1, #2]
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003732:	2b03      	cmp	r3, #3
    dev_addr = (uint8_t)(req->wValue) & 0x7F;     
 8003734:	f005 057f 	and.w	r5, r5, #127	; 0x7f
    if (pdev->dev_state == USBD_STATE_CONFIGURED) 
 8003738:	d103      	bne.n	8003742 <USBD_StdDevReq+0x11a>
    USBD_CtlError(pdev , req);
 800373a:	4620      	mov	r0, r4
 800373c:	f7ff ff68 	bl	8003610 <USBD_CtlError.constprop.0>
    break;
 8003740:	e00b      	b.n	800375a <USBD_StdDevReq+0x132>
      pdev->dev_address = dev_addr;
 8003742:	f880 51fe 	strb.w	r5, [r0, #510]	; 0x1fe
      USBD_LL_SetUSBAddress(pdev, dev_addr);               
 8003746:	4629      	mov	r1, r5
 8003748:	f000 fd74 	bl	8004234 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);                         
 800374c:	4620      	mov	r0, r4
 800374e:	f000 f944 	bl	80039da <USBD_CtlSendStatus>
      if (dev_addr != 0) 
 8003752:	b12d      	cbz	r5, 8003760 <USBD_StdDevReq+0x138>
        pdev->dev_state  = USBD_STATE_ADDRESSED;
 8003754:	2302      	movs	r3, #2
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003756:	f884 31fc 	strb.w	r3, [r4, #508]	; 0x1fc
}
 800375a:	2000      	movs	r0, #0
 800375c:	b003      	add	sp, #12
 800375e:	bd30      	pop	{r4, r5, pc}
        pdev->dev_state  = USBD_STATE_DEFAULT; 
 8003760:	2301      	movs	r3, #1
 8003762:	e7f8      	b.n	8003756 <USBD_StdDevReq+0x12e>
  cfgidx = (uint8_t)(req->wValue);                 
 8003764:	7889      	ldrb	r1, [r1, #2]
 8003766:	4d30      	ldr	r5, [pc, #192]	; (8003828 <USBD_StdDevReq+0x200>)
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 8003768:	2901      	cmp	r1, #1
  cfgidx = (uint8_t)(req->wValue);                 
 800376a:	7029      	strb	r1, [r5, #0]
  if (cfgidx > USBD_MAX_NUM_CONFIGURATION ) 
 800376c:	d8e5      	bhi.n	800373a <USBD_StdDevReq+0x112>
    switch (pdev->dev_state) 
 800376e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003772:	2b02      	cmp	r3, #2
 8003774:	d00c      	beq.n	8003790 <USBD_StdDevReq+0x168>
 8003776:	2b03      	cmp	r3, #3
 8003778:	d1df      	bne.n	800373a <USBD_StdDevReq+0x112>
      if (cfgidx == 0) 
 800377a:	b9b1      	cbnz	r1, 80037aa <USBD_StdDevReq+0x182>
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800377c:	2302      	movs	r3, #2
 800377e:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        pdev->dev_config = cfgidx;          
 8003782:	6041      	str	r1, [r0, #4]
        USBD_ClrClassConfig(pdev , cfgidx);
 8003784:	f7ff fe52 	bl	800342c <USBD_ClrClassConfig>
      USBD_CtlSendStatus(pdev);
 8003788:	4620      	mov	r0, r4
 800378a:	f000 f926 	bl	80039da <USBD_CtlSendStatus>
 800378e:	e7e4      	b.n	800375a <USBD_StdDevReq+0x132>
      if (cfgidx) 
 8003790:	2900      	cmp	r1, #0
 8003792:	d0f9      	beq.n	8003788 <USBD_StdDevReq+0x160>
        pdev->dev_config = cfgidx;
 8003794:	2101      	movs	r1, #1
        pdev->dev_state = USBD_STATE_CONFIGURED;
 8003796:	2303      	movs	r3, #3
        pdev->dev_config = cfgidx;
 8003798:	6041      	str	r1, [r0, #4]
        pdev->dev_state = USBD_STATE_CONFIGURED;
 800379a:	f880 31fc 	strb.w	r3, [r0, #508]	; 0x1fc
        if(USBD_SetClassConfig(pdev , cfgidx) == USBD_FAIL)
 800379e:	4620      	mov	r0, r4
 80037a0:	f7ff fe39 	bl	8003416 <USBD_SetClassConfig>
 80037a4:	2802      	cmp	r0, #2
 80037a6:	d1ef      	bne.n	8003788 <USBD_StdDevReq+0x160>
 80037a8:	e7c7      	b.n	800373a <USBD_StdDevReq+0x112>
      else  if (cfgidx != pdev->dev_config) 
 80037aa:	6841      	ldr	r1, [r0, #4]
 80037ac:	2901      	cmp	r1, #1
 80037ae:	d0eb      	beq.n	8003788 <USBD_StdDevReq+0x160>
        USBD_ClrClassConfig(pdev , pdev->dev_config);
 80037b0:	b2c9      	uxtb	r1, r1
 80037b2:	f7ff fe3b 	bl	800342c <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80037b6:	7829      	ldrb	r1, [r5, #0]
 80037b8:	6061      	str	r1, [r4, #4]
 80037ba:	e7f0      	b.n	800379e <USBD_StdDevReq+0x176>
  if (req->wLength != 1) 
 80037bc:	88ca      	ldrh	r2, [r1, #6]
 80037be:	2a01      	cmp	r2, #1
 80037c0:	d1bb      	bne.n	800373a <USBD_StdDevReq+0x112>
    switch (pdev->dev_state )  
 80037c2:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80037c6:	2b02      	cmp	r3, #2
 80037c8:	d003      	beq.n	80037d2 <USBD_StdDevReq+0x1aa>
 80037ca:	2b03      	cmp	r3, #3
 80037cc:	d1b5      	bne.n	800373a <USBD_StdDevReq+0x112>
      USBD_CtlSendData (pdev, 
 80037ce:	1d01      	adds	r1, r0, #4
 80037d0:	e760      	b.n	8003694 <USBD_StdDevReq+0x6c>
      pdev->dev_default_config = 0;
 80037d2:	4601      	mov	r1, r0
 80037d4:	2300      	movs	r3, #0
 80037d6:	f841 3f08 	str.w	r3, [r1, #8]!
 80037da:	e75b      	b.n	8003694 <USBD_StdDevReq+0x6c>
  switch (pdev->dev_state) 
 80037dc:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 80037e0:	3b02      	subs	r3, #2
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d8a9      	bhi.n	800373a <USBD_StdDevReq+0x112>
    pdev->dev_config_status = USB_CONFIG_SELF_POWERED;                                  
 80037e6:	2301      	movs	r3, #1
 80037e8:	60c3      	str	r3, [r0, #12]
    if (pdev->dev_remote_wakeup) 
 80037ea:	f8d0 3204 	ldr.w	r3, [r0, #516]	; 0x204
 80037ee:	b10b      	cbz	r3, 80037f4 <USBD_StdDevReq+0x1cc>
       pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;                                
 80037f0:	2303      	movs	r3, #3
 80037f2:	60c3      	str	r3, [r0, #12]
    USBD_CtlSendData (pdev, 
 80037f4:	2202      	movs	r2, #2
 80037f6:	f104 010c 	add.w	r1, r4, #12
 80037fa:	e74b      	b.n	8003694 <USBD_StdDevReq+0x6c>
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80037fc:	884b      	ldrh	r3, [r1, #2]
 80037fe:	2b01      	cmp	r3, #1
 8003800:	d1ab      	bne.n	800375a <USBD_StdDevReq+0x132>
      pdev->dev_remote_wakeup = 0; 
 8003802:	f8c4 3204 	str.w	r3, [r4, #516]	; 0x204
      pdev->pClass->Setup (pdev, req);   
 8003806:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 800380a:	4629      	mov	r1, r5
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	4620      	mov	r0, r4
 8003810:	4798      	blx	r3
 8003812:	e7b9      	b.n	8003788 <USBD_StdDevReq+0x160>
  switch (pdev->dev_state)
 8003814:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003818:	3b02      	subs	r3, #2
 800381a:	2b01      	cmp	r3, #1
 800381c:	d88d      	bhi.n	800373a <USBD_StdDevReq+0x112>
    if (req->wValue == USB_FEATURE_REMOTE_WAKEUP) 
 800381e:	884b      	ldrh	r3, [r1, #2]
 8003820:	2b01      	cmp	r3, #1
 8003822:	d19a      	bne.n	800375a <USBD_StdDevReq+0x132>
      pdev->dev_remote_wakeup = 0; 
 8003824:	2300      	movs	r3, #0
 8003826:	e7ec      	b.n	8003802 <USBD_StdDevReq+0x1da>
 8003828:	20000185 	.word	0x20000185

0800382c <USBD_StdItfReq>:
{
 800382c:	b538      	push	{r3, r4, r5, lr}
  switch (pdev->dev_state) 
 800382e:	f890 31fc 	ldrb.w	r3, [r0, #508]	; 0x1fc
 8003832:	2b03      	cmp	r3, #3
{
 8003834:	4604      	mov	r4, r0
 8003836:	460d      	mov	r5, r1
  switch (pdev->dev_state) 
 8003838:	d10d      	bne.n	8003856 <USBD_StdItfReq+0x2a>
    if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES) 
 800383a:	790b      	ldrb	r3, [r1, #4]
 800383c:	2b01      	cmp	r3, #1
 800383e:	d80a      	bhi.n	8003856 <USBD_StdItfReq+0x2a>
      pdev->pClass->Setup (pdev, req); 
 8003840:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	4798      	blx	r3
      if((req->wLength == 0)&& (ret == USBD_OK))
 8003848:	88eb      	ldrh	r3, [r5, #6]
 800384a:	b913      	cbnz	r3, 8003852 <USBD_StdItfReq+0x26>
         USBD_CtlSendStatus(pdev);
 800384c:	4620      	mov	r0, r4
 800384e:	f000 f8c4 	bl	80039da <USBD_CtlSendStatus>
}
 8003852:	2000      	movs	r0, #0
 8003854:	bd38      	pop	{r3, r4, r5, pc}
     USBD_CtlError(pdev , req);
 8003856:	f7ff fedb 	bl	8003610 <USBD_CtlError.constprop.0>
    break;
 800385a:	e7fa      	b.n	8003852 <USBD_StdItfReq+0x26>

0800385c <USBD_StdEPReq>:
{
 800385c:	b570      	push	{r4, r5, r6, lr}
  if ((req->bmRequest & 0x60) == 0x20)
 800385e:	780a      	ldrb	r2, [r1, #0]
  ep_addr  = LOBYTE(req->wIndex);   
 8003860:	888e      	ldrh	r6, [r1, #4]
  if ((req->bmRequest & 0x60) == 0x20)
 8003862:	f002 0260 	and.w	r2, r2, #96	; 0x60
 8003866:	2a20      	cmp	r2, #32
{
 8003868:	4604      	mov	r4, r0
 800386a:	460d      	mov	r5, r1
  ep_addr  = LOBYTE(req->wIndex);   
 800386c:	b2f3      	uxtb	r3, r6
  if ((req->bmRequest & 0x60) == 0x20)
 800386e:	d105      	bne.n	800387c <USBD_StdEPReq+0x20>
    pdev->pClass->Setup (pdev, req);
 8003870:	f8d0 3214 	ldr.w	r3, [r0, #532]	; 0x214
 8003874:	689b      	ldr	r3, [r3, #8]
 8003876:	4798      	blx	r3
}
 8003878:	2000      	movs	r0, #0
 800387a:	bd70      	pop	{r4, r5, r6, pc}
  switch (req->bRequest) 
 800387c:	784a      	ldrb	r2, [r1, #1]
 800387e:	2a01      	cmp	r2, #1
 8003880:	d01c      	beq.n	80038bc <USBD_StdEPReq+0x60>
 8003882:	d32a      	bcc.n	80038da <USBD_StdEPReq+0x7e>
 8003884:	2a03      	cmp	r2, #3
 8003886:	d1f7      	bne.n	8003878 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 8003888:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 800388c:	2a02      	cmp	r2, #2
 800388e:	d040      	beq.n	8003912 <USBD_StdEPReq+0xb6>
 8003890:	2a03      	cmp	r2, #3
 8003892:	d002      	beq.n	800389a <USBD_StdEPReq+0x3e>
      USBD_CtlError(pdev , req);
 8003894:	f7ff febc 	bl	8003610 <USBD_CtlError.constprop.0>
      break;
 8003898:	e7ee      	b.n	8003878 <USBD_StdEPReq+0x1c>
      if (req->wValue == USB_FEATURE_EP_HALT)
 800389a:	884a      	ldrh	r2, [r1, #2]
 800389c:	b922      	cbnz	r2, 80038a8 <USBD_StdEPReq+0x4c>
        if ((ep_addr != 0x00) && (ep_addr != 0x80)) 
 800389e:	065e      	lsls	r6, r3, #25
 80038a0:	d002      	beq.n	80038a8 <USBD_StdEPReq+0x4c>
          USBD_LL_StallEP(pdev , ep_addr);
 80038a2:	4619      	mov	r1, r3
 80038a4:	f000 fc9a 	bl	80041dc <USBD_LL_StallEP>
          pdev->pClass->Setup (pdev, req);
 80038a8:	f8d4 3214 	ldr.w	r3, [r4, #532]	; 0x214
 80038ac:	4629      	mov	r1, r5
 80038ae:	689b      	ldr	r3, [r3, #8]
 80038b0:	4620      	mov	r0, r4
 80038b2:	4798      	blx	r3
        USBD_CtlSendStatus(pdev);
 80038b4:	4620      	mov	r0, r4
 80038b6:	f000 f890 	bl	80039da <USBD_CtlSendStatus>
 80038ba:	e7dd      	b.n	8003878 <USBD_StdEPReq+0x1c>
    switch (pdev->dev_state) 
 80038bc:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80038c0:	2a02      	cmp	r2, #2
 80038c2:	d026      	beq.n	8003912 <USBD_StdEPReq+0xb6>
 80038c4:	2a03      	cmp	r2, #3
 80038c6:	d1e5      	bne.n	8003894 <USBD_StdEPReq+0x38>
      if (req->wValue == USB_FEATURE_EP_HALT)
 80038c8:	884a      	ldrh	r2, [r1, #2]
 80038ca:	2a00      	cmp	r2, #0
 80038cc:	d1d4      	bne.n	8003878 <USBD_StdEPReq+0x1c>
        if ((ep_addr & 0x7F) != 0x00) 
 80038ce:	0659      	lsls	r1, r3, #25
 80038d0:	d0f0      	beq.n	80038b4 <USBD_StdEPReq+0x58>
          USBD_LL_ClearStallEP(pdev , ep_addr);
 80038d2:	4619      	mov	r1, r3
 80038d4:	f000 fc90 	bl	80041f8 <USBD_LL_ClearStallEP>
 80038d8:	e7e6      	b.n	80038a8 <USBD_StdEPReq+0x4c>
    switch (pdev->dev_state) 
 80038da:	f890 21fc 	ldrb.w	r2, [r0, #508]	; 0x1fc
 80038de:	2a02      	cmp	r2, #2
 80038e0:	d017      	beq.n	8003912 <USBD_StdEPReq+0xb6>
 80038e2:	2a03      	cmp	r2, #3
 80038e4:	d1d6      	bne.n	8003894 <USBD_StdEPReq+0x38>
 80038e6:	f003 057f 	and.w	r5, r3, #127	; 0x7f
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80038ea:	f016 0f80 	tst.w	r6, #128	; 0x80
 80038ee:	eb00 1505 	add.w	r5, r0, r5, lsl #4
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80038f2:	4619      	mov	r1, r3
      pep = ((ep_addr & 0x80) == 0x80) ? &pdev->ep_in[ep_addr & 0x7F]:\
 80038f4:	bf14      	ite	ne
 80038f6:	3514      	addne	r5, #20
 80038f8:	f505 7582 	addeq.w	r5, r5, #260	; 0x104
      if(USBD_LL_IsStallEP(pdev, ep_addr))
 80038fc:	f000 fc8a 	bl	8004214 <USBD_LL_IsStallEP>
 8003900:	b168      	cbz	r0, 800391e <USBD_StdEPReq+0xc2>
        pep->status = 0x0001;     
 8003902:	2301      	movs	r3, #1
 8003904:	602b      	str	r3, [r5, #0]
      USBD_CtlSendData (pdev,
 8003906:	2202      	movs	r2, #2
 8003908:	4629      	mov	r1, r5
 800390a:	4620      	mov	r0, r4
 800390c:	f000 f839 	bl	8003982 <USBD_CtlSendData>
      break;
 8003910:	e7b2      	b.n	8003878 <USBD_StdEPReq+0x1c>
      if ((ep_addr & 0x7F) != 0x00) 
 8003912:	065a      	lsls	r2, r3, #25
 8003914:	d0b0      	beq.n	8003878 <USBD_StdEPReq+0x1c>
        USBD_LL_StallEP(pdev , ep_addr);
 8003916:	4619      	mov	r1, r3
 8003918:	f000 fc60 	bl	80041dc <USBD_LL_StallEP>
 800391c:	e7ac      	b.n	8003878 <USBD_StdEPReq+0x1c>
        pep->status = 0x0000;  
 800391e:	6028      	str	r0, [r5, #0]
 8003920:	e7f1      	b.n	8003906 <USBD_StdEPReq+0xaa>

08003922 <USBD_ParseSetupRequest>:
  req->bmRequest     = *(uint8_t *)  (pdata);
 8003922:	780b      	ldrb	r3, [r1, #0]
 8003924:	7003      	strb	r3, [r0, #0]
  req->bRequest      = *(uint8_t *)  (pdata +  1);
 8003926:	784b      	ldrb	r3, [r1, #1]
 8003928:	7043      	strb	r3, [r0, #1]
  req->wValue        = SWAPBYTE      (pdata +  2);
 800392a:	78ca      	ldrb	r2, [r1, #3]
 800392c:	788b      	ldrb	r3, [r1, #2]
 800392e:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003932:	8043      	strh	r3, [r0, #2]
  req->wIndex        = SWAPBYTE      (pdata +  4);
 8003934:	794a      	ldrb	r2, [r1, #5]
 8003936:	790b      	ldrb	r3, [r1, #4]
 8003938:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 800393c:	8083      	strh	r3, [r0, #4]
  req->wLength       = SWAPBYTE      (pdata +  6);
 800393e:	79ca      	ldrb	r2, [r1, #7]
 8003940:	798b      	ldrb	r3, [r1, #6]
 8003942:	eb03 2302 	add.w	r3, r3, r2, lsl #8
 8003946:	80c3      	strh	r3, [r0, #6]
 8003948:	4770      	bx	lr

0800394a <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800394a:	b530      	push	{r4, r5, lr}
  uint8_t idx = 0;
  
  if (desc != NULL) 
 800394c:	b188      	cbz	r0, 8003972 <USBD_GetString+0x28>
 800394e:	4605      	mov	r5, r0
 8003950:	1a2b      	subs	r3, r5, r0
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
    uint8_t  len = 0;

    while (*buf != '\0') 
 8003952:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2c00      	cmp	r4, #0
 800395a:	d1f9      	bne.n	8003950 <USBD_GetString+0x6>
    *len =  USBD_GetLen(desc) * 2 + 2;    
 800395c:	005b      	lsls	r3, r3, #1
 800395e:	3302      	adds	r3, #2
 8003960:	8013      	strh	r3, [r2, #0]
    unicode[idx++] = *len;
 8003962:	700b      	strb	r3, [r1, #0]
    unicode[idx++] =  USB_DESC_TYPE_STRING;
 8003964:	2303      	movs	r3, #3
 8003966:	704b      	strb	r3, [r1, #1]
 8003968:	3801      	subs	r0, #1
 800396a:	2302      	movs	r3, #2
    while (*desc != '\0') 
 800396c:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8003970:	b905      	cbnz	r5, 8003974 <USBD_GetString+0x2a>
 8003972:	bd30      	pop	{r4, r5, pc}
      unicode[idx++] = *desc++;
 8003974:	1c5a      	adds	r2, r3, #1
 8003976:	b2d2      	uxtb	r2, r2
 8003978:	54cd      	strb	r5, [r1, r3]
      unicode[idx++] =  0x00;
 800397a:	3302      	adds	r3, #2
 800397c:	b2db      	uxtb	r3, r3
 800397e:	548c      	strb	r4, [r1, r2]
 8003980:	e7f4      	b.n	800396c <USBD_GetString+0x22>

08003982 <USBD_CtlSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendData (USBD_HandleTypeDef  *pdev, 
                               uint8_t *pbuf,
                               uint16_t len)
{
 8003982:	b510      	push	{r4, lr}
 8003984:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state          = USBD_EP0_DATA_IN;                                      
 8003986:	2202      	movs	r2, #2
 8003988:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_in[0].total_length = len;
 800398c:	6183      	str	r3, [r0, #24]
  pdev->ep_in[0].rem_length   = len;
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 800398e:	460a      	mov	r2, r1
  pdev->ep_in[0].rem_length   = len;
 8003990:	61c3      	str	r3, [r0, #28]
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);  
 8003992:	2100      	movs	r1, #0
 8003994:	f000 fc5c 	bl	8004250 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 8003998:	2000      	movs	r0, #0
 800399a:	bd10      	pop	{r4, pc}

0800399c <USBD_CtlContinueSendData>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueSendData (USBD_HandleTypeDef  *pdev, 
                                       uint8_t *pbuf,
                                       uint16_t len)
{
 800399c:	b508      	push	{r3, lr}
 /* Start the next transfer */
  USBD_LL_Transmit (pdev, 0x00, pbuf, len);   
 800399e:	4613      	mov	r3, r2
 80039a0:	460a      	mov	r2, r1
 80039a2:	2100      	movs	r1, #0
 80039a4:	f000 fc54 	bl	8004250 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80039a8:	2000      	movs	r0, #0
 80039aa:	bd08      	pop	{r3, pc}

080039ac <USBD_CtlPrepareRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlPrepareRx (USBD_HandleTypeDef  *pdev,
                                  uint8_t *pbuf,                                  
                                  uint16_t len)
{
 80039ac:	b510      	push	{r4, lr}
 80039ae:	4613      	mov	r3, r2
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT; 
 80039b0:	2203      	movs	r2, #3
 80039b2:	f8c0 21f4 	str.w	r2, [r0, #500]	; 0x1f4
  pdev->ep_out[0].total_length = len;
 80039b6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  pdev->ep_out[0].rem_length   = len;
  /* Start the transfer */
  USBD_LL_PrepareReceive (pdev,
 80039ba:	460a      	mov	r2, r1
  pdev->ep_out[0].rem_length   = len;
 80039bc:	f8c0 310c 	str.w	r3, [r0, #268]	; 0x10c
  USBD_LL_PrepareReceive (pdev,
 80039c0:	2100      	movs	r1, #0
 80039c2:	f000 fc53 	bl	800426c <USBD_LL_PrepareReceive>
                          0,
                          pbuf,
                         len);
  
  return USBD_OK;
}
 80039c6:	2000      	movs	r0, #0
 80039c8:	bd10      	pop	{r4, pc}

080039ca <USBD_CtlContinueRx>:
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlContinueRx (USBD_HandleTypeDef  *pdev, 
                                          uint8_t *pbuf,                                          
                                          uint16_t len)
{
 80039ca:	b508      	push	{r3, lr}

  USBD_LL_PrepareReceive (pdev,
 80039cc:	4613      	mov	r3, r2
 80039ce:	460a      	mov	r2, r1
 80039d0:	2100      	movs	r1, #0
 80039d2:	f000 fc4b 	bl	800426c <USBD_LL_PrepareReceive>
                          0,                     
                          pbuf,                         
                          len);
  return USBD_OK;
}
 80039d6:	2000      	movs	r0, #0
 80039d8:	bd08      	pop	{r3, pc}

080039da <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlSendStatus (USBD_HandleTypeDef  *pdev)
{
 80039da:	b508      	push	{r3, lr}

  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80039dc:	2304      	movs	r3, #4
 80039de:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */
  USBD_LL_Transmit (pdev, 0x00, NULL, 0);   
 80039e2:	2300      	movs	r3, #0
 80039e4:	461a      	mov	r2, r3
 80039e6:	4619      	mov	r1, r3
 80039e8:	f000 fc32 	bl	8004250 <USBD_LL_Transmit>
  
  return USBD_OK;
}
 80039ec:	2000      	movs	r0, #0
 80039ee:	bd08      	pop	{r3, pc}

080039f0 <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_CtlReceiveStatus (USBD_HandleTypeDef  *pdev)
{
 80039f0:	b508      	push	{r3, lr}
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT; 
 80039f2:	2305      	movs	r3, #5
 80039f4:	f8c0 31f4 	str.w	r3, [r0, #500]	; 0x1f4
  
 /* Start the transfer */  
  USBD_LL_PrepareReceive ( pdev,
 80039f8:	2300      	movs	r3, #0
 80039fa:	461a      	mov	r2, r3
 80039fc:	4619      	mov	r1, r3
 80039fe:	f000 fc35 	bl	800426c <USBD_LL_PrepareReceive>
                    0,
                    NULL,
                    0);  

  return USBD_OK;
}
 8003a02:	2000      	movs	r0, #0
 8003a04:	bd08      	pop	{r3, pc}
	...

08003a08 <MX_VCP_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_VCP_USB_DEVICE_Init(void)
{
 8003a08:	b508      	push	{r3, lr}
	/* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

	/* USER CODE END USB_DEVICE_Init_PreTreatment */

	/* Init Device Library, add supported class and start the library. */
	USBD_Init(&hUsbDeviceFS, &VCP_FS_Desc, DEVICE_FS);
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	490a      	ldr	r1, [pc, #40]	; (8003a38 <MX_VCP_USB_DEVICE_Init+0x30>)
 8003a0e:	480b      	ldr	r0, [pc, #44]	; (8003a3c <MX_VCP_USB_DEVICE_Init+0x34>)
 8003a10:	f7ff fce0 	bl	80033d4 <USBD_Init>
	USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC);
 8003a14:	490a      	ldr	r1, [pc, #40]	; (8003a40 <MX_VCP_USB_DEVICE_Init+0x38>)
 8003a16:	4809      	ldr	r0, [pc, #36]	; (8003a3c <MX_VCP_USB_DEVICE_Init+0x34>)
 8003a18:	f7ff fcf1 	bl	80033fe <USBD_RegisterClass>
	USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS);
 8003a1c:	4909      	ldr	r1, [pc, #36]	; (8003a44 <MX_VCP_USB_DEVICE_Init+0x3c>)
 8003a1e:	4807      	ldr	r0, [pc, #28]	; (8003a3c <MX_VCP_USB_DEVICE_Init+0x34>)
 8003a20:	f7ff fc99 	bl	8003356 <USBD_CDC_RegisterInterface>
	/* Verify if the Battery Charging Detection mode (BCD) is used : */
	/* If yes, the USB device is started in the HAL_PCDEx_BCD_Callback */
	/* upon reception of PCD_BCD_DISCOVERY_COMPLETED message. */
	/* If no, the USB device is started now. */
	if (USBD_LL_BatteryCharging(&hUsbDeviceFS) != USBD_OK) {
 8003a24:	4805      	ldr	r0, [pc, #20]	; (8003a3c <MX_VCP_USB_DEVICE_Init+0x34>)
 8003a26:	f000 fc5e 	bl	80042e6 <USBD_LL_BatteryCharging>
 8003a2a:	b120      	cbz	r0, 8003a36 <MX_VCP_USB_DEVICE_Init+0x2e>
		USBD_Start(&hUsbDeviceFS);
 8003a2c:	4803      	ldr	r0, [pc, #12]	; (8003a3c <MX_VCP_USB_DEVICE_Init+0x34>)
	}
	/* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

	/* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8003a2e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
		USBD_Start(&hUsbDeviceFS);
 8003a32:	f7ff bceb 	b.w	800340c <USBD_Start>
 8003a36:	bd08      	pop	{r3, pc}
 8003a38:	20000134 	.word	0x20000134
 8003a3c:	200007b4 	.word	0x200007b4
 8003a40:	20000000 	.word	0x20000000
 8003a44:	20000158 	.word	0x20000158

08003a48 <USBD_VCP_FS_DeviceDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_VCP_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_VCP_FS_DeviceDesc);
 8003a48:	2312      	movs	r3, #18
 8003a4a:	800b      	strh	r3, [r1, #0]
  return USBD_VCP_FS_DeviceDesc;
}
 8003a4c:	4800      	ldr	r0, [pc, #0]	; (8003a50 <USBD_VCP_FS_DeviceDescriptor+0x8>)
 8003a4e:	4770      	bx	lr
 8003a50:	2000011c 	.word	0x2000011c

08003a54 <USBD_VCP_FS_LangIDStrDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_VCP_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_VCP_LangIDDesc);
 8003a54:	2304      	movs	r3, #4
 8003a56:	800b      	strh	r3, [r1, #0]
  return USBD_VCP_LangIDDesc;
}
 8003a58:	4800      	ldr	r0, [pc, #0]	; (8003a5c <USBD_VCP_FS_LangIDStrDescriptor+0x8>)
 8003a5a:	4770      	bx	lr
 8003a5c:	20000130 	.word	0x20000130

08003a60 <USBD_VCP_FS_USR_BOSDescriptor>:
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_VCP_FS_USR_BOSDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
  *length = sizeof(USBD_VCP_FS_BOSDesc);
 8003a60:	230c      	movs	r3, #12
 8003a62:	800b      	strh	r3, [r1, #0]
  return (uint8_t*)USBD_VCP_FS_BOSDesc;
}
 8003a64:	4800      	ldr	r0, [pc, #0]	; (8003a68 <USBD_VCP_FS_USR_BOSDescriptor+0x8>)
 8003a66:	4770      	bx	lr
 8003a68:	20000110 	.word	0x20000110

08003a6c <USBD_VCP_FS_ManufacturerStrDescriptor>:
{
 8003a6c:	b510      	push	{r4, lr}
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_VCP_StrDesc, length);
 8003a6e:	4c04      	ldr	r4, [pc, #16]	; (8003a80 <USBD_VCP_FS_ManufacturerStrDescriptor+0x14>)
 8003a70:	4804      	ldr	r0, [pc, #16]	; (8003a84 <USBD_VCP_FS_ManufacturerStrDescriptor+0x18>)
 8003a72:	460a      	mov	r2, r1
 8003a74:	4621      	mov	r1, r4
 8003a76:	f7ff ff68 	bl	800394a <USBD_GetString>
}
 8003a7a:	4620      	mov	r0, r4
 8003a7c:	bd10      	pop	{r4, pc}
 8003a7e:	bf00      	nop
 8003a80:	200009d8 	.word	0x200009d8
 8003a84:	080043d6 	.word	0x080043d6

08003a88 <USBD_VCP_FS_ProductStrDescriptor>:
{
 8003a88:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_VCP_StrDesc, length);
 8003a8a:	4c04      	ldr	r4, [pc, #16]	; (8003a9c <USBD_VCP_FS_ProductStrDescriptor+0x14>)
 8003a8c:	4804      	ldr	r0, [pc, #16]	; (8003aa0 <USBD_VCP_FS_ProductStrDescriptor+0x18>)
 8003a8e:	460a      	mov	r2, r1
 8003a90:	4621      	mov	r1, r4
 8003a92:	f7ff ff5a 	bl	800394a <USBD_GetString>
}
 8003a96:	4620      	mov	r0, r4
 8003a98:	bd10      	pop	{r4, pc}
 8003a9a:	bf00      	nop
 8003a9c:	200009d8 	.word	0x200009d8
 8003aa0:	080043e9 	.word	0x080043e9

08003aa4 <USBD_VCP_FS_SerialStrDescriptor>:
{
 8003aa4:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_SERIALNUMBER_STRING_FS, USBD_VCP_StrDesc, length);
 8003aa6:	4c04      	ldr	r4, [pc, #16]	; (8003ab8 <USBD_VCP_FS_SerialStrDescriptor+0x14>)
 8003aa8:	4804      	ldr	r0, [pc, #16]	; (8003abc <USBD_VCP_FS_SerialStrDescriptor+0x18>)
 8003aaa:	460a      	mov	r2, r1
 8003aac:	4621      	mov	r1, r4
 8003aae:	f7ff ff4c 	bl	800394a <USBD_GetString>
}
 8003ab2:	4620      	mov	r0, r4
 8003ab4:	bd10      	pop	{r4, pc}
 8003ab6:	bf00      	nop
 8003ab8:	200009d8 	.word	0x200009d8
 8003abc:	080043ff 	.word	0x080043ff

08003ac0 <USBD_VCP_FS_ConfigStrDescriptor>:
{
 8003ac0:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_VCP_StrDesc, length);
 8003ac2:	4c04      	ldr	r4, [pc, #16]	; (8003ad4 <USBD_VCP_FS_ConfigStrDescriptor+0x14>)
 8003ac4:	4804      	ldr	r0, [pc, #16]	; (8003ad8 <USBD_VCP_FS_ConfigStrDescriptor+0x18>)
 8003ac6:	460a      	mov	r2, r1
 8003ac8:	4621      	mov	r1, r4
 8003aca:	f7ff ff3e 	bl	800394a <USBD_GetString>
}
 8003ace:	4620      	mov	r0, r4
 8003ad0:	bd10      	pop	{r4, pc}
 8003ad2:	bf00      	nop
 8003ad4:	200009d8 	.word	0x200009d8
 8003ad8:	080043bd 	.word	0x080043bd

08003adc <USBD_VCP_FS_InterfaceStrDescriptor>:
{
 8003adc:	b510      	push	{r4, lr}
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_VCP_StrDesc, length);
 8003ade:	4c04      	ldr	r4, [pc, #16]	; (8003af0 <USBD_VCP_FS_InterfaceStrDescriptor+0x14>)
 8003ae0:	4804      	ldr	r0, [pc, #16]	; (8003af4 <USBD_VCP_FS_InterfaceStrDescriptor+0x18>)
 8003ae2:	460a      	mov	r2, r1
 8003ae4:	4621      	mov	r1, r4
 8003ae6:	f7ff ff30 	bl	800394a <USBD_GetString>
}
 8003aea:	4620      	mov	r0, r4
 8003aec:	bd10      	pop	{r4, pc}
 8003aee:	bf00      	nop
 8003af0:	200009d8 	.word	0x200009d8
 8003af4:	080043c8 	.word	0x080043c8

08003af8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003af8:	b570      	push	{r4, r5, r6, lr}
 8003afa:	b0ac      	sub	sp, #176	; 0xb0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
  RCC_PeriphCLKInitTypeDef PeriphClkInit;

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8003afc:	2310      	movs	r3, #16
 8003afe:	9306      	str	r3, [sp, #24]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8003b00:	2300      	movs	r3, #0
 8003b02:	930d      	str	r3, [sp, #52]	; 0x34
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003b04:	2360      	movs	r3, #96	; 0x60
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003b06:	2501      	movs	r5, #1
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b08:	2402      	movs	r4, #2
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8003b0a:	930e      	str	r3, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
  RCC_OscInitStruct.PLL.PLLN = 40;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003b0c:	2607      	movs	r6, #7
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003b0e:	2328      	movs	r3, #40	; 0x28
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b10:	a806      	add	r0, sp, #24
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8003b12:	950c      	str	r5, [sp, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003b14:	9410      	str	r4, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8003b16:	9511      	str	r5, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003b18:	9512      	str	r5, [sp, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLN = 40;
 8003b1a:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003b1c:	9614      	str	r6, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003b1e:	9415      	str	r4, [sp, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003b20:	9416      	str	r4, [sp, #88]	; 0x58
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003b22:	f7fd fcc1 	bl	80014a8 <HAL_RCC_OscConfig>
 8003b26:	b100      	cbz	r0, 8003b2a <SystemClock_Config+0x32>
 8003b28:	e7fe      	b.n	8003b28 <SystemClock_Config+0x30>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Initializes the CPU, AHB and APB busses clocks 
    */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b2a:	230f      	movs	r3, #15
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b2c:	2104      	movs	r1, #4
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003b2e:	9301      	str	r3, [sp, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003b30:	9003      	str	r0, [sp, #12]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b32:	2303      	movs	r3, #3
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003b34:	9004      	str	r0, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003b36:	9005      	str	r0, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b38:	eb0d 0001 	add.w	r0, sp, r1
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003b3c:	9302      	str	r3, [sp, #8]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003b3e:	f7fd ff0f 	bl	8001960 <HAL_RCC_ClockConfig>
 8003b42:	b100      	cbz	r0, 8003b46 <SystemClock_Config+0x4e>
 8003b44:	e7fe      	b.n	8003b44 <SystemClock_Config+0x4c>
  {
    _Error_Handler(__FILE__, __LINE__);
  }

  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_USART2
 8003b46:	f242 0303 	movw	r3, #8195	; 0x2003
 8003b4a:	9317      	str	r3, [sp, #92]	; 0x5c
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8003b4c:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003b50:	9327      	str	r3, [sp, #156]	; 0x9c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003b52:	2318      	movs	r3, #24
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003b54:	901f      	str	r0, [sp, #124]	; 0x7c
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b56:	9020      	str	r0, [sp, #128]	; 0x80
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8003b58:	931a      	str	r3, [sp, #104]	; 0x68
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b5a:	a817      	add	r0, sp, #92	; 0x5c
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003b5c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 8003b60:	9518      	str	r5, [sp, #96]	; 0x60
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8003b62:	9519      	str	r5, [sp, #100]	; 0x64
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 8003b64:	961b      	str	r6, [sp, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 8003b66:	941c      	str	r4, [sp, #112]	; 0x70
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 8003b68:	941d      	str	r4, [sp, #116]	; 0x74
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 8003b6a:	931e      	str	r3, [sp, #120]	; 0x78
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b6c:	f7fe f860 	bl	8001c30 <HAL_RCCEx_PeriphCLKConfig>
 8003b70:	b100      	cbz	r0, 8003b74 <SystemClock_Config+0x7c>
 8003b72:	e7fe      	b.n	8003b72 <SystemClock_Config+0x7a>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the main internal regulator output voltage 
    */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003b74:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b78:	f7fd fbb0 	bl	80012dc <HAL_PWREx_ControlVoltageScaling>
 8003b7c:	4604      	mov	r4, r0
 8003b7e:	b100      	cbz	r0, 8003b82 <SystemClock_Config+0x8a>
 8003b80:	e7fe      	b.n	8003b80 <SystemClock_Config+0x88>
    _Error_Handler(__FILE__, __LINE__);
  }

    /**Configure the Systick interrupt time 
    */
  HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq()/1000);
 8003b82:	f7fd ffa3 	bl	8001acc <HAL_RCC_GetHCLKFreq>
 8003b86:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003b8a:	fbb0 f0f3 	udiv	r0, r0, r3
 8003b8e:	f7fc fd25 	bl	80005dc <HAL_SYSTICK_Config>

    /**Configure the Systick 
    */
  HAL_SYSTICK_CLKSourceConfig(SYSTICK_CLKSOURCE_HCLK);
 8003b92:	2004      	movs	r0, #4
 8003b94:	f7fc fd38 	bl	8000608 <HAL_SYSTICK_CLKSourceConfig>

  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003b98:	4622      	mov	r2, r4
 8003b9a:	4621      	mov	r1, r4
 8003b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ba0:	f7fc fcdc 	bl	800055c <HAL_NVIC_SetPriority>
}
 8003ba4:	b02c      	add	sp, #176	; 0xb0
 8003ba6:	bd70      	pop	{r4, r5, r6, pc}

08003ba8 <main>:
{
 8003ba8:	b580      	push	{r7, lr}
{

  GPIO_InitTypeDef GPIO_InitStruct;

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003baa:	4d48      	ldr	r5, [pc, #288]	; (8003ccc <main+0x124>)
{
 8003bac:	b08c      	sub	sp, #48	; 0x30
  HAL_Init();
 8003bae:	f7fc fca9 	bl	8000504 <HAL_Init>
  SystemClock_Config();
 8003bb2:	f7ff ffa1 	bl	8003af8 <SystemClock_Config>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bb6:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003bb8:	4845      	ldr	r0, [pc, #276]	; (8003cd0 <main+0x128>)
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bba:	f043 0301 	orr.w	r3, r3, #1
 8003bbe:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003bc0:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003bc2:	f003 0301 	and.w	r3, r3, #1
 8003bc6:	9302      	str	r3, [sp, #8]
 8003bc8:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bca:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003bcc:	f043 0302 	orr.w	r3, r3, #2
 8003bd0:	64eb      	str	r3, [r5, #76]	; 0x4c
 8003bd2:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8003bd4:	f003 0302 	and.w	r3, r3, #2
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003bd8:	2200      	movs	r2, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003bda:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003bdc:	2130      	movs	r1, #48	; 0x30

  /*Configure GPIO pin : PB3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bde:	2400      	movs	r4, #0
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003be0:	2601      	movs	r6, #1
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003be2:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8003be4:	f7fc fef0 	bl	80009c8 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003be8:	2308      	movs	r3, #8
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bea:	a907      	add	r1, sp, #28
 8003bec:	4838      	ldr	r0, [pc, #224]	; (8003cd0 <main+0x128>)
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003bee:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003bf0:	9408      	str	r4, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003bf2:	9609      	str	r6, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bf4:	f7fc fe34 	bl	8000860 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003bf8:	2330      	movs	r3, #48	; 0x30
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfa:	a907      	add	r1, sp, #28
 8003bfc:	4834      	ldr	r0, [pc, #208]	; (8003cd0 <main+0x128>)
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8003bfe:	9307      	str	r3, [sp, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003c00:	9608      	str	r6, [sp, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c02:	9409      	str	r4, [sp, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c04:	940a      	str	r4, [sp, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c06:	f7fc fe2b 	bl	8000860 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c0a:	6cab      	ldr	r3, [r5, #72]	; 0x48
 8003c0c:	4333      	orrs	r3, r6
 8003c0e:	64ab      	str	r3, [r5, #72]	; 0x48
 8003c10:	6cab      	ldr	r3, [r5, #72]	; 0x48
  htim15.Instance = TIM15;
 8003c12:	4d30      	ldr	r5, [pc, #192]	; (8003cd4 <main+0x12c>)
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c14:	4033      	ands	r3, r6
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003c16:	4622      	mov	r2, r4
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c18:	9301      	str	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003c1a:	4621      	mov	r1, r4
 8003c1c:	200e      	movs	r0, #14
  __HAL_RCC_DMA1_CLK_ENABLE();
 8003c1e:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8003c20:	f7fc fc9c 	bl	800055c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 8003c24:	200e      	movs	r0, #14
 8003c26:	f7fc fccd 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  htim15.Init.Prescaler = 39999;
 8003c2a:	4a2b      	ldr	r2, [pc, #172]	; (8003cd8 <main+0x130>)
  htim15.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003c2c:	60ac      	str	r4, [r5, #8]
  htim15.Init.Prescaler = 39999;
 8003c2e:	f649 433f 	movw	r3, #39999	; 0x9c3f
 8003c32:	e885 000c 	stmia.w	r5, {r2, r3}
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003c36:	4628      	mov	r0, r5
  htim15.Init.Period = 50;
 8003c38:	2332      	movs	r3, #50	; 0x32
 8003c3a:	60eb      	str	r3, [r5, #12]
  htim15.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003c3c:	612c      	str	r4, [r5, #16]
  htim15.Init.RepetitionCounter = 0;
 8003c3e:	616c      	str	r4, [r5, #20]
  htim15.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003c40:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim15) != HAL_OK)
 8003c42:	f7fe fa23 	bl	800208c <HAL_TIM_Base_Init>
 8003c46:	b100      	cbz	r0, 8003c4a <main+0xa2>
 8003c48:	e7fe      	b.n	8003c48 <main+0xa0>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003c4a:	2304      	movs	r3, #4
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8003c4c:	9008      	str	r0, [sp, #32]
  if (HAL_TIM_SlaveConfigSynchronization(&htim15, &sSlaveConfig) != HAL_OK)
 8003c4e:	a907      	add	r1, sp, #28
 8003c50:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_RESET;
 8003c52:	9307      	str	r3, [sp, #28]
  if (HAL_TIM_SlaveConfigSynchronization(&htim15, &sSlaveConfig) != HAL_OK)
 8003c54:	f7fe fa8e 	bl	8002174 <HAL_TIM_SlaveConfigSynchronization>
 8003c58:	b100      	cbz	r0, 8003c5c <main+0xb4>
 8003c5a:	e7fe      	b.n	8003c5a <main+0xb2>
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003c5c:	9004      	str	r0, [sp, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003c5e:	9006      	str	r0, [sp, #24]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim15, &sMasterConfig) != HAL_OK)
 8003c60:	a904      	add	r1, sp, #16
 8003c62:	4628      	mov	r0, r5
 8003c64:	f7fe faa6 	bl	80021b4 <HAL_TIMEx_MasterConfigSynchronization>
 8003c68:	b100      	cbz	r0, 8003c6c <main+0xc4>
 8003c6a:	e7fe      	b.n	8003c6a <main+0xc2>
  huart1.Instance = USART1;
 8003c6c:	4c1b      	ldr	r4, [pc, #108]	; (8003cdc <main+0x134>)
  huart1.Init.BaudRate = 115200;
 8003c6e:	4b1c      	ldr	r3, [pc, #112]	; (8003ce0 <main+0x138>)
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003c70:	60a0      	str	r0, [r4, #8]
  huart1.Init.BaudRate = 115200;
 8003c72:	f44f 38e1 	mov.w	r8, #115200	; 0x1c200
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003c76:	60e0      	str	r0, [r4, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003c78:	6120      	str	r0, [r4, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c7a:	270c      	movs	r7, #12
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c7c:	61a0      	str	r0, [r4, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003c7e:	61e0      	str	r0, [r4, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003c80:	6220      	str	r0, [r4, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003c82:	6260      	str	r0, [r4, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c84:	4620      	mov	r0, r4
  huart1.Init.BaudRate = 115200;
 8003c86:	e884 0108 	stmia.w	r4, {r3, r8}
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003c8a:	6167      	str	r7, [r4, #20]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8003c8c:	f7fe fe73 	bl	8002976 <HAL_UART_Init>
 8003c90:	b100      	cbz	r0, 8003c94 <main+0xec>
 8003c92:	e7fe      	b.n	8003c92 <main+0xea>
  huart2.Instance = USART2;
 8003c94:	4b13      	ldr	r3, [pc, #76]	; (8003ce4 <main+0x13c>)
 8003c96:	4a14      	ldr	r2, [pc, #80]	; (8003ce8 <main+0x140>)
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003c98:	6098      	str	r0, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003c9a:	60d8      	str	r0, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003c9c:	6118      	str	r0, [r3, #16]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003c9e:	6198      	str	r0, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003ca0:	61d8      	str	r0, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003ca2:	6218      	str	r0, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003ca4:	6258      	str	r0, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003ca6:	4618      	mov	r0, r3
  huart2.Init.BaudRate = 115200;
 8003ca8:	e883 0104 	stmia.w	r3, {r2, r8}
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003cac:	615f      	str	r7, [r3, #20]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003cae:	f7fe fe62 	bl	8002976 <HAL_UART_Init>
 8003cb2:	b100      	cbz	r0, 8003cb6 <main+0x10e>
 8003cb4:	e7fe      	b.n	8003cb4 <main+0x10c>
  MX_VCP_USB_DEVICE_Init();
 8003cb6:	f7ff fea7 	bl	8003a08 <MX_VCP_USB_DEVICE_Init>
  HAL_UART_Receive_IT(&huart1,&rxBuff[0],1);
 8003cba:	4632      	mov	r2, r6
 8003cbc:	490b      	ldr	r1, [pc, #44]	; (8003cec <main+0x144>)
 8003cbe:	4620      	mov	r0, r4
 8003cc0:	f7fe faac 	bl	800221c <HAL_UART_Receive_IT>
  HAL_TIM_Base_Start_IT(&htim15);
 8003cc4:	4628      	mov	r0, r5
 8003cc6:	f7fe f8f5 	bl	8001eb4 <HAL_TIM_Base_Start_IT>
 8003cca:	e7fe      	b.n	8003cca <main+0x122>
 8003ccc:	40021000 	.word	0x40021000
 8003cd0:	48000400 	.word	0x48000400
 8003cd4:	20000bd8 	.word	0x20000bd8
 8003cd8:	40014000 	.word	0x40014000
 8003cdc:	20000c64 	.word	0x20000c64
 8003ce0:	40013800 	.word	0x40013800
 8003ce4:	20000cdc 	.word	0x20000cdc
 8003ce8:	40004400 	.word	0x40004400
 8003cec:	20000190 	.word	0x20000190

08003cf0 <HAL_UART_RxCpltCallback>:

}

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
	UserTxBufPtrIn+=1;
 8003cf0:	4b06      	ldr	r3, [pc, #24]	; (8003d0c <HAL_UART_RxCpltCallback+0x1c>)

	if(UserTxBufPtrIn==APP_RX_DATA_SIZE) UserTxBufPtrIn=0;

	HAL_UART_Receive_IT(huart,(uint8_t*)(rxBuff+UserTxBufPtrIn),1);
 8003cf2:	4907      	ldr	r1, [pc, #28]	; (8003d10 <HAL_UART_RxCpltCallback+0x20>)
	UserTxBufPtrIn+=1;
 8003cf4:	681a      	ldr	r2, [r3, #0]
 8003cf6:	3201      	adds	r2, #1
	if(UserTxBufPtrIn==APP_RX_DATA_SIZE) UserTxBufPtrIn=0;
 8003cf8:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8003cfc:	bf08      	it	eq
 8003cfe:	2200      	moveq	r2, #0
 8003d00:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(huart,(uint8_t*)(rxBuff+UserTxBufPtrIn),1);
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	2201      	movs	r2, #1
 8003d06:	4419      	add	r1, r3
 8003d08:	f7fe ba88 	b.w	800221c <HAL_UART_Receive_IT>
 8003d0c:	20000188 	.word	0x20000188
 8003d10:	20000190 	.word	0x20000190

08003d14 <HAL_TIM_PeriodElapsedCallback>:
}

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim){
 8003d14:	b538      	push	{r3, r4, r5, lr}
	uint32_t buffptr;
	  uint32_t buffsize;

	  if(UserTxBufPtrOut != UserTxBufPtrIn)
 8003d16:	4a0c      	ldr	r2, [pc, #48]	; (8003d48 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003d18:	4d0c      	ldr	r5, [pc, #48]	; (8003d4c <HAL_TIM_PeriodElapsedCallback+0x38>)
 8003d1a:	6814      	ldr	r4, [r2, #0]
 8003d1c:	682b      	ldr	r3, [r5, #0]
 8003d1e:	42a3      	cmp	r3, r4
 8003d20:	d010      	beq.n	8003d44 <HAL_TIM_PeriodElapsedCallback+0x30>

	    buffptr = UserTxBufPtrOut;



	    if(CDC_Transmit_FS(&rxBuff[buffptr],buffsize) == USBD_OK)
 8003d22:	480b      	ldr	r0, [pc, #44]	; (8003d50 <HAL_TIM_PeriodElapsedCallback+0x3c>)
	      buffsize = APP_RX_DATA_SIZE - UserTxBufPtrOut;
 8003d24:	bf8c      	ite	hi
 8003d26:	f5c3 6480 	rsbhi	r4, r3, #1024	; 0x400
	      buffsize = UserTxBufPtrIn - UserTxBufPtrOut;
 8003d2a:	1ae4      	subls	r4, r4, r3
	    if(CDC_Transmit_FS(&rxBuff[buffptr],buffsize) == USBD_OK)
 8003d2c:	b2a1      	uxth	r1, r4
 8003d2e:	4418      	add	r0, r3
 8003d30:	f000 f95c 	bl	8003fec <CDC_Transmit_FS>
 8003d34:	b930      	cbnz	r0, 8003d44 <HAL_TIM_PeriodElapsedCallback+0x30>
	    {
	      UserTxBufPtrOut += buffsize;
 8003d36:	682b      	ldr	r3, [r5, #0]
 8003d38:	441c      	add	r4, r3
 8003d3a:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 8003d3e:	bf08      	it	eq
 8003d40:	4604      	moveq	r4, r0
 8003d42:	602c      	str	r4, [r5, #0]
 8003d44:	bd38      	pop	{r3, r4, r5, pc}
 8003d46:	bf00      	nop
 8003d48:	20000188 	.word	0x20000188
 8003d4c:	2000018c 	.word	0x2000018c
 8003d50:	20000190 	.word	0x20000190

08003d54 <_Error_Handler>:
  * @param  file: The file name as string.
  * @param  line: The line in file as a number.
  * @retval None
  */
void _Error_Handler(char *file, int line)
{
 8003d54:	e7fe      	b.n	8003d54 <_Error_Handler>
	...

08003d58 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d58:	4b21      	ldr	r3, [pc, #132]	; (8003de0 <HAL_MspInit+0x88>)
{
 8003d5a:	b507      	push	{r0, r1, r2, lr}
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d5c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	661a      	str	r2, [r3, #96]	; 0x60
 8003d64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003d66:	f002 0201 	and.w	r2, r2, #1
 8003d6a:	9200      	str	r2, [sp, #0]
 8003d6c:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d6e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003d70:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003d74:	659a      	str	r2, [r3, #88]	; 0x58
 8003d76:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d7c:	9301      	str	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d7e:	2003      	movs	r0, #3
  __HAL_RCC_PWR_CLK_ENABLE();
 8003d80:	9b01      	ldr	r3, [sp, #4]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003d82:	f7fc fbd9 	bl	8000538 <HAL_NVIC_SetPriorityGrouping>

  /* System interrupt init*/
  /* MemoryManagement_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(MemoryManagement_IRQn, 0, 0);
 8003d86:	2200      	movs	r2, #0
 8003d88:	4611      	mov	r1, r2
 8003d8a:	f06f 000b 	mvn.w	r0, #11
 8003d8e:	f7fc fbe5 	bl	800055c <HAL_NVIC_SetPriority>
  /* BusFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(BusFault_IRQn, 0, 0);
 8003d92:	2200      	movs	r2, #0
 8003d94:	4611      	mov	r1, r2
 8003d96:	f06f 000a 	mvn.w	r0, #10
 8003d9a:	f7fc fbdf 	bl	800055c <HAL_NVIC_SetPriority>
  /* UsageFault_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UsageFault_IRQn, 0, 0);
 8003d9e:	2200      	movs	r2, #0
 8003da0:	4611      	mov	r1, r2
 8003da2:	f06f 0009 	mvn.w	r0, #9
 8003da6:	f7fc fbd9 	bl	800055c <HAL_NVIC_SetPriority>
  /* SVCall_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SVCall_IRQn, 0, 0);
 8003daa:	2200      	movs	r2, #0
 8003dac:	4611      	mov	r1, r2
 8003dae:	f06f 0004 	mvn.w	r0, #4
 8003db2:	f7fc fbd3 	bl	800055c <HAL_NVIC_SetPriority>
  /* DebugMonitor_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DebugMonitor_IRQn, 0, 0);
 8003db6:	2200      	movs	r2, #0
 8003db8:	4611      	mov	r1, r2
 8003dba:	f06f 0003 	mvn.w	r0, #3
 8003dbe:	f7fc fbcd 	bl	800055c <HAL_NVIC_SetPriority>
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 0, 0);
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	4611      	mov	r1, r2
 8003dc6:	f06f 0001 	mvn.w	r0, #1
 8003dca:	f7fc fbc7 	bl	800055c <HAL_NVIC_SetPriority>
  /* SysTick_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(SysTick_IRQn, 0, 0);
 8003dce:	2200      	movs	r2, #0
 8003dd0:	4611      	mov	r1, r2
 8003dd2:	f04f 30ff 	mov.w	r0, #4294967295
 8003dd6:	f7fc fbc1 	bl	800055c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003dda:	b003      	add	sp, #12
 8003ddc:	f85d fb04 	ldr.w	pc, [sp], #4
 8003de0:	40021000 	.word	0x40021000

08003de4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003de4:	b507      	push	{r0, r1, r2, lr}

  if(htim_base->Instance==TIM15)
 8003de6:	4b0d      	ldr	r3, [pc, #52]	; (8003e1c <HAL_TIM_Base_MspInit+0x38>)
 8003de8:	6802      	ldr	r2, [r0, #0]
 8003dea:	429a      	cmp	r2, r3
 8003dec:	d112      	bne.n	8003e14 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM15_MspInit 0 */

  /* USER CODE END TIM15_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003dee:	f503 4350 	add.w	r3, r3, #53248	; 0xd000
    /* TIM15 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003df2:	2018      	movs	r0, #24
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003df4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003df6:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8003dfa:	661a      	str	r2, [r3, #96]	; 0x60
 8003dfc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003dfe:	2200      	movs	r2, #0
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003e00:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e04:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003e06:	4611      	mov	r1, r2
    __HAL_RCC_TIM15_CLK_ENABLE();
 8003e08:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(TIM1_BRK_TIM15_IRQn, 0, 0);
 8003e0a:	f7fc fba7 	bl	800055c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM15_IRQn);
 8003e0e:	2018      	movs	r0, #24
 8003e10:	f7fc fbd8 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM15_MspInit 1 */

  /* USER CODE END TIM15_MspInit 1 */
  }

}
 8003e14:	b003      	add	sp, #12
 8003e16:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e1a:	bf00      	nop
 8003e1c:	40014000 	.word	0x40014000

08003e20 <HAL_UART_MspInit>:
  }

}

void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003e20:	b5f0      	push	{r4, r5, r6, r7, lr}

  GPIO_InitTypeDef GPIO_InitStruct;
  if(huart->Instance==USART1)
 8003e22:	6803      	ldr	r3, [r0, #0]
 8003e24:	4a34      	ldr	r2, [pc, #208]	; (8003ef8 <HAL_UART_MspInit+0xd8>)
 8003e26:	4293      	cmp	r3, r2
{
 8003e28:	b089      	sub	sp, #36	; 0x24
 8003e2a:	4606      	mov	r6, r0
  if(huart->Instance==USART1)
 8003e2c:	d13a      	bne.n	8003ea4 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e2e:	4b33      	ldr	r3, [pc, #204]	; (8003efc <HAL_UART_MspInit+0xdc>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

    /* USART1 DMA Init */
    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003e30:	4c33      	ldr	r4, [pc, #204]	; (8003f00 <HAL_UART_MspInit+0xe0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003e32:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003e34:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e38:	661a      	str	r2, [r3, #96]	; 0x60
 8003e3a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003e40:	9301      	str	r3, [sp, #4]
 8003e42:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003e44:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003e48:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4a:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e4c:	2500      	movs	r5, #0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e4e:	2702      	movs	r7, #2
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e50:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e52:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e56:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e58:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003e5a:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003e5c:	9704      	str	r7, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e5e:	9505      	str	r5, [sp, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003e60:	f7fc fcfe 	bl	8000860 <HAL_GPIO_Init>
    hdma_usart1_tx.Instance = DMA1_Channel4;
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <HAL_UART_MspInit+0xe4>)
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003e66:	60e5      	str	r5, [r4, #12]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_2;
 8003e68:	e884 0088 	stmia.w	r4, {r3, r7}
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003e6c:	2310      	movs	r3, #16
 8003e6e:	60a3      	str	r3, [r4, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e70:	4620      	mov	r0, r4
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003e72:	2380      	movs	r3, #128	; 0x80
 8003e74:	6123      	str	r3, [r4, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003e76:	6165      	str	r5, [r4, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003e78:	61a5      	str	r5, [r4, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8003e7a:	61e5      	str	r5, [r4, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003e7c:	6225      	str	r5, [r4, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8003e7e:	f7fc fbd5 	bl	800062c <HAL_DMA_Init>
 8003e82:	b118      	cbz	r0, 8003e8c <HAL_UART_MspInit+0x6c>
    {
      _Error_Handler(__FILE__, __LINE__);
 8003e84:	21a9      	movs	r1, #169	; 0xa9
 8003e86:	4820      	ldr	r0, [pc, #128]	; (8003f08 <HAL_UART_MspInit+0xe8>)
 8003e88:	f7ff ff64 	bl	8003d54 <_Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2025      	movs	r0, #37	; 0x25
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e90:	66b4      	str	r4, [r6, #104]	; 0x68
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e92:	4611      	mov	r1, r2
    __HAL_LINKDMA(huart,hdmatx,hdma_usart1_tx);
 8003e94:	62a6      	str	r6, [r4, #40]	; 0x28
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8003e96:	f7fc fb61 	bl	800055c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003e9a:	2025      	movs	r0, #37	; 0x25
 8003e9c:	f7fc fb92 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003ea0:	b009      	add	sp, #36	; 0x24
 8003ea2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if(huart->Instance==USART2)
 8003ea4:	4a19      	ldr	r2, [pc, #100]	; (8003f0c <HAL_UART_MspInit+0xec>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d1fa      	bne.n	8003ea0 <HAL_UART_MspInit+0x80>
    __HAL_RCC_USART2_CLK_ENABLE();
 8003eaa:	4b14      	ldr	r3, [pc, #80]	; (8003efc <HAL_UART_MspInit+0xdc>)
 8003eac:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003eae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003eb2:	659a      	str	r2, [r3, #88]	; 0x58
 8003eb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003eb6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003eba:	9302      	str	r3, [sp, #8]
 8003ebc:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ebe:	2304      	movs	r3, #4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ec0:	2403      	movs	r4, #3
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8003ec2:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ec4:	2602      	movs	r6, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ec6:	2500      	movs	r5, #0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ec8:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003eca:	a903      	add	r1, sp, #12
 8003ecc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003ed0:	9307      	str	r3, [sp, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ed2:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ed4:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003ed6:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ed8:	f7fc fcc2 	bl	8000860 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003edc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ee0:	a903      	add	r1, sp, #12
 8003ee2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003ee6:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003ee8:	9604      	str	r6, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003eea:	9505      	str	r5, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003eec:	9406      	str	r4, [sp, #24]
    GPIO_InitStruct.Alternate = GPIO_AF3_USART2;
 8003eee:	9407      	str	r4, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ef0:	f7fc fcb6 	bl	8000860 <HAL_GPIO_Init>
}
 8003ef4:	e7d4      	b.n	8003ea0 <HAL_UART_MspInit+0x80>
 8003ef6:	bf00      	nop
 8003ef8:	40013800 	.word	0x40013800
 8003efc:	40021000 	.word	0x40021000
 8003f00:	20000c1c 	.word	0x20000c1c
 8003f04:	40020044 	.word	0x40020044
 8003f08:	0800440c 	.word	0x0800440c
 8003f0c:	40004400 	.word	0x40004400

08003f10 <NMI_Handler>:
 8003f10:	4770      	bx	lr

08003f12 <HardFault_Handler>:

/**
* @brief This function handles Hard fault interrupt.
*/
void HardFault_Handler(void)
{
 8003f12:	e7fe      	b.n	8003f12 <HardFault_Handler>

08003f14 <MemManage_Handler>:

/**
* @brief This function handles Memory management fault.
*/
void MemManage_Handler(void)
{
 8003f14:	e7fe      	b.n	8003f14 <MemManage_Handler>

08003f16 <BusFault_Handler>:

/**
* @brief This function handles Prefetch fault, memory access fault.
*/
void BusFault_Handler(void)
{
 8003f16:	e7fe      	b.n	8003f16 <BusFault_Handler>

08003f18 <UsageFault_Handler>:

/**
* @brief This function handles Undefined instruction or illegal state.
*/
void UsageFault_Handler(void)
{
 8003f18:	e7fe      	b.n	8003f18 <UsageFault_Handler>

08003f1a <SVC_Handler>:
 8003f1a:	4770      	bx	lr

08003f1c <DebugMon_Handler>:
 8003f1c:	4770      	bx	lr

08003f1e <PendSV_Handler>:

/**
* @brief This function handles Pendable request for system service.
*/
void PendSV_Handler(void)
{
 8003f1e:	4770      	bx	lr

08003f20 <SysTick_Handler>:

/**
* @brief This function handles System tick timer.
*/
void SysTick_Handler(void)
{
 8003f20:	b508      	push	{r3, lr}
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003f22:	f7fc fafb 	bl	800051c <HAL_IncTick>
  HAL_SYSTICK_IRQHandler();
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003f26:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_SYSTICK_IRQHandler();
 8003f2a:	f7fc bb7a 	b.w	8000622 <HAL_SYSTICK_IRQHandler>
	...

08003f30 <DMA1_Channel4_IRQHandler>:
void DMA1_Channel4_IRQHandler(void)
{
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8003f30:	4801      	ldr	r0, [pc, #4]	; (8003f38 <DMA1_Channel4_IRQHandler+0x8>)
 8003f32:	f7fc bc4d 	b.w	80007d0 <HAL_DMA_IRQHandler>
 8003f36:	bf00      	nop
 8003f38:	20000c1c 	.word	0x20000c1c

08003f3c <TIM1_BRK_TIM15_IRQHandler>:
void TIM1_BRK_TIM15_IRQHandler(void)
{
  /* USER CODE BEGIN TIM1_BRK_TIM15_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM15_IRQn 0 */
  HAL_TIM_IRQHandler(&htim15);
 8003f3c:	4801      	ldr	r0, [pc, #4]	; (8003f44 <TIM1_BRK_TIM15_IRQHandler+0x8>)
 8003f3e:	f7fd bfc8 	b.w	8001ed2 <HAL_TIM_IRQHandler>
 8003f42:	bf00      	nop
 8003f44:	20000bd8 	.word	0x20000bd8

08003f48 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8003f48:	4801      	ldr	r0, [pc, #4]	; (8003f50 <USART1_IRQHandler+0x8>)
 8003f4a:	f7fe ba95 	b.w	8002478 <HAL_UART_IRQHandler>
 8003f4e:	bf00      	nop
 8003f50:	20000c64 	.word	0x20000c64

08003f54 <USB_IRQHandler>:
void USB_IRQHandler(void)
{
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 8003f54:	4801      	ldr	r0, [pc, #4]	; (8003f5c <USB_IRQHandler+0x8>)
 8003f56:	f7fc be67 	b.w	8000c28 <HAL_PCD_IRQHandler>
 8003f5a:	bf00      	nop
 8003f5c:	20001524 	.word	0x20001524

08003f60 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f60:	490f      	ldr	r1, [pc, #60]	; (8003fa0 <SystemInit+0x40>)
 8003f62:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 8003f66:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f6a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003f6e:	4b0d      	ldr	r3, [pc, #52]	; (8003fa4 <SystemInit+0x44>)
 8003f70:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003f72:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003f74:	f042 0201 	orr.w	r2, r2, #1
 8003f78:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003f7a:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003f7c:	681a      	ldr	r2, [r3, #0]
 8003f7e:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003f82:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000
 8003f86:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003f88:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8003f8c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003f94:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8003f96:	6198      	str	r0, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003f98:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003f9c:	608b      	str	r3, [r1, #8]
 8003f9e:	4770      	bx	lr
 8003fa0:	e000ed00 	.word	0xe000ed00
 8003fa4:	40021000 	.word	0x40021000

08003fa8 <CDC_DeInit_FS>:
static int8_t CDC_DeInit_FS(void)
{
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
  /* USER CODE END 4 */
}
 8003fa8:	2000      	movs	r0, #0
 8003faa:	4770      	bx	lr

08003fac <CDC_Control_FS>:
    break;
  }

  return (USBD_OK);
  /* USER CODE END 5 */
}
 8003fac:	2000      	movs	r0, #0
 8003fae:	4770      	bx	lr

08003fb0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 8003fb0:	b508      	push	{r3, lr}
  /* USER CODE BEGIN 6 */
	HAL_UART_Transmit_DMA(&huart1,Buf,*Len);
 8003fb2:	880a      	ldrh	r2, [r1, #0]
 8003fb4:	4601      	mov	r1, r0
 8003fb6:	4802      	ldr	r0, [pc, #8]	; (8003fc0 <CDC_Receive_FS+0x10>)
 8003fb8:	f7fe f984 	bl	80022c4 <HAL_UART_Transmit_DMA>

  //USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
  //USBD_CDC_ReceivePacket(&hUsbDeviceFS);
  return (USBD_OK);
  /* USER CODE END 6 */
}
 8003fbc:	2000      	movs	r0, #0
 8003fbe:	bd08      	pop	{r3, pc}
 8003fc0:	20000c64 	.word	0x20000c64

08003fc4 <CDC_Init_FS>:
{
 8003fc4:	b510      	push	{r4, lr}
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8003fc6:	4c06      	ldr	r4, [pc, #24]	; (8003fe0 <CDC_Init_FS+0x1c>)
 8003fc8:	4906      	ldr	r1, [pc, #24]	; (8003fe4 <CDC_Init_FS+0x20>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	4620      	mov	r0, r4
 8003fce:	f7ff f9c9 	bl	8003364 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 8003fd2:	4905      	ldr	r1, [pc, #20]	; (8003fe8 <CDC_Init_FS+0x24>)
 8003fd4:	4620      	mov	r0, r4
 8003fd6:	f7ff f9cd 	bl	8003374 <USBD_CDC_SetRxBuffer>
}
 8003fda:	2000      	movs	r0, #0
 8003fdc:	bd10      	pop	{r4, pc}
 8003fde:	bf00      	nop
 8003fe0:	200007b4 	.word	0x200007b4
 8003fe4:	2000113c 	.word	0x2000113c
 8003fe8:	20000d54 	.word	0x20000d54

08003fec <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8003fec:	b510      	push	{r4, lr}
  uint8_t result = USBD_OK;
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 8003fee:	4c09      	ldr	r4, [pc, #36]	; (8004014 <CDC_Transmit_FS+0x28>)
 8003ff0:	f8d4 3218 	ldr.w	r3, [r4, #536]	; 0x218
  if (hcdc->TxState != 0){
 8003ff4:	f8d3 3214 	ldr.w	r3, [r3, #532]	; 0x214
{
 8003ff8:	460a      	mov	r2, r1
  if (hcdc->TxState != 0){
 8003ffa:	b943      	cbnz	r3, 800400e <CDC_Transmit_FS+0x22>
    return USBD_BUSY;
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8003ffc:	4601      	mov	r1, r0
 8003ffe:	4620      	mov	r0, r4
 8004000:	f7ff f9b0 	bl	8003364 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8004004:	4620      	mov	r0, r4
  /* USER CODE END 7 */
  return result;
}
 8004006:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 800400a:	f7ff b9b9 	b.w	8003380 <USBD_CDC_TransmitPacket>
}
 800400e:	2001      	movs	r0, #1
 8004010:	bd10      	pop	{r4, pc}
 8004012:	bf00      	nop
 8004014:	200007b4 	.word	0x200007b4

08004018 <HAL_UART_TxCpltCallback>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004018:	b510      	push	{r4, lr}
	USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 800401a:	4c05      	ldr	r4, [pc, #20]	; (8004030 <HAL_UART_TxCpltCallback+0x18>)
 800401c:	4905      	ldr	r1, [pc, #20]	; (8004034 <HAL_UART_TxCpltCallback+0x1c>)
 800401e:	4620      	mov	r0, r4
 8004020:	f7ff f9a8 	bl	8003374 <USBD_CDC_SetRxBuffer>
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 8004024:	4620      	mov	r0, r4
}
 8004026:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 800402a:	f7ff b9c0 	b.w	80033ae <USBD_CDC_ReceivePacket>
 800402e:	bf00      	nop
 8004030:	200007b4 	.word	0x200007b4
 8004034:	20000d54 	.word	0x20000d54

08004038 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8004038:	b507      	push	{r0, r1, r2, lr}
  if(pcdHandle->Instance==USB)
 800403a:	4b0d      	ldr	r3, [pc, #52]	; (8004070 <HAL_PCD_MspInit+0x38>)
 800403c:	6802      	ldr	r2, [r0, #0]
 800403e:	429a      	cmp	r2, r3
 8004040:	d112      	bne.n	8004068 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 8004042:	f503 33d4 	add.w	r3, r3, #108544	; 0x1a800

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004046:	2043      	movs	r0, #67	; 0x43
    __HAL_RCC_USB_CLK_ENABLE();
 8004048:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 800404a:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 800404e:	659a      	str	r2, [r3, #88]	; 0x58
 8004050:	6d9b      	ldr	r3, [r3, #88]	; 0x58
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8004052:	2200      	movs	r2, #0
    __HAL_RCC_USB_CLK_ENABLE();
 8004054:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8004058:	9301      	str	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800405a:	4611      	mov	r1, r2
    __HAL_RCC_USB_CLK_ENABLE();
 800405c:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 800405e:	f7fc fa7d 	bl	800055c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8004062:	2043      	movs	r0, #67	; 0x43
 8004064:	f7fc faae 	bl	80005c4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8004068:	b003      	add	sp, #12
 800406a:	f85d fb04 	ldr.w	pc, [sp], #4
 800406e:	bf00      	nop
 8004070:	40006800 	.word	0x40006800

08004074 <HAL_PCD_SetupStageCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8004074:	f500 717c 	add.w	r1, r0, #1008	; 0x3f0
 8004078:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
 800407c:	f7ff b9dd 	b.w	800343a <USBD_LL_SetupStage>

08004080 <HAL_PCD_DataOutStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8004080:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004084:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
 8004088:	f8d3 2220 	ldr.w	r2, [r3, #544]	; 0x220
 800408c:	f7ff ba02 	b.w	8003494 <USBD_LL_DataOutStage>

08004090 <HAL_PCD_DataInStageCallback>:
  * @param  epnum: Endpoint number
  * @retval None
  */
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
{
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8004090:	eb00 1341 	add.w	r3, r0, r1, lsl #5
 8004094:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
 8004098:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800409a:	f7ff ba2d 	b.w	80034f8 <USBD_LL_DataInStage>

0800409e <HAL_PCD_SOFCallback>:
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
{
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800409e:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
 80040a2:	f7ff baa9 	b.w	80035f8 <USBD_LL_SOF>

080040a6 <HAL_PCD_ResetCallback>:
  * @brief  Reset callback.
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
{ 
 80040a6:	b510      	push	{r4, lr}
 80040a8:	4604      	mov	r4, r0
	
  default:
    speed = USBD_SPEED_FULL;
    break;    
  }
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80040aa:	2101      	movs	r1, #1
 80040ac:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
 80040b0:	f7ff fa90 	bl	80035d4 <USBD_LL_SetSpeed>
  
  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80040b4:	f8d4 0430 	ldr.w	r0, [r4, #1072]	; 0x430
}
 80040b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80040bc:	f7ff ba6b 	b.w	8003596 <USBD_LL_Reset>

080040c0 <HAL_PCD_SuspendCallback>:
  * When Low power mode is enabled the debug cannot be used (IAR, Keil doesn't support it)
  * @param  hpcd: PCD handle
  * @retval None
  */
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
{
 80040c0:	b510      	push	{r4, lr}
 80040c2:	4604      	mov	r4, r0
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80040c4:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
 80040c8:	f7ff fa87 	bl	80035da <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80040cc:	69e3      	ldr	r3, [r4, #28]
 80040ce:	b123      	cbz	r3, 80040da <HAL_PCD_SuspendCallback+0x1a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80040d0:	4a02      	ldr	r2, [pc, #8]	; (80040dc <HAL_PCD_SuspendCallback+0x1c>)
 80040d2:	6913      	ldr	r3, [r2, #16]
 80040d4:	f043 0306 	orr.w	r3, r3, #6
 80040d8:	6113      	str	r3, [r2, #16]
 80040da:	bd10      	pop	{r4, pc}
 80040dc:	e000ed00 	.word	0xe000ed00

080040e0 <HAL_PCD_ResumeCallback>:
  */
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
{

  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80040e0:	69c3      	ldr	r3, [r0, #28]
{
 80040e2:	b510      	push	{r4, lr}
 80040e4:	4604      	mov	r4, r0
  if (hpcd->Init.low_power_enable)
 80040e6:	b133      	cbz	r3, 80040f6 <HAL_PCD_ResumeCallback+0x16>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80040e8:	4a06      	ldr	r2, [pc, #24]	; (8004104 <HAL_PCD_ResumeCallback+0x24>)
 80040ea:	6913      	ldr	r3, [r2, #16]
 80040ec:	f023 0306 	bic.w	r3, r3, #6
 80040f0:	6113      	str	r3, [r2, #16]
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
  SystemClock_Config();
 80040f2:	f7ff fd01 	bl	8003af8 <SystemClock_Config>
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80040f6:	f8d4 0430 	ldr.w	r0, [r4, #1072]	; 0x430
}
 80040fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 80040fe:	f7ff ba75 	b.w	80035ec <USBD_LL_Resume>
 8004102:	bf00      	nop
 8004104:	e000ed00 	.word	0xe000ed00

08004108 <USBD_LL_Init>:
{
 8004108:	b510      	push	{r4, lr}
 800410a:	4604      	mov	r4, r0
  HAL_PWREx_EnableVddUSB();
 800410c:	f7fd f91a 	bl	8001344 <HAL_PWREx_EnableVddUSB>
  hpcd_USB_FS.pData = pdev;
 8004110:	4819      	ldr	r0, [pc, #100]	; (8004178 <USBD_LL_Init+0x70>)
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004112:	4b1a      	ldr	r3, [pc, #104]	; (800417c <USBD_LL_Init+0x74>)
  hpcd_USB_FS.pData = pdev;
 8004114:	f8c0 4430 	str.w	r4, [r0, #1072]	; 0x430
  hpcd_USB_FS.Init.dev_endpoints = 8;
 8004118:	f04f 0e08 	mov.w	lr, #8
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 800411c:	2201      	movs	r2, #1
  hpcd_USB_FS.Init.dev_endpoints = 8;
 800411e:	e880 4008 	stmia.w	r0, {r3, lr}
  pdev->pData = &hpcd_USB_FS;
 8004122:	f8c4 0220 	str.w	r0, [r4, #544]	; 0x220
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 8004126:	2300      	movs	r3, #0
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8004128:	6082      	str	r2, [r0, #8]
  hpcd_USB_FS.Init.ep0_mps = DEP0CTL_MPS_64;
 800412a:	6103      	str	r3, [r0, #16]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800412c:	6142      	str	r2, [r0, #20]
  hpcd_USB_FS.Init.Sof_enable = DISABLE;
 800412e:	6183      	str	r3, [r0, #24]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8004130:	61c3      	str	r3, [r0, #28]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8004132:	6203      	str	r3, [r0, #32]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 8004134:	6243      	str	r3, [r0, #36]	; 0x24
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8004136:	f7fc fc4c 	bl	80009d2 <HAL_PCD_Init>
 800413a:	b120      	cbz	r0, 8004146 <USBD_LL_Init+0x3e>
    _Error_Handler(__FILE__, __LINE__);
 800413c:	f44f 719f 	mov.w	r1, #318	; 0x13e
 8004140:	480f      	ldr	r0, [pc, #60]	; (8004180 <USBD_LL_Init+0x78>)
 8004142:	f7ff fe07 	bl	8003d54 <_Error_Handler>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8004146:	2200      	movs	r2, #0
 8004148:	4611      	mov	r1, r2
 800414a:	2318      	movs	r3, #24
 800414c:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 8004150:	f7fd f879 	bl	8001246 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8004154:	2358      	movs	r3, #88	; 0x58
 8004156:	2200      	movs	r2, #0
 8004158:	2180      	movs	r1, #128	; 0x80
 800415a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800415e:	f7fd f872 	bl	8001246 <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0x100);
 8004162:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004166:	2200      	movs	r2, #0
 8004168:	2181      	movs	r1, #129	; 0x81
 800416a:	f8d4 0220 	ldr.w	r0, [r4, #544]	; 0x220
 800416e:	f7fd f86a 	bl	8001246 <HAL_PCDEx_PMAConfig>
}
 8004172:	2000      	movs	r0, #0
 8004174:	bd10      	pop	{r4, pc}
 8004176:	bf00      	nop
 8004178:	20001524 	.word	0x20001524
 800417c:	40006800 	.word	0x40006800
 8004180:	08004474 	.word	0x08004474

08004184 <USBD_LL_Start>:
{
 8004184:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_Start(pdev->pData);
 8004186:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800418a:	f7fc fca2 	bl	8000ad2 <HAL_PCD_Start>
 800418e:	2803      	cmp	r0, #3
 8004190:	bf9a      	itte	ls
 8004192:	4b02      	ldrls	r3, [pc, #8]	; (800419c <USBD_LL_Start+0x18>)
 8004194:	5c18      	ldrbls	r0, [r3, r0]
 8004196:	2002      	movhi	r0, #2
}
 8004198:	bd08      	pop	{r3, pc}
 800419a:	bf00      	nop
 800419c:	08004470 	.word	0x08004470

080041a0 <USBD_LL_OpenEP>:
{
 80041a0:	b510      	push	{r4, lr}
 80041a2:	461c      	mov	r4, r3
  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80041a4:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80041a8:	4613      	mov	r3, r2
 80041aa:	4622      	mov	r2, r4
 80041ac:	f7fc fcba 	bl	8000b24 <HAL_PCD_EP_Open>
 80041b0:	2803      	cmp	r0, #3
 80041b2:	bf9a      	itte	ls
 80041b4:	4b01      	ldrls	r3, [pc, #4]	; (80041bc <USBD_LL_OpenEP+0x1c>)
 80041b6:	5c18      	ldrbls	r0, [r3, r0]
 80041b8:	2002      	movhi	r0, #2
}
 80041ba:	bd10      	pop	{r4, pc}
 80041bc:	08004470 	.word	0x08004470

080041c0 <USBD_LL_CloseEP>:
{
 80041c0:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80041c2:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80041c6:	f7fc fcd2 	bl	8000b6e <HAL_PCD_EP_Close>
 80041ca:	2803      	cmp	r0, #3
 80041cc:	bf9a      	itte	ls
 80041ce:	4b02      	ldrls	r3, [pc, #8]	; (80041d8 <USBD_LL_CloseEP+0x18>)
 80041d0:	5c18      	ldrbls	r0, [r3, r0]
 80041d2:	2002      	movhi	r0, #2
}
 80041d4:	bd08      	pop	{r3, pc}
 80041d6:	bf00      	nop
 80041d8:	08004470 	.word	0x08004470

080041dc <USBD_LL_StallEP>:
{
 80041dc:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80041de:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80041e2:	f7fc ffdf 	bl	80011a4 <HAL_PCD_EP_SetStall>
 80041e6:	2803      	cmp	r0, #3
 80041e8:	bf9a      	itte	ls
 80041ea:	4b02      	ldrls	r3, [pc, #8]	; (80041f4 <USBD_LL_StallEP+0x18>)
 80041ec:	5c18      	ldrbls	r0, [r3, r0]
 80041ee:	2002      	movhi	r0, #2
}
 80041f0:	bd08      	pop	{r3, pc}
 80041f2:	bf00      	nop
 80041f4:	08004470 	.word	0x08004470

080041f8 <USBD_LL_ClearStallEP>:
{
 80041f8:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);  
 80041fa:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 80041fe:	f7fc fffd 	bl	80011fc <HAL_PCD_EP_ClrStall>
 8004202:	2803      	cmp	r0, #3
 8004204:	bf9a      	itte	ls
 8004206:	4b02      	ldrls	r3, [pc, #8]	; (8004210 <USBD_LL_ClearStallEP+0x18>)
 8004208:	5c18      	ldrbls	r0, [r3, r0]
 800420a:	2002      	movhi	r0, #2
}
 800420c:	bd08      	pop	{r3, pc}
 800420e:	bf00      	nop
 8004210:	08004470 	.word	0x08004470

08004214 <USBD_LL_IsStallEP>:
  if((ep_addr & 0x80) == 0x80)
 8004214:	060a      	lsls	r2, r1, #24
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8004216:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 800421a:	bf45      	ittet	mi
 800421c:	f001 017f 	andmi.w	r1, r1, #127	; 0x7f
 8004220:	eb03 1341 	addmi.w	r3, r3, r1, lsl #5
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 8004224:	eb03 1341 	addpl.w	r3, r3, r1, lsl #5
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall; 
 8004228:	f893 002e 	ldrbmi.w	r0, [r3, #46]	; 0x2e
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall; 
 800422c:	bf58      	it	pl
 800422e:	f893 020e 	ldrbpl.w	r0, [r3, #526]	; 0x20e
}
 8004232:	4770      	bx	lr

08004234 <USBD_LL_SetUSBAddress>:
{
 8004234:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8004236:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800423a:	f7fc fc5f 	bl	8000afc <HAL_PCD_SetAddress>
 800423e:	2803      	cmp	r0, #3
 8004240:	bf9a      	itte	ls
 8004242:	4b02      	ldrls	r3, [pc, #8]	; (800424c <USBD_LL_SetUSBAddress+0x18>)
 8004244:	5c18      	ldrbls	r0, [r3, r0]
 8004246:	2002      	movhi	r0, #2
}
 8004248:	bd08      	pop	{r3, pc}
 800424a:	bf00      	nop
 800424c:	08004470 	.word	0x08004470

08004250 <USBD_LL_Transmit>:
{
 8004250:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8004252:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004256:	f7fc fcce 	bl	8000bf6 <HAL_PCD_EP_Transmit>
 800425a:	2803      	cmp	r0, #3
 800425c:	bf9a      	itte	ls
 800425e:	4b02      	ldrls	r3, [pc, #8]	; (8004268 <USBD_LL_Transmit+0x18>)
 8004260:	5c18      	ldrbls	r0, [r3, r0]
 8004262:	2002      	movhi	r0, #2
}
 8004264:	bd08      	pop	{r3, pc}
 8004266:	bf00      	nop
 8004268:	08004470 	.word	0x08004470

0800426c <USBD_LL_PrepareReceive>:
{
 800426c:	b508      	push	{r3, lr}
  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800426e:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 8004272:	f7fc fc9f 	bl	8000bb4 <HAL_PCD_EP_Receive>
 8004276:	2803      	cmp	r0, #3
 8004278:	bf9a      	itte	ls
 800427a:	4b02      	ldrls	r3, [pc, #8]	; (8004284 <USBD_LL_PrepareReceive+0x18>)
 800427c:	5c18      	ldrbls	r0, [r3, r0]
 800427e:	2002      	movhi	r0, #2
}
 8004280:	bd08      	pop	{r3, pc}
 8004282:	bf00      	nop
 8004284:	08004470 	.word	0x08004470

08004288 <USBD_LL_GetRxDataSize>:
{
 8004288:	b508      	push	{r3, lr}
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 800428a:	f8d0 0220 	ldr.w	r0, [r0, #544]	; 0x220
 800428e:	f7fc fcab 	bl	8000be8 <HAL_PCD_EP_GetRxCount>
}
 8004292:	bd08      	pop	{r3, pc}

08004294 <HAL_PCDEx_LPM_Callback>:
{
 8004294:	b510      	push	{r4, lr}
 8004296:	4604      	mov	r4, r0
  switch (msg)
 8004298:	b111      	cbz	r1, 80042a0 <HAL_PCDEx_LPM_Callback+0xc>
 800429a:	2901      	cmp	r1, #1
 800429c:	d00f      	beq.n	80042be <HAL_PCDEx_LPM_Callback+0x2a>
 800429e:	bd10      	pop	{r4, pc}
    if (hpcd->Init.low_power_enable)
 80042a0:	69c3      	ldr	r3, [r0, #28]
 80042a2:	b133      	cbz	r3, 80042b2 <HAL_PCDEx_LPM_Callback+0x1e>
      SystemClock_Config();
 80042a4:	f7ff fc28 	bl	8003af8 <SystemClock_Config>
      SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80042a8:	4a0b      	ldr	r2, [pc, #44]	; (80042d8 <HAL_PCDEx_LPM_Callback+0x44>)
 80042aa:	6913      	ldr	r3, [r2, #16]
 80042ac:	f023 0306 	bic.w	r3, r3, #6
 80042b0:	6113      	str	r3, [r2, #16]
    USBD_LL_Resume(hpcd->pData);
 80042b2:	f8d4 0430 	ldr.w	r0, [r4, #1072]	; 0x430
}
 80042b6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    USBD_LL_Resume(hpcd->pData);
 80042ba:	f7ff b997 	b.w	80035ec <USBD_LL_Resume>
    USBD_LL_Suspend(hpcd->pData);
 80042be:	f8d0 0430 	ldr.w	r0, [r0, #1072]	; 0x430
 80042c2:	f7ff f98a 	bl	80035da <USBD_LL_Suspend>
    if (hpcd->Init.low_power_enable)
 80042c6:	69e3      	ldr	r3, [r4, #28]
 80042c8:	b123      	cbz	r3, 80042d4 <HAL_PCDEx_LPM_Callback+0x40>
      SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80042ca:	4a03      	ldr	r2, [pc, #12]	; (80042d8 <HAL_PCDEx_LPM_Callback+0x44>)
 80042cc:	6913      	ldr	r3, [r2, #16]
 80042ce:	f043 0306 	orr.w	r3, r3, #6
 80042d2:	6113      	str	r3, [r2, #16]
 80042d4:	bd10      	pop	{r4, pc}
 80042d6:	bf00      	nop
 80042d8:	e000ed00 	.word	0xe000ed00

080042dc <USBD_static_malloc>:
}
 80042dc:	4800      	ldr	r0, [pc, #0]	; (80042e0 <USBD_static_malloc+0x4>)
 80042de:	4770      	bx	lr
 80042e0:	20000590 	.word	0x20000590

080042e4 <USBD_static_free>:
{
 80042e4:	4770      	bx	lr

080042e6 <USBD_LL_BatteryCharging>:
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_BatteryCharging(USBD_HandleTypeDef *pdev)
{
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*)pdev->pData;
  if (hpcd->Init.battery_charging_enable == ENABLE)
 80042e6:	f8d0 3220 	ldr.w	r3, [r0, #544]	; 0x220
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2b01      	cmp	r3, #1
  }
  else
  {
    return USBD_FAIL;
  }
}
 80042ee:	bf14      	ite	ne
 80042f0:	2002      	movne	r0, #2
 80042f2:	2000      	moveq	r0, #0
 80042f4:	4770      	bx	lr
	...

080042f8 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80042f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004330 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 80042fc:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 80042fe:	e003      	b.n	8004308 <LoopCopyDataInit>

08004300 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004300:	4b0c      	ldr	r3, [pc, #48]	; (8004334 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004302:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004304:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8004306:	3104      	adds	r1, #4

08004308 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8004308:	480b      	ldr	r0, [pc, #44]	; (8004338 <LoopForever+0xa>)
	ldr	r3, =_edata
 800430a:	4b0c      	ldr	r3, [pc, #48]	; (800433c <LoopForever+0xe>)
	adds	r2, r0, r1
 800430c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800430e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004310:	d3f6      	bcc.n	8004300 <CopyDataInit>
	ldr	r2, =_sbss
 8004312:	4a0b      	ldr	r2, [pc, #44]	; (8004340 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004314:	e002      	b.n	800431c <LoopFillZerobss>

08004316 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8004316:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8004318:	f842 3b04 	str.w	r3, [r2], #4

0800431c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 800431c:	4b09      	ldr	r3, [pc, #36]	; (8004344 <LoopForever+0x16>)
	cmp	r2, r3
 800431e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004320:	d3f9      	bcc.n	8004316 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004322:	f7ff fe1d 	bl	8003f60 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004326:	f000 f811 	bl	800434c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800432a:	f7ff fc3d 	bl	8003ba8 <main>

0800432e <LoopForever>:

LoopForever:
    b LoopForever
 800432e:	e7fe      	b.n	800432e <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004330:	20010000 	.word	0x20010000
	ldr	r3, =_sidata
 8004334:	08004498 	.word	0x08004498
	ldr	r0, =_sdata
 8004338:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 800433c:	20000168 	.word	0x20000168
	ldr	r2, =_sbss
 8004340:	20000168 	.word	0x20000168
	ldr	r3, = _ebss
 8004344:	20001958 	.word	0x20001958

08004348 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8004348:	e7fe      	b.n	8004348 <ADC1_IRQHandler>
	...

0800434c <__libc_init_array>:
 800434c:	b570      	push	{r4, r5, r6, lr}
 800434e:	4e0d      	ldr	r6, [pc, #52]	; (8004384 <__libc_init_array+0x38>)
 8004350:	4c0d      	ldr	r4, [pc, #52]	; (8004388 <__libc_init_array+0x3c>)
 8004352:	1ba4      	subs	r4, r4, r6
 8004354:	10a4      	asrs	r4, r4, #2
 8004356:	2500      	movs	r5, #0
 8004358:	42a5      	cmp	r5, r4
 800435a:	d109      	bne.n	8004370 <__libc_init_array+0x24>
 800435c:	4e0b      	ldr	r6, [pc, #44]	; (800438c <__libc_init_array+0x40>)
 800435e:	4c0c      	ldr	r4, [pc, #48]	; (8004390 <__libc_init_array+0x44>)
 8004360:	f000 f818 	bl	8004394 <_init>
 8004364:	1ba4      	subs	r4, r4, r6
 8004366:	10a4      	asrs	r4, r4, #2
 8004368:	2500      	movs	r5, #0
 800436a:	42a5      	cmp	r5, r4
 800436c:	d105      	bne.n	800437a <__libc_init_array+0x2e>
 800436e:	bd70      	pop	{r4, r5, r6, pc}
 8004370:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004374:	4798      	blx	r3
 8004376:	3501      	adds	r5, #1
 8004378:	e7ee      	b.n	8004358 <__libc_init_array+0xc>
 800437a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800437e:	4798      	blx	r3
 8004380:	3501      	adds	r5, #1
 8004382:	e7f2      	b.n	800436a <__libc_init_array+0x1e>
 8004384:	08004490 	.word	0x08004490
 8004388:	08004490 	.word	0x08004490
 800438c:	08004490 	.word	0x08004490
 8004390:	08004494 	.word	0x08004494

08004394 <_init>:
 8004394:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004396:	bf00      	nop
 8004398:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800439a:	bc08      	pop	{r3}
 800439c:	469e      	mov	lr, r3
 800439e:	4770      	bx	lr

080043a0 <_fini>:
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043a2:	bf00      	nop
 80043a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80043a6:	bc08      	pop	{r3}
 80043a8:	469e      	mov	lr, r3
 80043aa:	4770      	bx	lr
